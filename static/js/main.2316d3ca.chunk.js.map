{"version":3,"sources":["../../../src/buttplug_ffi.js","../../../src/ffi.ts","../../../src/errors.ts","../../../src/device.ts","../../../src/connectors.ts","../../../src/sorter.ts","../../../src/client.ts","../../src/ButtplugDeviceContext.js","../../src/ButtplugDeviceController.js","../../src/index.js","VibratorSearchButton.js","VibratorControls.js","App.js","index.js"],"names":["values","valuesById","ClientMessage","i","decode","message","DeviceMessage","VibrateComponent","prototype","object","j","writer","$Writer","create","this","constructor","toObject","$protobuf","util","toJSONOptions","reader","$Reader","endpoint","RawSubscribeCmd","options","defaults","console","log","id","a","ButtplugEmbeddedConnectorOptions","defaultContext","devices","buttplugReady","client","startScanning","ButtplugDeviceContext","createContext","ButtplugDeviceController","vibrate","useEffect","device","PropTypes","children","node","props","super","addDevice","bind","removeDevice","state","d","componentWillUnmount","componentDidMount","buttplugInit","activateConsoleLogger","render","value","ButtplugProvider","propTypes","logLevel","clientName","serverName","onError","onConnect","func","VibratorSearchButton","useContext","useState","pairing","setPairing","handleClick","e","preventDefault","then","msg","catch","error","onClick","href","VibratorControls","vibrateSpeed","setVibrateSpeed","length","type","min","max","onChange","parseFloat","target","map","key","Index","Name","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2316d3ca.chunk.js","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\r\n\"use strict\";\r\nvar $protobuf = require(\"protobufjs/minimal\");\r\n// Common aliases\r\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\r\n// Exported root namespace\r\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\r\n$root.Buttplug = (function () {\r\n    /**\r\n     * Namespace Buttplug.\r\n     * @exports Buttplug\r\n     * @namespace\r\n     */\r\n    var Buttplug = {};\r\n    /**\r\n     * Endpoint enum.\r\n     * @name Buttplug.Endpoint\r\n     * @enum {number}\r\n     * @property {number} Command=0 Command value\r\n     * @property {number} Firmware=1 Firmware value\r\n     * @property {number} Rx=2 Rx value\r\n     * @property {number} RxAccel=3 RxAccel value\r\n     * @property {number} RxBLEBattery=4 RxBLEBattery value\r\n     * @property {number} RxPressure=5 RxPressure value\r\n     * @property {number} RxTouch=6 RxTouch value\r\n     * @property {number} Tx=7 Tx value\r\n     * @property {number} TxMode=8 TxMode value\r\n     * @property {number} TxShock=9 TxShock value\r\n     * @property {number} TxVibrate=10 TxVibrate value\r\n     * @property {number} TxVendorControl=11 TxVendorControl value\r\n     * @property {number} Whitelist=12 Whitelist value\r\n     * @property {number} Generic0=13 Generic0 value\r\n     * @property {number} Generic1=14 Generic1 value\r\n     * @property {number} Generic2=15 Generic2 value\r\n     * @property {number} Generic3=16 Generic3 value\r\n     * @property {number} Generic4=17 Generic4 value\r\n     * @property {number} Generic5=18 Generic5 value\r\n     * @property {number} Generic6=19 Generic6 value\r\n     * @property {number} Generic7=20 Generic7 value\r\n     * @property {number} Generic8=21 Generic8 value\r\n     * @property {number} Generic9=22 Generic9 value\r\n     * @property {number} Generic10=23 Generic10 value\r\n     * @property {number} Generic11=24 Generic11 value\r\n     * @property {number} Generic12=25 Generic12 value\r\n     * @property {number} Generic13=26 Generic13 value\r\n     * @property {number} Generic14=27 Generic14 value\r\n     * @property {number} Generic15=28 Generic15 value\r\n     * @property {number} Generic16=29 Generic16 value\r\n     * @property {number} Generic17=30 Generic17 value\r\n     * @property {number} Generic18=31 Generic18 value\r\n     * @property {number} Generic19=32 Generic19 value\r\n     * @property {number} Generic20=33 Generic20 value\r\n     * @property {number} Generic21=34 Generic21 value\r\n     * @property {number} Generic22=35 Generic22 value\r\n     * @property {number} Generic23=36 Generic23 value\r\n     * @property {number} Generic24=37 Generic24 value\r\n     * @property {number} Generic25=38 Generic25 value\r\n     * @property {number} Generic26=39 Generic26 value\r\n     * @property {number} Generic27=40 Generic27 value\r\n     * @property {number} Generic28=41 Generic28 value\r\n     * @property {number} Generic29=42 Generic29 value\r\n     * @property {number} Generic30=43 Generic30 value\r\n     * @property {number} Generic31=44 Generic31 value\r\n     */\r\n    Buttplug.Endpoint = (function () {\r\n        var valuesById = {}, values = Object.create(valuesById);\r\n        values[valuesById[0] = \"Command\"] = 0;\r\n        values[valuesById[1] = \"Firmware\"] = 1;\r\n        values[valuesById[2] = \"Rx\"] = 2;\r\n        values[valuesById[3] = \"RxAccel\"] = 3;\r\n        values[valuesById[4] = \"RxBLEBattery\"] = 4;\r\n        values[valuesById[5] = \"RxPressure\"] = 5;\r\n        values[valuesById[6] = \"RxTouch\"] = 6;\r\n        values[valuesById[7] = \"Tx\"] = 7;\r\n        values[valuesById[8] = \"TxMode\"] = 8;\r\n        values[valuesById[9] = \"TxShock\"] = 9;\r\n        values[valuesById[10] = \"TxVibrate\"] = 10;\r\n        values[valuesById[11] = \"TxVendorControl\"] = 11;\r\n        values[valuesById[12] = \"Whitelist\"] = 12;\r\n        values[valuesById[13] = \"Generic0\"] = 13;\r\n        values[valuesById[14] = \"Generic1\"] = 14;\r\n        values[valuesById[15] = \"Generic2\"] = 15;\r\n        values[valuesById[16] = \"Generic3\"] = 16;\r\n        values[valuesById[17] = \"Generic4\"] = 17;\r\n        values[valuesById[18] = \"Generic5\"] = 18;\r\n        values[valuesById[19] = \"Generic6\"] = 19;\r\n        values[valuesById[20] = \"Generic7\"] = 20;\r\n        values[valuesById[21] = \"Generic8\"] = 21;\r\n        values[valuesById[22] = \"Generic9\"] = 22;\r\n        values[valuesById[23] = \"Generic10\"] = 23;\r\n        values[valuesById[24] = \"Generic11\"] = 24;\r\n        values[valuesById[25] = \"Generic12\"] = 25;\r\n        values[valuesById[26] = \"Generic13\"] = 26;\r\n        values[valuesById[27] = \"Generic14\"] = 27;\r\n        values[valuesById[28] = \"Generic15\"] = 28;\r\n        values[valuesById[29] = \"Generic16\"] = 29;\r\n        values[valuesById[30] = \"Generic17\"] = 30;\r\n        values[valuesById[31] = \"Generic18\"] = 31;\r\n        values[valuesById[32] = \"Generic19\"] = 32;\r\n        values[valuesById[33] = \"Generic20\"] = 33;\r\n        values[valuesById[34] = \"Generic21\"] = 34;\r\n        values[valuesById[35] = \"Generic22\"] = 35;\r\n        values[valuesById[36] = \"Generic23\"] = 36;\r\n        values[valuesById[37] = \"Generic24\"] = 37;\r\n        values[valuesById[38] = \"Generic25\"] = 38;\r\n        values[valuesById[39] = \"Generic26\"] = 39;\r\n        values[valuesById[40] = \"Generic27\"] = 40;\r\n        values[valuesById[41] = \"Generic28\"] = 41;\r\n        values[valuesById[42] = \"Generic29\"] = 42;\r\n        values[valuesById[43] = \"Generic30\"] = 43;\r\n        values[valuesById[44] = \"Generic31\"] = 44;\r\n        return values;\r\n    })();\r\n    Buttplug.ClientMessage = (function () {\r\n        /**\r\n         * Properties of a ClientMessage.\r\n         * @memberof Buttplug\r\n         * @interface IClientMessage\r\n         * @property {number|null} [id] ClientMessage id\r\n         * @property {Buttplug.ClientMessage.IFFIMessage|null} [message] ClientMessage message\r\n         */\r\n        /**\r\n         * Constructs a new ClientMessage.\r\n         * @memberof Buttplug\r\n         * @classdesc Represents a ClientMessage.\r\n         * @implements IClientMessage\r\n         * @constructor\r\n         * @param {Buttplug.IClientMessage=} [properties] Properties to set\r\n         */\r\n        function ClientMessage(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n        /**\r\n         * ClientMessage id.\r\n         * @member {number} id\r\n         * @memberof Buttplug.ClientMessage\r\n         * @instance\r\n         */\r\n        ClientMessage.prototype.id = 0;\r\n        /**\r\n         * ClientMessage message.\r\n         * @member {Buttplug.ClientMessage.IFFIMessage|null|undefined} message\r\n         * @memberof Buttplug.ClientMessage\r\n         * @instance\r\n         */\r\n        ClientMessage.prototype.message = null;\r\n        /**\r\n         * Creates a new ClientMessage instance using the specified properties.\r\n         * @function create\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {Buttplug.IClientMessage=} [properties] Properties to set\r\n         * @returns {Buttplug.ClientMessage} ClientMessage instance\r\n         */\r\n        ClientMessage.create = function create(properties) {\r\n            return new ClientMessage(properties);\r\n        };\r\n        /**\r\n         * Encodes the specified ClientMessage message. Does not implicitly {@link Buttplug.ClientMessage.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {Buttplug.IClientMessage} message ClientMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ClientMessage.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\r\n                writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.id);\r\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\r\n                $root.Buttplug.ClientMessage.FFIMessage.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\r\n            return writer;\r\n        };\r\n        /**\r\n         * Encodes the specified ClientMessage message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {Buttplug.IClientMessage} message ClientMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ClientMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n        /**\r\n         * Decodes a ClientMessage message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {Buttplug.ClientMessage} ClientMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ClientMessage.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                    case 1:\r\n                        message.id = reader.uint32();\r\n                        break;\r\n                    case 2:\r\n                        message.message = $root.Buttplug.ClientMessage.FFIMessage.decode(reader, reader.uint32());\r\n                        break;\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Decodes a ClientMessage message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {Buttplug.ClientMessage} ClientMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ClientMessage.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n        /**\r\n         * Verifies a ClientMessage message.\r\n         * @function verify\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ClientMessage.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                if (!$util.isInteger(message.id))\r\n                    return \"id: integer expected\";\r\n            if (message.message != null && message.hasOwnProperty(\"message\")) {\r\n                var error = $root.Buttplug.ClientMessage.FFIMessage.verify(message.message);\r\n                if (error)\r\n                    return \"message.\" + error;\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Creates a ClientMessage message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {Buttplug.ClientMessage} ClientMessage\r\n         */\r\n        ClientMessage.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.Buttplug.ClientMessage)\r\n                return object;\r\n            var message = new $root.Buttplug.ClientMessage();\r\n            if (object.id != null)\r\n                message.id = object.id >>> 0;\r\n            if (object.message != null) {\r\n                if (typeof object.message !== \"object\")\r\n                    throw TypeError(\".Buttplug.ClientMessage.message: object expected\");\r\n                message.message = $root.Buttplug.ClientMessage.FFIMessage.fromObject(object.message);\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Creates a plain object from a ClientMessage message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof Buttplug.ClientMessage\r\n         * @static\r\n         * @param {Buttplug.ClientMessage} message ClientMessage\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ClientMessage.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.id = 0;\r\n                object.message = null;\r\n            }\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                object.id = message.id;\r\n            if (message.message != null && message.hasOwnProperty(\"message\"))\r\n                object.message = $root.Buttplug.ClientMessage.FFIMessage.toObject(message.message, options);\r\n            return object;\r\n        };\r\n        /**\r\n         * Converts this ClientMessage to JSON.\r\n         * @function toJSON\r\n         * @memberof Buttplug.ClientMessage\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ClientMessage.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n        /**\r\n         * DeviceCommunicationManagerTypes enum.\r\n         * @name Buttplug.ClientMessage.DeviceCommunicationManagerTypes\r\n         * @enum {number}\r\n         * @property {number} All=0 All value\r\n         * @property {number} Btleplug=1 Btleplug value\r\n         * @property {number} XInput=2 XInput value\r\n         * @property {number} SerialPort=4 SerialPort value\r\n         * @property {number} LovenseHIDDongle=8 LovenseHIDDongle value\r\n         * @property {number} LovenseSerialDongle=16 LovenseSerialDongle value\r\n         */\r\n        ClientMessage.DeviceCommunicationManagerTypes = (function () {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"All\"] = 0;\r\n            values[valuesById[1] = \"Btleplug\"] = 1;\r\n            values[valuesById[2] = \"XInput\"] = 2;\r\n            values[valuesById[4] = \"SerialPort\"] = 4;\r\n            values[valuesById[8] = \"LovenseHIDDongle\"] = 8;\r\n            values[valuesById[16] = \"LovenseSerialDongle\"] = 16;\r\n            return values;\r\n        })();\r\n        ClientMessage.ConnectLocal = (function () {\r\n            /**\r\n             * Properties of a ConnectLocal.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IConnectLocal\r\n             * @property {string|null} [serverName] ConnectLocal serverName\r\n             * @property {number|null} [maxPingTime] ConnectLocal maxPingTime\r\n             * @property {boolean|null} [allowRawMessages] ConnectLocal allowRawMessages\r\n             * @property {string|null} [deviceConfigurationJson] ConnectLocal deviceConfigurationJson\r\n             * @property {string|null} [userDeviceConfigurationJson] ConnectLocal userDeviceConfigurationJson\r\n             * @property {number|null} [commManagerTypes] ConnectLocal commManagerTypes\r\n             */\r\n            /**\r\n             * Constructs a new ConnectLocal.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a ConnectLocal.\r\n             * @implements IConnectLocal\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IConnectLocal=} [properties] Properties to set\r\n             */\r\n            function ConnectLocal(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * ConnectLocal serverName.\r\n             * @member {string} serverName\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @instance\r\n             */\r\n            ConnectLocal.prototype.serverName = \"\";\r\n            /**\r\n             * ConnectLocal maxPingTime.\r\n             * @member {number} maxPingTime\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @instance\r\n             */\r\n            ConnectLocal.prototype.maxPingTime = 0;\r\n            /**\r\n             * ConnectLocal allowRawMessages.\r\n             * @member {boolean} allowRawMessages\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @instance\r\n             */\r\n            ConnectLocal.prototype.allowRawMessages = false;\r\n            /**\r\n             * ConnectLocal deviceConfigurationJson.\r\n             * @member {string} deviceConfigurationJson\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @instance\r\n             */\r\n            ConnectLocal.prototype.deviceConfigurationJson = \"\";\r\n            /**\r\n             * ConnectLocal userDeviceConfigurationJson.\r\n             * @member {string} userDeviceConfigurationJson\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @instance\r\n             */\r\n            ConnectLocal.prototype.userDeviceConfigurationJson = \"\";\r\n            /**\r\n             * ConnectLocal commManagerTypes.\r\n             * @member {number} commManagerTypes\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @instance\r\n             */\r\n            ConnectLocal.prototype.commManagerTypes = 0;\r\n            /**\r\n             * Creates a new ConnectLocal instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IConnectLocal=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal instance\r\n             */\r\n            ConnectLocal.create = function create(properties) {\r\n                return new ConnectLocal(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified ConnectLocal message. Does not implicitly {@link Buttplug.ClientMessage.ConnectLocal.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IConnectLocal} message ConnectLocal message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            ConnectLocal.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.serverName != null && Object.hasOwnProperty.call(message, \"serverName\"))\r\n                    writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.serverName);\r\n                if (message.maxPingTime != null && Object.hasOwnProperty.call(message, \"maxPingTime\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/ 16).uint32(message.maxPingTime);\r\n                if (message.allowRawMessages != null && Object.hasOwnProperty.call(message, \"allowRawMessages\"))\r\n                    writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.allowRawMessages);\r\n                if (message.deviceConfigurationJson != null && Object.hasOwnProperty.call(message, \"deviceConfigurationJson\"))\r\n                    writer.uint32(/* id 4, wireType 2 =*/ 34).string(message.deviceConfigurationJson);\r\n                if (message.userDeviceConfigurationJson != null && Object.hasOwnProperty.call(message, \"userDeviceConfigurationJson\"))\r\n                    writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.userDeviceConfigurationJson);\r\n                if (message.commManagerTypes != null && Object.hasOwnProperty.call(message, \"commManagerTypes\"))\r\n                    writer.uint32(/* id 6, wireType 0 =*/ 48).uint32(message.commManagerTypes);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified ConnectLocal message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.ConnectLocal.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IConnectLocal} message ConnectLocal message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            ConnectLocal.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a ConnectLocal message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            ConnectLocal.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.ConnectLocal();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.serverName = reader.string();\r\n                            break;\r\n                        case 2:\r\n                            message.maxPingTime = reader.uint32();\r\n                            break;\r\n                        case 3:\r\n                            message.allowRawMessages = reader.bool();\r\n                            break;\r\n                        case 4:\r\n                            message.deviceConfigurationJson = reader.string();\r\n                            break;\r\n                        case 5:\r\n                            message.userDeviceConfigurationJson = reader.string();\r\n                            break;\r\n                        case 6:\r\n                            message.commManagerTypes = reader.uint32();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a ConnectLocal message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            ConnectLocal.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a ConnectLocal message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            ConnectLocal.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.serverName != null && message.hasOwnProperty(\"serverName\"))\r\n                    if (!$util.isString(message.serverName))\r\n                        return \"serverName: string expected\";\r\n                if (message.maxPingTime != null && message.hasOwnProperty(\"maxPingTime\"))\r\n                    if (!$util.isInteger(message.maxPingTime))\r\n                        return \"maxPingTime: integer expected\";\r\n                if (message.allowRawMessages != null && message.hasOwnProperty(\"allowRawMessages\"))\r\n                    if (typeof message.allowRawMessages !== \"boolean\")\r\n                        return \"allowRawMessages: boolean expected\";\r\n                if (message.deviceConfigurationJson != null && message.hasOwnProperty(\"deviceConfigurationJson\"))\r\n                    if (!$util.isString(message.deviceConfigurationJson))\r\n                        return \"deviceConfigurationJson: string expected\";\r\n                if (message.userDeviceConfigurationJson != null && message.hasOwnProperty(\"userDeviceConfigurationJson\"))\r\n                    if (!$util.isString(message.userDeviceConfigurationJson))\r\n                        return \"userDeviceConfigurationJson: string expected\";\r\n                if (message.commManagerTypes != null && message.hasOwnProperty(\"commManagerTypes\"))\r\n                    if (!$util.isInteger(message.commManagerTypes))\r\n                        return \"commManagerTypes: integer expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a ConnectLocal message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal\r\n             */\r\n            ConnectLocal.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.ConnectLocal)\r\n                    return object;\r\n                var message = new $root.Buttplug.ClientMessage.ConnectLocal();\r\n                if (object.serverName != null)\r\n                    message.serverName = String(object.serverName);\r\n                if (object.maxPingTime != null)\r\n                    message.maxPingTime = object.maxPingTime >>> 0;\r\n                if (object.allowRawMessages != null)\r\n                    message.allowRawMessages = Boolean(object.allowRawMessages);\r\n                if (object.deviceConfigurationJson != null)\r\n                    message.deviceConfigurationJson = String(object.deviceConfigurationJson);\r\n                if (object.userDeviceConfigurationJson != null)\r\n                    message.userDeviceConfigurationJson = String(object.userDeviceConfigurationJson);\r\n                if (object.commManagerTypes != null)\r\n                    message.commManagerTypes = object.commManagerTypes >>> 0;\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a ConnectLocal message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.ConnectLocal} message ConnectLocal\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            ConnectLocal.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.serverName = \"\";\r\n                    object.maxPingTime = 0;\r\n                    object.allowRawMessages = false;\r\n                    object.deviceConfigurationJson = \"\";\r\n                    object.userDeviceConfigurationJson = \"\";\r\n                    object.commManagerTypes = 0;\r\n                }\r\n                if (message.serverName != null && message.hasOwnProperty(\"serverName\"))\r\n                    object.serverName = message.serverName;\r\n                if (message.maxPingTime != null && message.hasOwnProperty(\"maxPingTime\"))\r\n                    object.maxPingTime = message.maxPingTime;\r\n                if (message.allowRawMessages != null && message.hasOwnProperty(\"allowRawMessages\"))\r\n                    object.allowRawMessages = message.allowRawMessages;\r\n                if (message.deviceConfigurationJson != null && message.hasOwnProperty(\"deviceConfigurationJson\"))\r\n                    object.deviceConfigurationJson = message.deviceConfigurationJson;\r\n                if (message.userDeviceConfigurationJson != null && message.hasOwnProperty(\"userDeviceConfigurationJson\"))\r\n                    object.userDeviceConfigurationJson = message.userDeviceConfigurationJson;\r\n                if (message.commManagerTypes != null && message.hasOwnProperty(\"commManagerTypes\"))\r\n                    object.commManagerTypes = message.commManagerTypes;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this ConnectLocal to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.ConnectLocal\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            ConnectLocal.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return ConnectLocal;\r\n        })();\r\n        ClientMessage.ConnectWebsocket = (function () {\r\n            /**\r\n             * Properties of a ConnectWebsocket.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IConnectWebsocket\r\n             * @property {string|null} [address] ConnectWebsocket address\r\n             * @property {boolean|null} [bypassCertVerification] ConnectWebsocket bypassCertVerification\r\n             */\r\n            /**\r\n             * Constructs a new ConnectWebsocket.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a ConnectWebsocket.\r\n             * @implements IConnectWebsocket\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IConnectWebsocket=} [properties] Properties to set\r\n             */\r\n            function ConnectWebsocket(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * ConnectWebsocket address.\r\n             * @member {string} address\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @instance\r\n             */\r\n            ConnectWebsocket.prototype.address = \"\";\r\n            /**\r\n             * ConnectWebsocket bypassCertVerification.\r\n             * @member {boolean} bypassCertVerification\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @instance\r\n             */\r\n            ConnectWebsocket.prototype.bypassCertVerification = false;\r\n            /**\r\n             * Creates a new ConnectWebsocket instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IConnectWebsocket=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket instance\r\n             */\r\n            ConnectWebsocket.create = function create(properties) {\r\n                return new ConnectWebsocket(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified ConnectWebsocket message. Does not implicitly {@link Buttplug.ClientMessage.ConnectWebsocket.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IConnectWebsocket} message ConnectWebsocket message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            ConnectWebsocket.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.address != null && Object.hasOwnProperty.call(message, \"address\"))\r\n                    writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.address);\r\n                if (message.bypassCertVerification != null && Object.hasOwnProperty.call(message, \"bypassCertVerification\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/ 16).bool(message.bypassCertVerification);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified ConnectWebsocket message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.ConnectWebsocket.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IConnectWebsocket} message ConnectWebsocket message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            ConnectWebsocket.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a ConnectWebsocket message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            ConnectWebsocket.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.ConnectWebsocket();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.address = reader.string();\r\n                            break;\r\n                        case 2:\r\n                            message.bypassCertVerification = reader.bool();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a ConnectWebsocket message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            ConnectWebsocket.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a ConnectWebsocket message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            ConnectWebsocket.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.address != null && message.hasOwnProperty(\"address\"))\r\n                    if (!$util.isString(message.address))\r\n                        return \"address: string expected\";\r\n                if (message.bypassCertVerification != null && message.hasOwnProperty(\"bypassCertVerification\"))\r\n                    if (typeof message.bypassCertVerification !== \"boolean\")\r\n                        return \"bypassCertVerification: boolean expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a ConnectWebsocket message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket\r\n             */\r\n            ConnectWebsocket.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.ConnectWebsocket)\r\n                    return object;\r\n                var message = new $root.Buttplug.ClientMessage.ConnectWebsocket();\r\n                if (object.address != null)\r\n                    message.address = String(object.address);\r\n                if (object.bypassCertVerification != null)\r\n                    message.bypassCertVerification = Boolean(object.bypassCertVerification);\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a ConnectWebsocket message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.ConnectWebsocket} message ConnectWebsocket\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            ConnectWebsocket.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.address = \"\";\r\n                    object.bypassCertVerification = false;\r\n                }\r\n                if (message.address != null && message.hasOwnProperty(\"address\"))\r\n                    object.address = message.address;\r\n                if (message.bypassCertVerification != null && message.hasOwnProperty(\"bypassCertVerification\"))\r\n                    object.bypassCertVerification = message.bypassCertVerification;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this ConnectWebsocket to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.ConnectWebsocket\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            ConnectWebsocket.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return ConnectWebsocket;\r\n        })();\r\n        ClientMessage.StartScanning = (function () {\r\n            /**\r\n             * Properties of a StartScanning.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IStartScanning\r\n             */\r\n            /**\r\n             * Constructs a new StartScanning.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a StartScanning.\r\n             * @implements IStartScanning\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IStartScanning=} [properties] Properties to set\r\n             */\r\n            function StartScanning(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new StartScanning instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStartScanning=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning instance\r\n             */\r\n            StartScanning.create = function create(properties) {\r\n                return new StartScanning(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified StartScanning message. Does not implicitly {@link Buttplug.ClientMessage.StartScanning.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStartScanning} message StartScanning message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StartScanning.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified StartScanning message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.StartScanning.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStartScanning} message StartScanning message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StartScanning.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a StartScanning message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StartScanning.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.StartScanning();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a StartScanning message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StartScanning.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a StartScanning message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            StartScanning.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a StartScanning message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning\r\n             */\r\n            StartScanning.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.StartScanning)\r\n                    return object;\r\n                return new $root.Buttplug.ClientMessage.StartScanning();\r\n            };\r\n            /**\r\n             * Creates a plain object from a StartScanning message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.StartScanning} message StartScanning\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            StartScanning.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this StartScanning to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.StartScanning\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            StartScanning.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return StartScanning;\r\n        })();\r\n        ClientMessage.StopScanning = (function () {\r\n            /**\r\n             * Properties of a StopScanning.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IStopScanning\r\n             */\r\n            /**\r\n             * Constructs a new StopScanning.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a StopScanning.\r\n             * @implements IStopScanning\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IStopScanning=} [properties] Properties to set\r\n             */\r\n            function StopScanning(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new StopScanning instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStopScanning=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning instance\r\n             */\r\n            StopScanning.create = function create(properties) {\r\n                return new StopScanning(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified StopScanning message. Does not implicitly {@link Buttplug.ClientMessage.StopScanning.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStopScanning} message StopScanning message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StopScanning.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified StopScanning message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.StopScanning.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStopScanning} message StopScanning message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StopScanning.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a StopScanning message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StopScanning.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.StopScanning();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a StopScanning message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StopScanning.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a StopScanning message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            StopScanning.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a StopScanning message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning\r\n             */\r\n            StopScanning.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.StopScanning)\r\n                    return object;\r\n                return new $root.Buttplug.ClientMessage.StopScanning();\r\n            };\r\n            /**\r\n             * Creates a plain object from a StopScanning message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.StopScanning} message StopScanning\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            StopScanning.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this StopScanning to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.StopScanning\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            StopScanning.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return StopScanning;\r\n        })();\r\n        ClientMessage.StopAllDevices = (function () {\r\n            /**\r\n             * Properties of a StopAllDevices.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IStopAllDevices\r\n             */\r\n            /**\r\n             * Constructs a new StopAllDevices.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a StopAllDevices.\r\n             * @implements IStopAllDevices\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IStopAllDevices=} [properties] Properties to set\r\n             */\r\n            function StopAllDevices(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new StopAllDevices instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStopAllDevices=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices instance\r\n             */\r\n            StopAllDevices.create = function create(properties) {\r\n                return new StopAllDevices(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified StopAllDevices message. Does not implicitly {@link Buttplug.ClientMessage.StopAllDevices.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStopAllDevices} message StopAllDevices message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StopAllDevices.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified StopAllDevices message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.StopAllDevices.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IStopAllDevices} message StopAllDevices message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StopAllDevices.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a StopAllDevices message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StopAllDevices.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.StopAllDevices();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a StopAllDevices message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StopAllDevices.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a StopAllDevices message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            StopAllDevices.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a StopAllDevices message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices\r\n             */\r\n            StopAllDevices.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.StopAllDevices)\r\n                    return object;\r\n                return new $root.Buttplug.ClientMessage.StopAllDevices();\r\n            };\r\n            /**\r\n             * Creates a plain object from a StopAllDevices message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.StopAllDevices} message StopAllDevices\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            StopAllDevices.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this StopAllDevices to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.StopAllDevices\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            StopAllDevices.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return StopAllDevices;\r\n        })();\r\n        ClientMessage.Disconnect = (function () {\r\n            /**\r\n             * Properties of a Disconnect.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IDisconnect\r\n             */\r\n            /**\r\n             * Constructs a new Disconnect.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a Disconnect.\r\n             * @implements IDisconnect\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IDisconnect=} [properties] Properties to set\r\n             */\r\n            function Disconnect(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new Disconnect instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IDisconnect=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect instance\r\n             */\r\n            Disconnect.create = function create(properties) {\r\n                return new Disconnect(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified Disconnect message. Does not implicitly {@link Buttplug.ClientMessage.Disconnect.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IDisconnect} message Disconnect message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Disconnect.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.Disconnect.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IDisconnect} message Disconnect message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Disconnect.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a Disconnect message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Disconnect.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.Disconnect();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a Disconnect message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Disconnect.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a Disconnect message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Disconnect.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect\r\n             */\r\n            Disconnect.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.Disconnect)\r\n                    return object;\r\n                return new $root.Buttplug.ClientMessage.Disconnect();\r\n            };\r\n            /**\r\n             * Creates a plain object from a Disconnect message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.Disconnect} message Disconnect\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Disconnect.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this Disconnect to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.Disconnect\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Disconnect.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return Disconnect;\r\n        })();\r\n        ClientMessage.Ping = (function () {\r\n            /**\r\n             * Properties of a Ping.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IPing\r\n             */\r\n            /**\r\n             * Constructs a new Ping.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a Ping.\r\n             * @implements IPing\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IPing=} [properties] Properties to set\r\n             */\r\n            function Ping(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new Ping instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IPing=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.Ping} Ping instance\r\n             */\r\n            Ping.create = function create(properties) {\r\n                return new Ping(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified Ping message. Does not implicitly {@link Buttplug.ClientMessage.Ping.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IPing} message Ping message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Ping.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified Ping message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.Ping.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IPing} message Ping message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Ping.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a Ping message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.Ping} Ping\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Ping.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.Ping();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a Ping message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.Ping} Ping\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Ping.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a Ping message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Ping.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a Ping message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.Ping} Ping\r\n             */\r\n            Ping.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.Ping)\r\n                    return object;\r\n                return new $root.Buttplug.ClientMessage.Ping();\r\n            };\r\n            /**\r\n             * Creates a plain object from a Ping message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.Ping} message Ping\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Ping.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this Ping to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.Ping\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Ping.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return Ping;\r\n        })();\r\n        ClientMessage.FFIMessage = (function () {\r\n            /**\r\n             * Properties of a FFIMessage.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @interface IFFIMessage\r\n             * @property {Buttplug.ClientMessage.IConnectLocal|null} [connectLocal] FFIMessage connectLocal\r\n             * @property {Buttplug.ClientMessage.IConnectWebsocket|null} [connectWebsocket] FFIMessage connectWebsocket\r\n             * @property {Buttplug.ClientMessage.IStartScanning|null} [startScanning] FFIMessage startScanning\r\n             * @property {Buttplug.ClientMessage.IStopScanning|null} [stopScanning] FFIMessage stopScanning\r\n             * @property {Buttplug.ClientMessage.IStopAllDevices|null} [stopAllDevices] FFIMessage stopAllDevices\r\n             * @property {Buttplug.ClientMessage.IDisconnect|null} [disconnect] FFIMessage disconnect\r\n             * @property {Buttplug.ClientMessage.IPing|null} [ping] FFIMessage ping\r\n             */\r\n            /**\r\n             * Constructs a new FFIMessage.\r\n             * @memberof Buttplug.ClientMessage\r\n             * @classdesc Represents a FFIMessage.\r\n             * @implements IFFIMessage\r\n             * @constructor\r\n             * @param {Buttplug.ClientMessage.IFFIMessage=} [properties] Properties to set\r\n             */\r\n            function FFIMessage(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * FFIMessage connectLocal.\r\n             * @member {Buttplug.ClientMessage.IConnectLocal|null|undefined} connectLocal\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.connectLocal = null;\r\n            /**\r\n             * FFIMessage connectWebsocket.\r\n             * @member {Buttplug.ClientMessage.IConnectWebsocket|null|undefined} connectWebsocket\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.connectWebsocket = null;\r\n            /**\r\n             * FFIMessage startScanning.\r\n             * @member {Buttplug.ClientMessage.IStartScanning|null|undefined} startScanning\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.startScanning = null;\r\n            /**\r\n             * FFIMessage stopScanning.\r\n             * @member {Buttplug.ClientMessage.IStopScanning|null|undefined} stopScanning\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.stopScanning = null;\r\n            /**\r\n             * FFIMessage stopAllDevices.\r\n             * @member {Buttplug.ClientMessage.IStopAllDevices|null|undefined} stopAllDevices\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.stopAllDevices = null;\r\n            /**\r\n             * FFIMessage disconnect.\r\n             * @member {Buttplug.ClientMessage.IDisconnect|null|undefined} disconnect\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.disconnect = null;\r\n            /**\r\n             * FFIMessage ping.\r\n             * @member {Buttplug.ClientMessage.IPing|null|undefined} ping\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.ping = null;\r\n            // OneOf field names bound to virtual getters and setters\r\n            var $oneOfFields;\r\n            /**\r\n             * FFIMessage msg.\r\n             * @member {\"connectLocal\"|\"connectWebsocket\"|\"startScanning\"|\"stopScanning\"|\"stopAllDevices\"|\"disconnect\"|\"ping\"|undefined} msg\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            Object.defineProperty(FFIMessage.prototype, \"msg\", {\r\n                get: $util.oneOfGetter($oneOfFields = [\"connectLocal\", \"connectWebsocket\", \"startScanning\", \"stopScanning\", \"stopAllDevices\", \"disconnect\", \"ping\"]),\r\n                set: $util.oneOfSetter($oneOfFields)\r\n            });\r\n            /**\r\n             * Creates a new FFIMessage instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IFFIMessage=} [properties] Properties to set\r\n             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage instance\r\n             */\r\n            FFIMessage.create = function create(properties) {\r\n                return new FFIMessage(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified FFIMessage message. Does not implicitly {@link Buttplug.ClientMessage.FFIMessage.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IFFIMessage} message FFIMessage message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            FFIMessage.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.connectLocal != null && Object.hasOwnProperty.call(message, \"connectLocal\"))\r\n                    $root.Buttplug.ClientMessage.ConnectLocal.encode(message.connectLocal, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n                if (message.connectWebsocket != null && Object.hasOwnProperty.call(message, \"connectWebsocket\"))\r\n                    $root.Buttplug.ClientMessage.ConnectWebsocket.encode(message.connectWebsocket, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\r\n                if (message.startScanning != null && Object.hasOwnProperty.call(message, \"startScanning\"))\r\n                    $root.Buttplug.ClientMessage.StartScanning.encode(message.startScanning, writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\r\n                if (message.stopScanning != null && Object.hasOwnProperty.call(message, \"stopScanning\"))\r\n                    $root.Buttplug.ClientMessage.StopScanning.encode(message.stopScanning, writer.uint32(/* id 4, wireType 2 =*/ 34).fork()).ldelim();\r\n                if (message.stopAllDevices != null && Object.hasOwnProperty.call(message, \"stopAllDevices\"))\r\n                    $root.Buttplug.ClientMessage.StopAllDevices.encode(message.stopAllDevices, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\r\n                if (message.disconnect != null && Object.hasOwnProperty.call(message, \"disconnect\"))\r\n                    $root.Buttplug.ClientMessage.Disconnect.encode(message.disconnect, writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\r\n                if (message.ping != null && Object.hasOwnProperty.call(message, \"ping\"))\r\n                    $root.Buttplug.ClientMessage.Ping.encode(message.ping, writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified FFIMessage message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.FFIMessage.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.IFFIMessage} message FFIMessage message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            FFIMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a FFIMessage message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            FFIMessage.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.FFIMessage();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.connectLocal = $root.Buttplug.ClientMessage.ConnectLocal.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 2:\r\n                            message.connectWebsocket = $root.Buttplug.ClientMessage.ConnectWebsocket.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 3:\r\n                            message.startScanning = $root.Buttplug.ClientMessage.StartScanning.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 4:\r\n                            message.stopScanning = $root.Buttplug.ClientMessage.StopScanning.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 5:\r\n                            message.stopAllDevices = $root.Buttplug.ClientMessage.StopAllDevices.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 6:\r\n                            message.disconnect = $root.Buttplug.ClientMessage.Disconnect.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 7:\r\n                            message.ping = $root.Buttplug.ClientMessage.Ping.decode(reader, reader.uint32());\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a FFIMessage message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            FFIMessage.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a FFIMessage message.\r\n             * @function verify\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            FFIMessage.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                var properties = {};\r\n                if (message.connectLocal != null && message.hasOwnProperty(\"connectLocal\")) {\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ClientMessage.ConnectLocal.verify(message.connectLocal);\r\n                        if (error)\r\n                            return \"connectLocal.\" + error;\r\n                    }\r\n                }\r\n                if (message.connectWebsocket != null && message.hasOwnProperty(\"connectWebsocket\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ClientMessage.ConnectWebsocket.verify(message.connectWebsocket);\r\n                        if (error)\r\n                            return \"connectWebsocket.\" + error;\r\n                    }\r\n                }\r\n                if (message.startScanning != null && message.hasOwnProperty(\"startScanning\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ClientMessage.StartScanning.verify(message.startScanning);\r\n                        if (error)\r\n                            return \"startScanning.\" + error;\r\n                    }\r\n                }\r\n                if (message.stopScanning != null && message.hasOwnProperty(\"stopScanning\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ClientMessage.StopScanning.verify(message.stopScanning);\r\n                        if (error)\r\n                            return \"stopScanning.\" + error;\r\n                    }\r\n                }\r\n                if (message.stopAllDevices != null && message.hasOwnProperty(\"stopAllDevices\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ClientMessage.StopAllDevices.verify(message.stopAllDevices);\r\n                        if (error)\r\n                            return \"stopAllDevices.\" + error;\r\n                    }\r\n                }\r\n                if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ClientMessage.Disconnect.verify(message.disconnect);\r\n                        if (error)\r\n                            return \"disconnect.\" + error;\r\n                    }\r\n                }\r\n                if (message.ping != null && message.hasOwnProperty(\"ping\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ClientMessage.Ping.verify(message.ping);\r\n                        if (error)\r\n                            return \"ping.\" + error;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a FFIMessage message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage\r\n             */\r\n            FFIMessage.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ClientMessage.FFIMessage)\r\n                    return object;\r\n                var message = new $root.Buttplug.ClientMessage.FFIMessage();\r\n                if (object.connectLocal != null) {\r\n                    if (typeof object.connectLocal !== \"object\")\r\n                        throw TypeError(\".Buttplug.ClientMessage.FFIMessage.connectLocal: object expected\");\r\n                    message.connectLocal = $root.Buttplug.ClientMessage.ConnectLocal.fromObject(object.connectLocal);\r\n                }\r\n                if (object.connectWebsocket != null) {\r\n                    if (typeof object.connectWebsocket !== \"object\")\r\n                        throw TypeError(\".Buttplug.ClientMessage.FFIMessage.connectWebsocket: object expected\");\r\n                    message.connectWebsocket = $root.Buttplug.ClientMessage.ConnectWebsocket.fromObject(object.connectWebsocket);\r\n                }\r\n                if (object.startScanning != null) {\r\n                    if (typeof object.startScanning !== \"object\")\r\n                        throw TypeError(\".Buttplug.ClientMessage.FFIMessage.startScanning: object expected\");\r\n                    message.startScanning = $root.Buttplug.ClientMessage.StartScanning.fromObject(object.startScanning);\r\n                }\r\n                if (object.stopScanning != null) {\r\n                    if (typeof object.stopScanning !== \"object\")\r\n                        throw TypeError(\".Buttplug.ClientMessage.FFIMessage.stopScanning: object expected\");\r\n                    message.stopScanning = $root.Buttplug.ClientMessage.StopScanning.fromObject(object.stopScanning);\r\n                }\r\n                if (object.stopAllDevices != null) {\r\n                    if (typeof object.stopAllDevices !== \"object\")\r\n                        throw TypeError(\".Buttplug.ClientMessage.FFIMessage.stopAllDevices: object expected\");\r\n                    message.stopAllDevices = $root.Buttplug.ClientMessage.StopAllDevices.fromObject(object.stopAllDevices);\r\n                }\r\n                if (object.disconnect != null) {\r\n                    if (typeof object.disconnect !== \"object\")\r\n                        throw TypeError(\".Buttplug.ClientMessage.FFIMessage.disconnect: object expected\");\r\n                    message.disconnect = $root.Buttplug.ClientMessage.Disconnect.fromObject(object.disconnect);\r\n                }\r\n                if (object.ping != null) {\r\n                    if (typeof object.ping !== \"object\")\r\n                        throw TypeError(\".Buttplug.ClientMessage.FFIMessage.ping: object expected\");\r\n                    message.ping = $root.Buttplug.ClientMessage.Ping.fromObject(object.ping);\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a FFIMessage message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ClientMessage.FFIMessage} message FFIMessage\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            FFIMessage.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (message.connectLocal != null && message.hasOwnProperty(\"connectLocal\")) {\r\n                    object.connectLocal = $root.Buttplug.ClientMessage.ConnectLocal.toObject(message.connectLocal, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"connectLocal\";\r\n                }\r\n                if (message.connectWebsocket != null && message.hasOwnProperty(\"connectWebsocket\")) {\r\n                    object.connectWebsocket = $root.Buttplug.ClientMessage.ConnectWebsocket.toObject(message.connectWebsocket, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"connectWebsocket\";\r\n                }\r\n                if (message.startScanning != null && message.hasOwnProperty(\"startScanning\")) {\r\n                    object.startScanning = $root.Buttplug.ClientMessage.StartScanning.toObject(message.startScanning, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"startScanning\";\r\n                }\r\n                if (message.stopScanning != null && message.hasOwnProperty(\"stopScanning\")) {\r\n                    object.stopScanning = $root.Buttplug.ClientMessage.StopScanning.toObject(message.stopScanning, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"stopScanning\";\r\n                }\r\n                if (message.stopAllDevices != null && message.hasOwnProperty(\"stopAllDevices\")) {\r\n                    object.stopAllDevices = $root.Buttplug.ClientMessage.StopAllDevices.toObject(message.stopAllDevices, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"stopAllDevices\";\r\n                }\r\n                if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\r\n                    object.disconnect = $root.Buttplug.ClientMessage.Disconnect.toObject(message.disconnect, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"disconnect\";\r\n                }\r\n                if (message.ping != null && message.hasOwnProperty(\"ping\")) {\r\n                    object.ping = $root.Buttplug.ClientMessage.Ping.toObject(message.ping, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"ping\";\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this FFIMessage to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ClientMessage.FFIMessage\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            FFIMessage.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return FFIMessage;\r\n        })();\r\n        return ClientMessage;\r\n    })();\r\n    Buttplug.DeviceMessage = (function () {\r\n        /**\r\n         * Properties of a DeviceMessage.\r\n         * @memberof Buttplug\r\n         * @interface IDeviceMessage\r\n         * @property {number|null} [id] DeviceMessage id\r\n         * @property {number|null} [index] DeviceMessage index\r\n         * @property {Buttplug.DeviceMessage.IFFIMessage|null} [message] DeviceMessage message\r\n         */\r\n        /**\r\n         * Constructs a new DeviceMessage.\r\n         * @memberof Buttplug\r\n         * @classdesc Represents a DeviceMessage.\r\n         * @implements IDeviceMessage\r\n         * @constructor\r\n         * @param {Buttplug.IDeviceMessage=} [properties] Properties to set\r\n         */\r\n        function DeviceMessage(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n        /**\r\n         * DeviceMessage id.\r\n         * @member {number} id\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @instance\r\n         */\r\n        DeviceMessage.prototype.id = 0;\r\n        /**\r\n         * DeviceMessage index.\r\n         * @member {number} index\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @instance\r\n         */\r\n        DeviceMessage.prototype.index = 0;\r\n        /**\r\n         * DeviceMessage message.\r\n         * @member {Buttplug.DeviceMessage.IFFIMessage|null|undefined} message\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @instance\r\n         */\r\n        DeviceMessage.prototype.message = null;\r\n        /**\r\n         * Creates a new DeviceMessage instance using the specified properties.\r\n         * @function create\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {Buttplug.IDeviceMessage=} [properties] Properties to set\r\n         * @returns {Buttplug.DeviceMessage} DeviceMessage instance\r\n         */\r\n        DeviceMessage.create = function create(properties) {\r\n            return new DeviceMessage(properties);\r\n        };\r\n        /**\r\n         * Encodes the specified DeviceMessage message. Does not implicitly {@link Buttplug.DeviceMessage.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {Buttplug.IDeviceMessage} message DeviceMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        DeviceMessage.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\r\n                writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.id);\r\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                writer.uint32(/* id 2, wireType 0 =*/ 16).uint32(message.index);\r\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\r\n                $root.Buttplug.DeviceMessage.FFIMessage.encode(message.message, writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\r\n            return writer;\r\n        };\r\n        /**\r\n         * Encodes the specified DeviceMessage message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {Buttplug.IDeviceMessage} message DeviceMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        DeviceMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n        /**\r\n         * Decodes a DeviceMessage message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {Buttplug.DeviceMessage} DeviceMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        DeviceMessage.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                    case 1:\r\n                        message.id = reader.uint32();\r\n                        break;\r\n                    case 2:\r\n                        message.index = reader.uint32();\r\n                        break;\r\n                    case 3:\r\n                        message.message = $root.Buttplug.DeviceMessage.FFIMessage.decode(reader, reader.uint32());\r\n                        break;\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Decodes a DeviceMessage message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {Buttplug.DeviceMessage} DeviceMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        DeviceMessage.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n        /**\r\n         * Verifies a DeviceMessage message.\r\n         * @function verify\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        DeviceMessage.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                if (!$util.isInteger(message.id))\r\n                    return \"id: integer expected\";\r\n            if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                if (!$util.isInteger(message.index))\r\n                    return \"index: integer expected\";\r\n            if (message.message != null && message.hasOwnProperty(\"message\")) {\r\n                var error = $root.Buttplug.DeviceMessage.FFIMessage.verify(message.message);\r\n                if (error)\r\n                    return \"message.\" + error;\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Creates a DeviceMessage message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {Buttplug.DeviceMessage} DeviceMessage\r\n         */\r\n        DeviceMessage.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.Buttplug.DeviceMessage)\r\n                return object;\r\n            var message = new $root.Buttplug.DeviceMessage();\r\n            if (object.id != null)\r\n                message.id = object.id >>> 0;\r\n            if (object.index != null)\r\n                message.index = object.index >>> 0;\r\n            if (object.message != null) {\r\n                if (typeof object.message !== \"object\")\r\n                    throw TypeError(\".Buttplug.DeviceMessage.message: object expected\");\r\n                message.message = $root.Buttplug.DeviceMessage.FFIMessage.fromObject(object.message);\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Creates a plain object from a DeviceMessage message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @static\r\n         * @param {Buttplug.DeviceMessage} message DeviceMessage\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        DeviceMessage.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.id = 0;\r\n                object.index = 0;\r\n                object.message = null;\r\n            }\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                object.id = message.id;\r\n            if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                object.index = message.index;\r\n            if (message.message != null && message.hasOwnProperty(\"message\"))\r\n                object.message = $root.Buttplug.DeviceMessage.FFIMessage.toObject(message.message, options);\r\n            return object;\r\n        };\r\n        /**\r\n         * Converts this DeviceMessage to JSON.\r\n         * @function toJSON\r\n         * @memberof Buttplug.DeviceMessage\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        DeviceMessage.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n        DeviceMessage.VibrateComponent = (function () {\r\n            /**\r\n             * Properties of a VibrateComponent.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IVibrateComponent\r\n             * @property {number|null} [index] VibrateComponent index\r\n             * @property {number|null} [speed] VibrateComponent speed\r\n             */\r\n            /**\r\n             * Constructs a new VibrateComponent.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a VibrateComponent.\r\n             * @implements IVibrateComponent\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IVibrateComponent=} [properties] Properties to set\r\n             */\r\n            function VibrateComponent(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * VibrateComponent index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @instance\r\n             */\r\n            VibrateComponent.prototype.index = 0;\r\n            /**\r\n             * VibrateComponent speed.\r\n             * @member {number} speed\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @instance\r\n             */\r\n            VibrateComponent.prototype.speed = 0;\r\n            /**\r\n             * Creates a new VibrateComponent instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IVibrateComponent=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent instance\r\n             */\r\n            VibrateComponent.create = function create(properties) {\r\n                return new VibrateComponent(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified VibrateComponent message. Does not implicitly {@link Buttplug.DeviceMessage.VibrateComponent.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IVibrateComponent} message VibrateComponent message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            VibrateComponent.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                if (message.speed != null && Object.hasOwnProperty.call(message, \"speed\"))\r\n                    writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.speed);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified VibrateComponent message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.VibrateComponent.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IVibrateComponent} message VibrateComponent message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            VibrateComponent.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a VibrateComponent message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            VibrateComponent.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.VibrateComponent();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        case 2:\r\n                            message.speed = reader.double();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a VibrateComponent message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            VibrateComponent.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a VibrateComponent message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            VibrateComponent.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                if (message.speed != null && message.hasOwnProperty(\"speed\"))\r\n                    if (typeof message.speed !== \"number\")\r\n                        return \"speed: number expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a VibrateComponent message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent\r\n             */\r\n            VibrateComponent.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.VibrateComponent)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.VibrateComponent();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                if (object.speed != null)\r\n                    message.speed = Number(object.speed);\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a VibrateComponent message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.VibrateComponent} message VibrateComponent\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            VibrateComponent.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.index = 0;\r\n                    object.speed = 0;\r\n                }\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                if (message.speed != null && message.hasOwnProperty(\"speed\"))\r\n                    object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this VibrateComponent to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.VibrateComponent\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            VibrateComponent.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return VibrateComponent;\r\n        })();\r\n        DeviceMessage.VibrateCmd = (function () {\r\n            /**\r\n             * Properties of a VibrateCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IVibrateCmd\r\n             * @property {Array.<Buttplug.DeviceMessage.IVibrateComponent>|null} [speeds] VibrateCmd speeds\r\n             */\r\n            /**\r\n             * Constructs a new VibrateCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a VibrateCmd.\r\n             * @implements IVibrateCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IVibrateCmd=} [properties] Properties to set\r\n             */\r\n            function VibrateCmd(properties) {\r\n                this.speeds = [];\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * VibrateCmd speeds.\r\n             * @member {Array.<Buttplug.DeviceMessage.IVibrateComponent>} speeds\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @instance\r\n             */\r\n            VibrateCmd.prototype.speeds = $util.emptyArray;\r\n            /**\r\n             * Creates a new VibrateCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IVibrateCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd instance\r\n             */\r\n            VibrateCmd.create = function create(properties) {\r\n                return new VibrateCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified VibrateCmd message. Does not implicitly {@link Buttplug.DeviceMessage.VibrateCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IVibrateCmd} message VibrateCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            VibrateCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.speeds != null && message.speeds.length)\r\n                    for (var i = 0; i < message.speeds.length; ++i)\r\n                        $root.Buttplug.DeviceMessage.VibrateComponent.encode(message.speeds[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified VibrateCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.VibrateCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IVibrateCmd} message VibrateCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            VibrateCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a VibrateCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            VibrateCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.VibrateCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            if (!(message.speeds && message.speeds.length))\r\n                                message.speeds = [];\r\n                            message.speeds.push($root.Buttplug.DeviceMessage.VibrateComponent.decode(reader, reader.uint32()));\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a VibrateCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            VibrateCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a VibrateCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            VibrateCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.speeds != null && message.hasOwnProperty(\"speeds\")) {\r\n                    if (!Array.isArray(message.speeds))\r\n                        return \"speeds: array expected\";\r\n                    for (var i = 0; i < message.speeds.length; ++i) {\r\n                        var error = $root.Buttplug.DeviceMessage.VibrateComponent.verify(message.speeds[i]);\r\n                        if (error)\r\n                            return \"speeds.\" + error;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a VibrateCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd\r\n             */\r\n            VibrateCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.VibrateCmd)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.VibrateCmd();\r\n                if (object.speeds) {\r\n                    if (!Array.isArray(object.speeds))\r\n                        throw TypeError(\".Buttplug.DeviceMessage.VibrateCmd.speeds: array expected\");\r\n                    message.speeds = [];\r\n                    for (var i = 0; i < object.speeds.length; ++i) {\r\n                        if (typeof object.speeds[i] !== \"object\")\r\n                            throw TypeError(\".Buttplug.DeviceMessage.VibrateCmd.speeds: object expected\");\r\n                        message.speeds[i] = $root.Buttplug.DeviceMessage.VibrateComponent.fromObject(object.speeds[i]);\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a VibrateCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.VibrateCmd} message VibrateCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            VibrateCmd.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.arrays || options.defaults)\r\n                    object.speeds = [];\r\n                if (message.speeds && message.speeds.length) {\r\n                    object.speeds = [];\r\n                    for (var j = 0; j < message.speeds.length; ++j)\r\n                        object.speeds[j] = $root.Buttplug.DeviceMessage.VibrateComponent.toObject(message.speeds[j], options);\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this VibrateCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.VibrateCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            VibrateCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return VibrateCmd;\r\n        })();\r\n        DeviceMessage.RotateComponent = (function () {\r\n            /**\r\n             * Properties of a RotateComponent.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IRotateComponent\r\n             * @property {number|null} [index] RotateComponent index\r\n             * @property {number|null} [speed] RotateComponent speed\r\n             * @property {boolean|null} [clockwise] RotateComponent clockwise\r\n             */\r\n            /**\r\n             * Constructs a new RotateComponent.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a RotateComponent.\r\n             * @implements IRotateComponent\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IRotateComponent=} [properties] Properties to set\r\n             */\r\n            function RotateComponent(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RotateComponent index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @instance\r\n             */\r\n            RotateComponent.prototype.index = 0;\r\n            /**\r\n             * RotateComponent speed.\r\n             * @member {number} speed\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @instance\r\n             */\r\n            RotateComponent.prototype.speed = 0;\r\n            /**\r\n             * RotateComponent clockwise.\r\n             * @member {boolean} clockwise\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @instance\r\n             */\r\n            RotateComponent.prototype.clockwise = false;\r\n            /**\r\n             * Creates a new RotateComponent instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRotateComponent=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent instance\r\n             */\r\n            RotateComponent.create = function create(properties) {\r\n                return new RotateComponent(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RotateComponent message. Does not implicitly {@link Buttplug.DeviceMessage.RotateComponent.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRotateComponent} message RotateComponent message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RotateComponent.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                if (message.speed != null && Object.hasOwnProperty.call(message, \"speed\"))\r\n                    writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.speed);\r\n                if (message.clockwise != null && Object.hasOwnProperty.call(message, \"clockwise\"))\r\n                    writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.clockwise);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RotateComponent message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RotateComponent.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRotateComponent} message RotateComponent message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RotateComponent.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RotateComponent message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RotateComponent.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RotateComponent();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        case 2:\r\n                            message.speed = reader.double();\r\n                            break;\r\n                        case 3:\r\n                            message.clockwise = reader.bool();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RotateComponent message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RotateComponent.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RotateComponent message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RotateComponent.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                if (message.speed != null && message.hasOwnProperty(\"speed\"))\r\n                    if (typeof message.speed !== \"number\")\r\n                        return \"speed: number expected\";\r\n                if (message.clockwise != null && message.hasOwnProperty(\"clockwise\"))\r\n                    if (typeof message.clockwise !== \"boolean\")\r\n                        return \"clockwise: boolean expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RotateComponent message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent\r\n             */\r\n            RotateComponent.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.RotateComponent)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.RotateComponent();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                if (object.speed != null)\r\n                    message.speed = Number(object.speed);\r\n                if (object.clockwise != null)\r\n                    message.clockwise = Boolean(object.clockwise);\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RotateComponent message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.RotateComponent} message RotateComponent\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RotateComponent.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.index = 0;\r\n                    object.speed = 0;\r\n                    object.clockwise = false;\r\n                }\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                if (message.speed != null && message.hasOwnProperty(\"speed\"))\r\n                    object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;\r\n                if (message.clockwise != null && message.hasOwnProperty(\"clockwise\"))\r\n                    object.clockwise = message.clockwise;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RotateComponent to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.RotateComponent\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RotateComponent.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RotateComponent;\r\n        })();\r\n        DeviceMessage.RotateCmd = (function () {\r\n            /**\r\n             * Properties of a RotateCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IRotateCmd\r\n             * @property {Array.<Buttplug.DeviceMessage.IRotateComponent>|null} [rotations] RotateCmd rotations\r\n             */\r\n            /**\r\n             * Constructs a new RotateCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a RotateCmd.\r\n             * @implements IRotateCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IRotateCmd=} [properties] Properties to set\r\n             */\r\n            function RotateCmd(properties) {\r\n                this.rotations = [];\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RotateCmd rotations.\r\n             * @member {Array.<Buttplug.DeviceMessage.IRotateComponent>} rotations\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @instance\r\n             */\r\n            RotateCmd.prototype.rotations = $util.emptyArray;\r\n            /**\r\n             * Creates a new RotateCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRotateCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd instance\r\n             */\r\n            RotateCmd.create = function create(properties) {\r\n                return new RotateCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RotateCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RotateCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRotateCmd} message RotateCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RotateCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.rotations != null && message.rotations.length)\r\n                    for (var i = 0; i < message.rotations.length; ++i)\r\n                        $root.Buttplug.DeviceMessage.RotateComponent.encode(message.rotations[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RotateCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RotateCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRotateCmd} message RotateCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RotateCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RotateCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RotateCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RotateCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            if (!(message.rotations && message.rotations.length))\r\n                                message.rotations = [];\r\n                            message.rotations.push($root.Buttplug.DeviceMessage.RotateComponent.decode(reader, reader.uint32()));\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RotateCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RotateCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RotateCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RotateCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.rotations != null && message.hasOwnProperty(\"rotations\")) {\r\n                    if (!Array.isArray(message.rotations))\r\n                        return \"rotations: array expected\";\r\n                    for (var i = 0; i < message.rotations.length; ++i) {\r\n                        var error = $root.Buttplug.DeviceMessage.RotateComponent.verify(message.rotations[i]);\r\n                        if (error)\r\n                            return \"rotations.\" + error;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RotateCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd\r\n             */\r\n            RotateCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.RotateCmd)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.RotateCmd();\r\n                if (object.rotations) {\r\n                    if (!Array.isArray(object.rotations))\r\n                        throw TypeError(\".Buttplug.DeviceMessage.RotateCmd.rotations: array expected\");\r\n                    message.rotations = [];\r\n                    for (var i = 0; i < object.rotations.length; ++i) {\r\n                        if (typeof object.rotations[i] !== \"object\")\r\n                            throw TypeError(\".Buttplug.DeviceMessage.RotateCmd.rotations: object expected\");\r\n                        message.rotations[i] = $root.Buttplug.DeviceMessage.RotateComponent.fromObject(object.rotations[i]);\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RotateCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.RotateCmd} message RotateCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RotateCmd.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.arrays || options.defaults)\r\n                    object.rotations = [];\r\n                if (message.rotations && message.rotations.length) {\r\n                    object.rotations = [];\r\n                    for (var j = 0; j < message.rotations.length; ++j)\r\n                        object.rotations[j] = $root.Buttplug.DeviceMessage.RotateComponent.toObject(message.rotations[j], options);\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RotateCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.RotateCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RotateCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RotateCmd;\r\n        })();\r\n        DeviceMessage.LinearComponent = (function () {\r\n            /**\r\n             * Properties of a LinearComponent.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface ILinearComponent\r\n             * @property {number|null} [index] LinearComponent index\r\n             * @property {number|null} [duration] LinearComponent duration\r\n             * @property {number|null} [position] LinearComponent position\r\n             */\r\n            /**\r\n             * Constructs a new LinearComponent.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a LinearComponent.\r\n             * @implements ILinearComponent\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.ILinearComponent=} [properties] Properties to set\r\n             */\r\n            function LinearComponent(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * LinearComponent index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @instance\r\n             */\r\n            LinearComponent.prototype.index = 0;\r\n            /**\r\n             * LinearComponent duration.\r\n             * @member {number} duration\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @instance\r\n             */\r\n            LinearComponent.prototype.duration = 0;\r\n            /**\r\n             * LinearComponent position.\r\n             * @member {number} position\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @instance\r\n             */\r\n            LinearComponent.prototype.position = 0;\r\n            /**\r\n             * Creates a new LinearComponent instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.ILinearComponent=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent instance\r\n             */\r\n            LinearComponent.create = function create(properties) {\r\n                return new LinearComponent(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified LinearComponent message. Does not implicitly {@link Buttplug.DeviceMessage.LinearComponent.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.ILinearComponent} message LinearComponent message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            LinearComponent.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                if (message.duration != null && Object.hasOwnProperty.call(message, \"duration\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/ 16).uint32(message.duration);\r\n                if (message.position != null && Object.hasOwnProperty.call(message, \"position\"))\r\n                    writer.uint32(/* id 3, wireType 1 =*/ 25).double(message.position);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified LinearComponent message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.LinearComponent.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.ILinearComponent} message LinearComponent message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            LinearComponent.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a LinearComponent message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            LinearComponent.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.LinearComponent();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        case 2:\r\n                            message.duration = reader.uint32();\r\n                            break;\r\n                        case 3:\r\n                            message.position = reader.double();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a LinearComponent message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            LinearComponent.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a LinearComponent message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            LinearComponent.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                if (message.duration != null && message.hasOwnProperty(\"duration\"))\r\n                    if (!$util.isInteger(message.duration))\r\n                        return \"duration: integer expected\";\r\n                if (message.position != null && message.hasOwnProperty(\"position\"))\r\n                    if (typeof message.position !== \"number\")\r\n                        return \"position: number expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a LinearComponent message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent\r\n             */\r\n            LinearComponent.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.LinearComponent)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.LinearComponent();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                if (object.duration != null)\r\n                    message.duration = object.duration >>> 0;\r\n                if (object.position != null)\r\n                    message.position = Number(object.position);\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a LinearComponent message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.LinearComponent} message LinearComponent\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            LinearComponent.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.index = 0;\r\n                    object.duration = 0;\r\n                    object.position = 0;\r\n                }\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                if (message.duration != null && message.hasOwnProperty(\"duration\"))\r\n                    object.duration = message.duration;\r\n                if (message.position != null && message.hasOwnProperty(\"position\"))\r\n                    object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this LinearComponent to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.LinearComponent\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            LinearComponent.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return LinearComponent;\r\n        })();\r\n        DeviceMessage.LinearCmd = (function () {\r\n            /**\r\n             * Properties of a LinearCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface ILinearCmd\r\n             * @property {Array.<Buttplug.DeviceMessage.ILinearComponent>|null} [movements] LinearCmd movements\r\n             */\r\n            /**\r\n             * Constructs a new LinearCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a LinearCmd.\r\n             * @implements ILinearCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.ILinearCmd=} [properties] Properties to set\r\n             */\r\n            function LinearCmd(properties) {\r\n                this.movements = [];\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * LinearCmd movements.\r\n             * @member {Array.<Buttplug.DeviceMessage.ILinearComponent>} movements\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @instance\r\n             */\r\n            LinearCmd.prototype.movements = $util.emptyArray;\r\n            /**\r\n             * Creates a new LinearCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.ILinearCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd instance\r\n             */\r\n            LinearCmd.create = function create(properties) {\r\n                return new LinearCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified LinearCmd message. Does not implicitly {@link Buttplug.DeviceMessage.LinearCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.ILinearCmd} message LinearCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            LinearCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.movements != null && message.movements.length)\r\n                    for (var i = 0; i < message.movements.length; ++i)\r\n                        $root.Buttplug.DeviceMessage.LinearComponent.encode(message.movements[i], writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified LinearCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.LinearCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.ILinearCmd} message LinearCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            LinearCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a LinearCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            LinearCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.LinearCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            if (!(message.movements && message.movements.length))\r\n                                message.movements = [];\r\n                            message.movements.push($root.Buttplug.DeviceMessage.LinearComponent.decode(reader, reader.uint32()));\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a LinearCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            LinearCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a LinearCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            LinearCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.movements != null && message.hasOwnProperty(\"movements\")) {\r\n                    if (!Array.isArray(message.movements))\r\n                        return \"movements: array expected\";\r\n                    for (var i = 0; i < message.movements.length; ++i) {\r\n                        var error = $root.Buttplug.DeviceMessage.LinearComponent.verify(message.movements[i]);\r\n                        if (error)\r\n                            return \"movements.\" + error;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a LinearCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd\r\n             */\r\n            LinearCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.LinearCmd)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.LinearCmd();\r\n                if (object.movements) {\r\n                    if (!Array.isArray(object.movements))\r\n                        throw TypeError(\".Buttplug.DeviceMessage.LinearCmd.movements: array expected\");\r\n                    message.movements = [];\r\n                    for (var i = 0; i < object.movements.length; ++i) {\r\n                        if (typeof object.movements[i] !== \"object\")\r\n                            throw TypeError(\".Buttplug.DeviceMessage.LinearCmd.movements: object expected\");\r\n                        message.movements[i] = $root.Buttplug.DeviceMessage.LinearComponent.fromObject(object.movements[i]);\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a LinearCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.LinearCmd} message LinearCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            LinearCmd.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.arrays || options.defaults)\r\n                    object.movements = [];\r\n                if (message.movements && message.movements.length) {\r\n                    object.movements = [];\r\n                    for (var j = 0; j < message.movements.length; ++j)\r\n                        object.movements[j] = $root.Buttplug.DeviceMessage.LinearComponent.toObject(message.movements[j], options);\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this LinearCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.LinearCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            LinearCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return LinearCmd;\r\n        })();\r\n        DeviceMessage.StopDeviceCmd = (function () {\r\n            /**\r\n             * Properties of a StopDeviceCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IStopDeviceCmd\r\n             */\r\n            /**\r\n             * Constructs a new StopDeviceCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a StopDeviceCmd.\r\n             * @implements IStopDeviceCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IStopDeviceCmd=} [properties] Properties to set\r\n             */\r\n            function StopDeviceCmd(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new StopDeviceCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IStopDeviceCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd instance\r\n             */\r\n            StopDeviceCmd.create = function create(properties) {\r\n                return new StopDeviceCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified StopDeviceCmd message. Does not implicitly {@link Buttplug.DeviceMessage.StopDeviceCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IStopDeviceCmd} message StopDeviceCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StopDeviceCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified StopDeviceCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.StopDeviceCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IStopDeviceCmd} message StopDeviceCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            StopDeviceCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a StopDeviceCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StopDeviceCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.StopDeviceCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a StopDeviceCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            StopDeviceCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a StopDeviceCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            StopDeviceCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a StopDeviceCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd\r\n             */\r\n            StopDeviceCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.StopDeviceCmd)\r\n                    return object;\r\n                return new $root.Buttplug.DeviceMessage.StopDeviceCmd();\r\n            };\r\n            /**\r\n             * Creates a plain object from a StopDeviceCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.StopDeviceCmd} message StopDeviceCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            StopDeviceCmd.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this StopDeviceCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.StopDeviceCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            StopDeviceCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return StopDeviceCmd;\r\n        })();\r\n        DeviceMessage.RawReadCmd = (function () {\r\n            /**\r\n             * Properties of a RawReadCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IRawReadCmd\r\n             * @property {Buttplug.Endpoint|null} [endpoint] RawReadCmd endpoint\r\n             * @property {Uint8Array|null} [data] RawReadCmd data\r\n             * @property {number|null} [expectedLength] RawReadCmd expectedLength\r\n             * @property {number|null} [timeout] RawReadCmd timeout\r\n             */\r\n            /**\r\n             * Constructs a new RawReadCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a RawReadCmd.\r\n             * @implements IRawReadCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IRawReadCmd=} [properties] Properties to set\r\n             */\r\n            function RawReadCmd(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RawReadCmd endpoint.\r\n             * @member {Buttplug.Endpoint} endpoint\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @instance\r\n             */\r\n            RawReadCmd.prototype.endpoint = 0;\r\n            /**\r\n             * RawReadCmd data.\r\n             * @member {Uint8Array} data\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @instance\r\n             */\r\n            RawReadCmd.prototype.data = $util.newBuffer([]);\r\n            /**\r\n             * RawReadCmd expectedLength.\r\n             * @member {number} expectedLength\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @instance\r\n             */\r\n            RawReadCmd.prototype.expectedLength = 0;\r\n            /**\r\n             * RawReadCmd timeout.\r\n             * @member {number} timeout\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @instance\r\n             */\r\n            RawReadCmd.prototype.timeout = 0;\r\n            /**\r\n             * Creates a new RawReadCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawReadCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd instance\r\n             */\r\n            RawReadCmd.create = function create(properties) {\r\n                return new RawReadCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RawReadCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawReadCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawReadCmd} message RawReadCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawReadCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.endpoint != null && Object.hasOwnProperty.call(message, \"endpoint\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.endpoint);\r\n                if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\r\n                    writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.data);\r\n                if (message.expectedLength != null && Object.hasOwnProperty.call(message, \"expectedLength\"))\r\n                    writer.uint32(/* id 3, wireType 0 =*/ 24).uint32(message.expectedLength);\r\n                if (message.timeout != null && Object.hasOwnProperty.call(message, \"timeout\"))\r\n                    writer.uint32(/* id 4, wireType 0 =*/ 32).uint32(message.timeout);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RawReadCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawReadCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawReadCmd} message RawReadCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawReadCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RawReadCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawReadCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawReadCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.endpoint = reader.int32();\r\n                            break;\r\n                        case 2:\r\n                            message.data = reader.bytes();\r\n                            break;\r\n                        case 3:\r\n                            message.expectedLength = reader.uint32();\r\n                            break;\r\n                        case 4:\r\n                            message.timeout = reader.uint32();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RawReadCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawReadCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RawReadCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RawReadCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    switch (message.endpoint) {\r\n                        default:\r\n                            return \"endpoint: enum value expected\";\r\n                        case 0:\r\n                        case 1:\r\n                        case 2:\r\n                        case 3:\r\n                        case 4:\r\n                        case 5:\r\n                        case 6:\r\n                        case 7:\r\n                        case 8:\r\n                        case 9:\r\n                        case 10:\r\n                        case 11:\r\n                        case 12:\r\n                        case 13:\r\n                        case 14:\r\n                        case 15:\r\n                        case 16:\r\n                        case 17:\r\n                        case 18:\r\n                        case 19:\r\n                        case 20:\r\n                        case 21:\r\n                        case 22:\r\n                        case 23:\r\n                        case 24:\r\n                        case 25:\r\n                        case 26:\r\n                        case 27:\r\n                        case 28:\r\n                        case 29:\r\n                        case 30:\r\n                        case 31:\r\n                        case 32:\r\n                        case 33:\r\n                        case 34:\r\n                        case 35:\r\n                        case 36:\r\n                        case 37:\r\n                        case 38:\r\n                        case 39:\r\n                        case 40:\r\n                        case 41:\r\n                        case 42:\r\n                        case 43:\r\n                        case 44:\r\n                            break;\r\n                    }\r\n                if (message.data != null && message.hasOwnProperty(\"data\"))\r\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\r\n                        return \"data: buffer expected\";\r\n                if (message.expectedLength != null && message.hasOwnProperty(\"expectedLength\"))\r\n                    if (!$util.isInteger(message.expectedLength))\r\n                        return \"expectedLength: integer expected\";\r\n                if (message.timeout != null && message.hasOwnProperty(\"timeout\"))\r\n                    if (!$util.isInteger(message.timeout))\r\n                        return \"timeout: integer expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RawReadCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd\r\n             */\r\n            RawReadCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.RawReadCmd)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.RawReadCmd();\r\n                switch (object.endpoint) {\r\n                    case \"Command\":\r\n                    case 0:\r\n                        message.endpoint = 0;\r\n                        break;\r\n                    case \"Firmware\":\r\n                    case 1:\r\n                        message.endpoint = 1;\r\n                        break;\r\n                    case \"Rx\":\r\n                    case 2:\r\n                        message.endpoint = 2;\r\n                        break;\r\n                    case \"RxAccel\":\r\n                    case 3:\r\n                        message.endpoint = 3;\r\n                        break;\r\n                    case \"RxBLEBattery\":\r\n                    case 4:\r\n                        message.endpoint = 4;\r\n                        break;\r\n                    case \"RxPressure\":\r\n                    case 5:\r\n                        message.endpoint = 5;\r\n                        break;\r\n                    case \"RxTouch\":\r\n                    case 6:\r\n                        message.endpoint = 6;\r\n                        break;\r\n                    case \"Tx\":\r\n                    case 7:\r\n                        message.endpoint = 7;\r\n                        break;\r\n                    case \"TxMode\":\r\n                    case 8:\r\n                        message.endpoint = 8;\r\n                        break;\r\n                    case \"TxShock\":\r\n                    case 9:\r\n                        message.endpoint = 9;\r\n                        break;\r\n                    case \"TxVibrate\":\r\n                    case 10:\r\n                        message.endpoint = 10;\r\n                        break;\r\n                    case \"TxVendorControl\":\r\n                    case 11:\r\n                        message.endpoint = 11;\r\n                        break;\r\n                    case \"Whitelist\":\r\n                    case 12:\r\n                        message.endpoint = 12;\r\n                        break;\r\n                    case \"Generic0\":\r\n                    case 13:\r\n                        message.endpoint = 13;\r\n                        break;\r\n                    case \"Generic1\":\r\n                    case 14:\r\n                        message.endpoint = 14;\r\n                        break;\r\n                    case \"Generic2\":\r\n                    case 15:\r\n                        message.endpoint = 15;\r\n                        break;\r\n                    case \"Generic3\":\r\n                    case 16:\r\n                        message.endpoint = 16;\r\n                        break;\r\n                    case \"Generic4\":\r\n                    case 17:\r\n                        message.endpoint = 17;\r\n                        break;\r\n                    case \"Generic5\":\r\n                    case 18:\r\n                        message.endpoint = 18;\r\n                        break;\r\n                    case \"Generic6\":\r\n                    case 19:\r\n                        message.endpoint = 19;\r\n                        break;\r\n                    case \"Generic7\":\r\n                    case 20:\r\n                        message.endpoint = 20;\r\n                        break;\r\n                    case \"Generic8\":\r\n                    case 21:\r\n                        message.endpoint = 21;\r\n                        break;\r\n                    case \"Generic9\":\r\n                    case 22:\r\n                        message.endpoint = 22;\r\n                        break;\r\n                    case \"Generic10\":\r\n                    case 23:\r\n                        message.endpoint = 23;\r\n                        break;\r\n                    case \"Generic11\":\r\n                    case 24:\r\n                        message.endpoint = 24;\r\n                        break;\r\n                    case \"Generic12\":\r\n                    case 25:\r\n                        message.endpoint = 25;\r\n                        break;\r\n                    case \"Generic13\":\r\n                    case 26:\r\n                        message.endpoint = 26;\r\n                        break;\r\n                    case \"Generic14\":\r\n                    case 27:\r\n                        message.endpoint = 27;\r\n                        break;\r\n                    case \"Generic15\":\r\n                    case 28:\r\n                        message.endpoint = 28;\r\n                        break;\r\n                    case \"Generic16\":\r\n                    case 29:\r\n                        message.endpoint = 29;\r\n                        break;\r\n                    case \"Generic17\":\r\n                    case 30:\r\n                        message.endpoint = 30;\r\n                        break;\r\n                    case \"Generic18\":\r\n                    case 31:\r\n                        message.endpoint = 31;\r\n                        break;\r\n                    case \"Generic19\":\r\n                    case 32:\r\n                        message.endpoint = 32;\r\n                        break;\r\n                    case \"Generic20\":\r\n                    case 33:\r\n                        message.endpoint = 33;\r\n                        break;\r\n                    case \"Generic21\":\r\n                    case 34:\r\n                        message.endpoint = 34;\r\n                        break;\r\n                    case \"Generic22\":\r\n                    case 35:\r\n                        message.endpoint = 35;\r\n                        break;\r\n                    case \"Generic23\":\r\n                    case 36:\r\n                        message.endpoint = 36;\r\n                        break;\r\n                    case \"Generic24\":\r\n                    case 37:\r\n                        message.endpoint = 37;\r\n                        break;\r\n                    case \"Generic25\":\r\n                    case 38:\r\n                        message.endpoint = 38;\r\n                        break;\r\n                    case \"Generic26\":\r\n                    case 39:\r\n                        message.endpoint = 39;\r\n                        break;\r\n                    case \"Generic27\":\r\n                    case 40:\r\n                        message.endpoint = 40;\r\n                        break;\r\n                    case \"Generic28\":\r\n                    case 41:\r\n                        message.endpoint = 41;\r\n                        break;\r\n                    case \"Generic29\":\r\n                    case 42:\r\n                        message.endpoint = 42;\r\n                        break;\r\n                    case \"Generic30\":\r\n                    case 43:\r\n                        message.endpoint = 43;\r\n                        break;\r\n                    case \"Generic31\":\r\n                    case 44:\r\n                        message.endpoint = 44;\r\n                        break;\r\n                }\r\n                if (object.data != null)\r\n                    if (typeof object.data === \"string\")\r\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\r\n                    else if (object.data.length)\r\n                        message.data = object.data;\r\n                if (object.expectedLength != null)\r\n                    message.expectedLength = object.expectedLength >>> 0;\r\n                if (object.timeout != null)\r\n                    message.timeout = object.timeout >>> 0;\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RawReadCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.RawReadCmd} message RawReadCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RawReadCmd.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.endpoint = options.enums === String ? \"Command\" : 0;\r\n                    if (options.bytes === String)\r\n                        object.data = \"\";\r\n                    else {\r\n                        object.data = [];\r\n                        if (options.bytes !== Array)\r\n                            object.data = $util.newBuffer(object.data);\r\n                    }\r\n                    object.expectedLength = 0;\r\n                    object.timeout = 0;\r\n                }\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;\r\n                if (message.data != null && message.hasOwnProperty(\"data\"))\r\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\r\n                if (message.expectedLength != null && message.hasOwnProperty(\"expectedLength\"))\r\n                    object.expectedLength = message.expectedLength;\r\n                if (message.timeout != null && message.hasOwnProperty(\"timeout\"))\r\n                    object.timeout = message.timeout;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RawReadCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.RawReadCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RawReadCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RawReadCmd;\r\n        })();\r\n        DeviceMessage.RawWriteCmd = (function () {\r\n            /**\r\n             * Properties of a RawWriteCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IRawWriteCmd\r\n             * @property {Buttplug.Endpoint|null} [endpoint] RawWriteCmd endpoint\r\n             * @property {Uint8Array|null} [data] RawWriteCmd data\r\n             * @property {boolean|null} [writeWithResponse] RawWriteCmd writeWithResponse\r\n             */\r\n            /**\r\n             * Constructs a new RawWriteCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a RawWriteCmd.\r\n             * @implements IRawWriteCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IRawWriteCmd=} [properties] Properties to set\r\n             */\r\n            function RawWriteCmd(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RawWriteCmd endpoint.\r\n             * @member {Buttplug.Endpoint} endpoint\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @instance\r\n             */\r\n            RawWriteCmd.prototype.endpoint = 0;\r\n            /**\r\n             * RawWriteCmd data.\r\n             * @member {Uint8Array} data\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @instance\r\n             */\r\n            RawWriteCmd.prototype.data = $util.newBuffer([]);\r\n            /**\r\n             * RawWriteCmd writeWithResponse.\r\n             * @member {boolean} writeWithResponse\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @instance\r\n             */\r\n            RawWriteCmd.prototype.writeWithResponse = false;\r\n            /**\r\n             * Creates a new RawWriteCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawWriteCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd instance\r\n             */\r\n            RawWriteCmd.create = function create(properties) {\r\n                return new RawWriteCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RawWriteCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawWriteCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawWriteCmd} message RawWriteCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawWriteCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.endpoint != null && Object.hasOwnProperty.call(message, \"endpoint\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.endpoint);\r\n                if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\r\n                    writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.data);\r\n                if (message.writeWithResponse != null && Object.hasOwnProperty.call(message, \"writeWithResponse\"))\r\n                    writer.uint32(/* id 3, wireType 0 =*/ 24).bool(message.writeWithResponse);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RawWriteCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawWriteCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawWriteCmd} message RawWriteCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawWriteCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RawWriteCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawWriteCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawWriteCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.endpoint = reader.int32();\r\n                            break;\r\n                        case 2:\r\n                            message.data = reader.bytes();\r\n                            break;\r\n                        case 3:\r\n                            message.writeWithResponse = reader.bool();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RawWriteCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawWriteCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RawWriteCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RawWriteCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    switch (message.endpoint) {\r\n                        default:\r\n                            return \"endpoint: enum value expected\";\r\n                        case 0:\r\n                        case 1:\r\n                        case 2:\r\n                        case 3:\r\n                        case 4:\r\n                        case 5:\r\n                        case 6:\r\n                        case 7:\r\n                        case 8:\r\n                        case 9:\r\n                        case 10:\r\n                        case 11:\r\n                        case 12:\r\n                        case 13:\r\n                        case 14:\r\n                        case 15:\r\n                        case 16:\r\n                        case 17:\r\n                        case 18:\r\n                        case 19:\r\n                        case 20:\r\n                        case 21:\r\n                        case 22:\r\n                        case 23:\r\n                        case 24:\r\n                        case 25:\r\n                        case 26:\r\n                        case 27:\r\n                        case 28:\r\n                        case 29:\r\n                        case 30:\r\n                        case 31:\r\n                        case 32:\r\n                        case 33:\r\n                        case 34:\r\n                        case 35:\r\n                        case 36:\r\n                        case 37:\r\n                        case 38:\r\n                        case 39:\r\n                        case 40:\r\n                        case 41:\r\n                        case 42:\r\n                        case 43:\r\n                        case 44:\r\n                            break;\r\n                    }\r\n                if (message.data != null && message.hasOwnProperty(\"data\"))\r\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\r\n                        return \"data: buffer expected\";\r\n                if (message.writeWithResponse != null && message.hasOwnProperty(\"writeWithResponse\"))\r\n                    if (typeof message.writeWithResponse !== \"boolean\")\r\n                        return \"writeWithResponse: boolean expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RawWriteCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd\r\n             */\r\n            RawWriteCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.RawWriteCmd)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.RawWriteCmd();\r\n                switch (object.endpoint) {\r\n                    case \"Command\":\r\n                    case 0:\r\n                        message.endpoint = 0;\r\n                        break;\r\n                    case \"Firmware\":\r\n                    case 1:\r\n                        message.endpoint = 1;\r\n                        break;\r\n                    case \"Rx\":\r\n                    case 2:\r\n                        message.endpoint = 2;\r\n                        break;\r\n                    case \"RxAccel\":\r\n                    case 3:\r\n                        message.endpoint = 3;\r\n                        break;\r\n                    case \"RxBLEBattery\":\r\n                    case 4:\r\n                        message.endpoint = 4;\r\n                        break;\r\n                    case \"RxPressure\":\r\n                    case 5:\r\n                        message.endpoint = 5;\r\n                        break;\r\n                    case \"RxTouch\":\r\n                    case 6:\r\n                        message.endpoint = 6;\r\n                        break;\r\n                    case \"Tx\":\r\n                    case 7:\r\n                        message.endpoint = 7;\r\n                        break;\r\n                    case \"TxMode\":\r\n                    case 8:\r\n                        message.endpoint = 8;\r\n                        break;\r\n                    case \"TxShock\":\r\n                    case 9:\r\n                        message.endpoint = 9;\r\n                        break;\r\n                    case \"TxVibrate\":\r\n                    case 10:\r\n                        message.endpoint = 10;\r\n                        break;\r\n                    case \"TxVendorControl\":\r\n                    case 11:\r\n                        message.endpoint = 11;\r\n                        break;\r\n                    case \"Whitelist\":\r\n                    case 12:\r\n                        message.endpoint = 12;\r\n                        break;\r\n                    case \"Generic0\":\r\n                    case 13:\r\n                        message.endpoint = 13;\r\n                        break;\r\n                    case \"Generic1\":\r\n                    case 14:\r\n                        message.endpoint = 14;\r\n                        break;\r\n                    case \"Generic2\":\r\n                    case 15:\r\n                        message.endpoint = 15;\r\n                        break;\r\n                    case \"Generic3\":\r\n                    case 16:\r\n                        message.endpoint = 16;\r\n                        break;\r\n                    case \"Generic4\":\r\n                    case 17:\r\n                        message.endpoint = 17;\r\n                        break;\r\n                    case \"Generic5\":\r\n                    case 18:\r\n                        message.endpoint = 18;\r\n                        break;\r\n                    case \"Generic6\":\r\n                    case 19:\r\n                        message.endpoint = 19;\r\n                        break;\r\n                    case \"Generic7\":\r\n                    case 20:\r\n                        message.endpoint = 20;\r\n                        break;\r\n                    case \"Generic8\":\r\n                    case 21:\r\n                        message.endpoint = 21;\r\n                        break;\r\n                    case \"Generic9\":\r\n                    case 22:\r\n                        message.endpoint = 22;\r\n                        break;\r\n                    case \"Generic10\":\r\n                    case 23:\r\n                        message.endpoint = 23;\r\n                        break;\r\n                    case \"Generic11\":\r\n                    case 24:\r\n                        message.endpoint = 24;\r\n                        break;\r\n                    case \"Generic12\":\r\n                    case 25:\r\n                        message.endpoint = 25;\r\n                        break;\r\n                    case \"Generic13\":\r\n                    case 26:\r\n                        message.endpoint = 26;\r\n                        break;\r\n                    case \"Generic14\":\r\n                    case 27:\r\n                        message.endpoint = 27;\r\n                        break;\r\n                    case \"Generic15\":\r\n                    case 28:\r\n                        message.endpoint = 28;\r\n                        break;\r\n                    case \"Generic16\":\r\n                    case 29:\r\n                        message.endpoint = 29;\r\n                        break;\r\n                    case \"Generic17\":\r\n                    case 30:\r\n                        message.endpoint = 30;\r\n                        break;\r\n                    case \"Generic18\":\r\n                    case 31:\r\n                        message.endpoint = 31;\r\n                        break;\r\n                    case \"Generic19\":\r\n                    case 32:\r\n                        message.endpoint = 32;\r\n                        break;\r\n                    case \"Generic20\":\r\n                    case 33:\r\n                        message.endpoint = 33;\r\n                        break;\r\n                    case \"Generic21\":\r\n                    case 34:\r\n                        message.endpoint = 34;\r\n                        break;\r\n                    case \"Generic22\":\r\n                    case 35:\r\n                        message.endpoint = 35;\r\n                        break;\r\n                    case \"Generic23\":\r\n                    case 36:\r\n                        message.endpoint = 36;\r\n                        break;\r\n                    case \"Generic24\":\r\n                    case 37:\r\n                        message.endpoint = 37;\r\n                        break;\r\n                    case \"Generic25\":\r\n                    case 38:\r\n                        message.endpoint = 38;\r\n                        break;\r\n                    case \"Generic26\":\r\n                    case 39:\r\n                        message.endpoint = 39;\r\n                        break;\r\n                    case \"Generic27\":\r\n                    case 40:\r\n                        message.endpoint = 40;\r\n                        break;\r\n                    case \"Generic28\":\r\n                    case 41:\r\n                        message.endpoint = 41;\r\n                        break;\r\n                    case \"Generic29\":\r\n                    case 42:\r\n                        message.endpoint = 42;\r\n                        break;\r\n                    case \"Generic30\":\r\n                    case 43:\r\n                        message.endpoint = 43;\r\n                        break;\r\n                    case \"Generic31\":\r\n                    case 44:\r\n                        message.endpoint = 44;\r\n                        break;\r\n                }\r\n                if (object.data != null)\r\n                    if (typeof object.data === \"string\")\r\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\r\n                    else if (object.data.length)\r\n                        message.data = object.data;\r\n                if (object.writeWithResponse != null)\r\n                    message.writeWithResponse = Boolean(object.writeWithResponse);\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RawWriteCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.RawWriteCmd} message RawWriteCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RawWriteCmd.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.endpoint = options.enums === String ? \"Command\" : 0;\r\n                    if (options.bytes === String)\r\n                        object.data = \"\";\r\n                    else {\r\n                        object.data = [];\r\n                        if (options.bytes !== Array)\r\n                            object.data = $util.newBuffer(object.data);\r\n                    }\r\n                    object.writeWithResponse = false;\r\n                }\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;\r\n                if (message.data != null && message.hasOwnProperty(\"data\"))\r\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\r\n                if (message.writeWithResponse != null && message.hasOwnProperty(\"writeWithResponse\"))\r\n                    object.writeWithResponse = message.writeWithResponse;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RawWriteCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.RawWriteCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RawWriteCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RawWriteCmd;\r\n        })();\r\n        DeviceMessage.RawSubscribeCmd = (function () {\r\n            /**\r\n             * Properties of a RawSubscribeCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IRawSubscribeCmd\r\n             * @property {Buttplug.Endpoint|null} [endpoint] RawSubscribeCmd endpoint\r\n             */\r\n            /**\r\n             * Constructs a new RawSubscribeCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a RawSubscribeCmd.\r\n             * @implements IRawSubscribeCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd=} [properties] Properties to set\r\n             */\r\n            function RawSubscribeCmd(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RawSubscribeCmd endpoint.\r\n             * @member {Buttplug.Endpoint} endpoint\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @instance\r\n             */\r\n            RawSubscribeCmd.prototype.endpoint = 0;\r\n            /**\r\n             * Creates a new RawSubscribeCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd instance\r\n             */\r\n            RawSubscribeCmd.create = function create(properties) {\r\n                return new RawSubscribeCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RawSubscribeCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawSubscribeCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd} message RawSubscribeCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawSubscribeCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.endpoint != null && Object.hasOwnProperty.call(message, \"endpoint\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.endpoint);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RawSubscribeCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawSubscribeCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd} message RawSubscribeCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawSubscribeCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RawSubscribeCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawSubscribeCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawSubscribeCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.endpoint = reader.int32();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RawSubscribeCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawSubscribeCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RawSubscribeCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RawSubscribeCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    switch (message.endpoint) {\r\n                        default:\r\n                            return \"endpoint: enum value expected\";\r\n                        case 0:\r\n                        case 1:\r\n                        case 2:\r\n                        case 3:\r\n                        case 4:\r\n                        case 5:\r\n                        case 6:\r\n                        case 7:\r\n                        case 8:\r\n                        case 9:\r\n                        case 10:\r\n                        case 11:\r\n                        case 12:\r\n                        case 13:\r\n                        case 14:\r\n                        case 15:\r\n                        case 16:\r\n                        case 17:\r\n                        case 18:\r\n                        case 19:\r\n                        case 20:\r\n                        case 21:\r\n                        case 22:\r\n                        case 23:\r\n                        case 24:\r\n                        case 25:\r\n                        case 26:\r\n                        case 27:\r\n                        case 28:\r\n                        case 29:\r\n                        case 30:\r\n                        case 31:\r\n                        case 32:\r\n                        case 33:\r\n                        case 34:\r\n                        case 35:\r\n                        case 36:\r\n                        case 37:\r\n                        case 38:\r\n                        case 39:\r\n                        case 40:\r\n                        case 41:\r\n                        case 42:\r\n                        case 43:\r\n                        case 44:\r\n                            break;\r\n                    }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RawSubscribeCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd\r\n             */\r\n            RawSubscribeCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.RawSubscribeCmd)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.RawSubscribeCmd();\r\n                switch (object.endpoint) {\r\n                    case \"Command\":\r\n                    case 0:\r\n                        message.endpoint = 0;\r\n                        break;\r\n                    case \"Firmware\":\r\n                    case 1:\r\n                        message.endpoint = 1;\r\n                        break;\r\n                    case \"Rx\":\r\n                    case 2:\r\n                        message.endpoint = 2;\r\n                        break;\r\n                    case \"RxAccel\":\r\n                    case 3:\r\n                        message.endpoint = 3;\r\n                        break;\r\n                    case \"RxBLEBattery\":\r\n                    case 4:\r\n                        message.endpoint = 4;\r\n                        break;\r\n                    case \"RxPressure\":\r\n                    case 5:\r\n                        message.endpoint = 5;\r\n                        break;\r\n                    case \"RxTouch\":\r\n                    case 6:\r\n                        message.endpoint = 6;\r\n                        break;\r\n                    case \"Tx\":\r\n                    case 7:\r\n                        message.endpoint = 7;\r\n                        break;\r\n                    case \"TxMode\":\r\n                    case 8:\r\n                        message.endpoint = 8;\r\n                        break;\r\n                    case \"TxShock\":\r\n                    case 9:\r\n                        message.endpoint = 9;\r\n                        break;\r\n                    case \"TxVibrate\":\r\n                    case 10:\r\n                        message.endpoint = 10;\r\n                        break;\r\n                    case \"TxVendorControl\":\r\n                    case 11:\r\n                        message.endpoint = 11;\r\n                        break;\r\n                    case \"Whitelist\":\r\n                    case 12:\r\n                        message.endpoint = 12;\r\n                        break;\r\n                    case \"Generic0\":\r\n                    case 13:\r\n                        message.endpoint = 13;\r\n                        break;\r\n                    case \"Generic1\":\r\n                    case 14:\r\n                        message.endpoint = 14;\r\n                        break;\r\n                    case \"Generic2\":\r\n                    case 15:\r\n                        message.endpoint = 15;\r\n                        break;\r\n                    case \"Generic3\":\r\n                    case 16:\r\n                        message.endpoint = 16;\r\n                        break;\r\n                    case \"Generic4\":\r\n                    case 17:\r\n                        message.endpoint = 17;\r\n                        break;\r\n                    case \"Generic5\":\r\n                    case 18:\r\n                        message.endpoint = 18;\r\n                        break;\r\n                    case \"Generic6\":\r\n                    case 19:\r\n                        message.endpoint = 19;\r\n                        break;\r\n                    case \"Generic7\":\r\n                    case 20:\r\n                        message.endpoint = 20;\r\n                        break;\r\n                    case \"Generic8\":\r\n                    case 21:\r\n                        message.endpoint = 21;\r\n                        break;\r\n                    case \"Generic9\":\r\n                    case 22:\r\n                        message.endpoint = 22;\r\n                        break;\r\n                    case \"Generic10\":\r\n                    case 23:\r\n                        message.endpoint = 23;\r\n                        break;\r\n                    case \"Generic11\":\r\n                    case 24:\r\n                        message.endpoint = 24;\r\n                        break;\r\n                    case \"Generic12\":\r\n                    case 25:\r\n                        message.endpoint = 25;\r\n                        break;\r\n                    case \"Generic13\":\r\n                    case 26:\r\n                        message.endpoint = 26;\r\n                        break;\r\n                    case \"Generic14\":\r\n                    case 27:\r\n                        message.endpoint = 27;\r\n                        break;\r\n                    case \"Generic15\":\r\n                    case 28:\r\n                        message.endpoint = 28;\r\n                        break;\r\n                    case \"Generic16\":\r\n                    case 29:\r\n                        message.endpoint = 29;\r\n                        break;\r\n                    case \"Generic17\":\r\n                    case 30:\r\n                        message.endpoint = 30;\r\n                        break;\r\n                    case \"Generic18\":\r\n                    case 31:\r\n                        message.endpoint = 31;\r\n                        break;\r\n                    case \"Generic19\":\r\n                    case 32:\r\n                        message.endpoint = 32;\r\n                        break;\r\n                    case \"Generic20\":\r\n                    case 33:\r\n                        message.endpoint = 33;\r\n                        break;\r\n                    case \"Generic21\":\r\n                    case 34:\r\n                        message.endpoint = 34;\r\n                        break;\r\n                    case \"Generic22\":\r\n                    case 35:\r\n                        message.endpoint = 35;\r\n                        break;\r\n                    case \"Generic23\":\r\n                    case 36:\r\n                        message.endpoint = 36;\r\n                        break;\r\n                    case \"Generic24\":\r\n                    case 37:\r\n                        message.endpoint = 37;\r\n                        break;\r\n                    case \"Generic25\":\r\n                    case 38:\r\n                        message.endpoint = 38;\r\n                        break;\r\n                    case \"Generic26\":\r\n                    case 39:\r\n                        message.endpoint = 39;\r\n                        break;\r\n                    case \"Generic27\":\r\n                    case 40:\r\n                        message.endpoint = 40;\r\n                        break;\r\n                    case \"Generic28\":\r\n                    case 41:\r\n                        message.endpoint = 41;\r\n                        break;\r\n                    case \"Generic29\":\r\n                    case 42:\r\n                        message.endpoint = 42;\r\n                        break;\r\n                    case \"Generic30\":\r\n                    case 43:\r\n                        message.endpoint = 43;\r\n                        break;\r\n                    case \"Generic31\":\r\n                    case 44:\r\n                        message.endpoint = 44;\r\n                        break;\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RawSubscribeCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.RawSubscribeCmd} message RawSubscribeCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RawSubscribeCmd.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.endpoint = options.enums === String ? \"Command\" : 0;\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RawSubscribeCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RawSubscribeCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RawSubscribeCmd;\r\n        })();\r\n        DeviceMessage.RawUnsubscribeCmd = (function () {\r\n            /**\r\n             * Properties of a RawUnsubscribeCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IRawUnsubscribeCmd\r\n             * @property {Buttplug.Endpoint|null} [endpoint] RawUnsubscribeCmd endpoint\r\n             */\r\n            /**\r\n             * Constructs a new RawUnsubscribeCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a RawUnsubscribeCmd.\r\n             * @implements IRawUnsubscribeCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd=} [properties] Properties to set\r\n             */\r\n            function RawUnsubscribeCmd(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RawUnsubscribeCmd endpoint.\r\n             * @member {Buttplug.Endpoint} endpoint\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @instance\r\n             */\r\n            RawUnsubscribeCmd.prototype.endpoint = 0;\r\n            /**\r\n             * Creates a new RawUnsubscribeCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd instance\r\n             */\r\n            RawUnsubscribeCmd.create = function create(properties) {\r\n                return new RawUnsubscribeCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RawUnsubscribeCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawUnsubscribeCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd} message RawUnsubscribeCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawUnsubscribeCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.endpoint != null && Object.hasOwnProperty.call(message, \"endpoint\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.endpoint);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RawUnsubscribeCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawUnsubscribeCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd} message RawUnsubscribeCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawUnsubscribeCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RawUnsubscribeCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawUnsubscribeCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawUnsubscribeCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.endpoint = reader.int32();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RawUnsubscribeCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawUnsubscribeCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RawUnsubscribeCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RawUnsubscribeCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    switch (message.endpoint) {\r\n                        default:\r\n                            return \"endpoint: enum value expected\";\r\n                        case 0:\r\n                        case 1:\r\n                        case 2:\r\n                        case 3:\r\n                        case 4:\r\n                        case 5:\r\n                        case 6:\r\n                        case 7:\r\n                        case 8:\r\n                        case 9:\r\n                        case 10:\r\n                        case 11:\r\n                        case 12:\r\n                        case 13:\r\n                        case 14:\r\n                        case 15:\r\n                        case 16:\r\n                        case 17:\r\n                        case 18:\r\n                        case 19:\r\n                        case 20:\r\n                        case 21:\r\n                        case 22:\r\n                        case 23:\r\n                        case 24:\r\n                        case 25:\r\n                        case 26:\r\n                        case 27:\r\n                        case 28:\r\n                        case 29:\r\n                        case 30:\r\n                        case 31:\r\n                        case 32:\r\n                        case 33:\r\n                        case 34:\r\n                        case 35:\r\n                        case 36:\r\n                        case 37:\r\n                        case 38:\r\n                        case 39:\r\n                        case 40:\r\n                        case 41:\r\n                        case 42:\r\n                        case 43:\r\n                        case 44:\r\n                            break;\r\n                    }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RawUnsubscribeCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd\r\n             */\r\n            RawUnsubscribeCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.RawUnsubscribeCmd)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.RawUnsubscribeCmd();\r\n                switch (object.endpoint) {\r\n                    case \"Command\":\r\n                    case 0:\r\n                        message.endpoint = 0;\r\n                        break;\r\n                    case \"Firmware\":\r\n                    case 1:\r\n                        message.endpoint = 1;\r\n                        break;\r\n                    case \"Rx\":\r\n                    case 2:\r\n                        message.endpoint = 2;\r\n                        break;\r\n                    case \"RxAccel\":\r\n                    case 3:\r\n                        message.endpoint = 3;\r\n                        break;\r\n                    case \"RxBLEBattery\":\r\n                    case 4:\r\n                        message.endpoint = 4;\r\n                        break;\r\n                    case \"RxPressure\":\r\n                    case 5:\r\n                        message.endpoint = 5;\r\n                        break;\r\n                    case \"RxTouch\":\r\n                    case 6:\r\n                        message.endpoint = 6;\r\n                        break;\r\n                    case \"Tx\":\r\n                    case 7:\r\n                        message.endpoint = 7;\r\n                        break;\r\n                    case \"TxMode\":\r\n                    case 8:\r\n                        message.endpoint = 8;\r\n                        break;\r\n                    case \"TxShock\":\r\n                    case 9:\r\n                        message.endpoint = 9;\r\n                        break;\r\n                    case \"TxVibrate\":\r\n                    case 10:\r\n                        message.endpoint = 10;\r\n                        break;\r\n                    case \"TxVendorControl\":\r\n                    case 11:\r\n                        message.endpoint = 11;\r\n                        break;\r\n                    case \"Whitelist\":\r\n                    case 12:\r\n                        message.endpoint = 12;\r\n                        break;\r\n                    case \"Generic0\":\r\n                    case 13:\r\n                        message.endpoint = 13;\r\n                        break;\r\n                    case \"Generic1\":\r\n                    case 14:\r\n                        message.endpoint = 14;\r\n                        break;\r\n                    case \"Generic2\":\r\n                    case 15:\r\n                        message.endpoint = 15;\r\n                        break;\r\n                    case \"Generic3\":\r\n                    case 16:\r\n                        message.endpoint = 16;\r\n                        break;\r\n                    case \"Generic4\":\r\n                    case 17:\r\n                        message.endpoint = 17;\r\n                        break;\r\n                    case \"Generic5\":\r\n                    case 18:\r\n                        message.endpoint = 18;\r\n                        break;\r\n                    case \"Generic6\":\r\n                    case 19:\r\n                        message.endpoint = 19;\r\n                        break;\r\n                    case \"Generic7\":\r\n                    case 20:\r\n                        message.endpoint = 20;\r\n                        break;\r\n                    case \"Generic8\":\r\n                    case 21:\r\n                        message.endpoint = 21;\r\n                        break;\r\n                    case \"Generic9\":\r\n                    case 22:\r\n                        message.endpoint = 22;\r\n                        break;\r\n                    case \"Generic10\":\r\n                    case 23:\r\n                        message.endpoint = 23;\r\n                        break;\r\n                    case \"Generic11\":\r\n                    case 24:\r\n                        message.endpoint = 24;\r\n                        break;\r\n                    case \"Generic12\":\r\n                    case 25:\r\n                        message.endpoint = 25;\r\n                        break;\r\n                    case \"Generic13\":\r\n                    case 26:\r\n                        message.endpoint = 26;\r\n                        break;\r\n                    case \"Generic14\":\r\n                    case 27:\r\n                        message.endpoint = 27;\r\n                        break;\r\n                    case \"Generic15\":\r\n                    case 28:\r\n                        message.endpoint = 28;\r\n                        break;\r\n                    case \"Generic16\":\r\n                    case 29:\r\n                        message.endpoint = 29;\r\n                        break;\r\n                    case \"Generic17\":\r\n                    case 30:\r\n                        message.endpoint = 30;\r\n                        break;\r\n                    case \"Generic18\":\r\n                    case 31:\r\n                        message.endpoint = 31;\r\n                        break;\r\n                    case \"Generic19\":\r\n                    case 32:\r\n                        message.endpoint = 32;\r\n                        break;\r\n                    case \"Generic20\":\r\n                    case 33:\r\n                        message.endpoint = 33;\r\n                        break;\r\n                    case \"Generic21\":\r\n                    case 34:\r\n                        message.endpoint = 34;\r\n                        break;\r\n                    case \"Generic22\":\r\n                    case 35:\r\n                        message.endpoint = 35;\r\n                        break;\r\n                    case \"Generic23\":\r\n                    case 36:\r\n                        message.endpoint = 36;\r\n                        break;\r\n                    case \"Generic24\":\r\n                    case 37:\r\n                        message.endpoint = 37;\r\n                        break;\r\n                    case \"Generic25\":\r\n                    case 38:\r\n                        message.endpoint = 38;\r\n                        break;\r\n                    case \"Generic26\":\r\n                    case 39:\r\n                        message.endpoint = 39;\r\n                        break;\r\n                    case \"Generic27\":\r\n                    case 40:\r\n                        message.endpoint = 40;\r\n                        break;\r\n                    case \"Generic28\":\r\n                    case 41:\r\n                        message.endpoint = 41;\r\n                        break;\r\n                    case \"Generic29\":\r\n                    case 42:\r\n                        message.endpoint = 42;\r\n                        break;\r\n                    case \"Generic30\":\r\n                    case 43:\r\n                        message.endpoint = 43;\r\n                        break;\r\n                    case \"Generic31\":\r\n                    case 44:\r\n                        message.endpoint = 44;\r\n                        break;\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RawUnsubscribeCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.RawUnsubscribeCmd} message RawUnsubscribeCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RawUnsubscribeCmd.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.endpoint = options.enums === String ? \"Command\" : 0;\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RawUnsubscribeCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RawUnsubscribeCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RawUnsubscribeCmd;\r\n        })();\r\n        DeviceMessage.BatteryLevelCmd = (function () {\r\n            /**\r\n             * Properties of a BatteryLevelCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IBatteryLevelCmd\r\n             */\r\n            /**\r\n             * Constructs a new BatteryLevelCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a BatteryLevelCmd.\r\n             * @implements IBatteryLevelCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd=} [properties] Properties to set\r\n             */\r\n            function BatteryLevelCmd(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new BatteryLevelCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd instance\r\n             */\r\n            BatteryLevelCmd.create = function create(properties) {\r\n                return new BatteryLevelCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified BatteryLevelCmd message. Does not implicitly {@link Buttplug.DeviceMessage.BatteryLevelCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd} message BatteryLevelCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            BatteryLevelCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified BatteryLevelCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.BatteryLevelCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd} message BatteryLevelCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            BatteryLevelCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a BatteryLevelCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            BatteryLevelCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.BatteryLevelCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a BatteryLevelCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            BatteryLevelCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a BatteryLevelCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            BatteryLevelCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a BatteryLevelCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd\r\n             */\r\n            BatteryLevelCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.BatteryLevelCmd)\r\n                    return object;\r\n                return new $root.Buttplug.DeviceMessage.BatteryLevelCmd();\r\n            };\r\n            /**\r\n             * Creates a plain object from a BatteryLevelCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.BatteryLevelCmd} message BatteryLevelCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            BatteryLevelCmd.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this BatteryLevelCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            BatteryLevelCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return BatteryLevelCmd;\r\n        })();\r\n        DeviceMessage.RSSILevelCmd = (function () {\r\n            /**\r\n             * Properties of a RSSILevelCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IRSSILevelCmd\r\n             */\r\n            /**\r\n             * Constructs a new RSSILevelCmd.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a RSSILevelCmd.\r\n             * @implements IRSSILevelCmd\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IRSSILevelCmd=} [properties] Properties to set\r\n             */\r\n            function RSSILevelCmd(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new RSSILevelCmd instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRSSILevelCmd=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd instance\r\n             */\r\n            RSSILevelCmd.create = function create(properties) {\r\n                return new RSSILevelCmd(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RSSILevelCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RSSILevelCmd.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRSSILevelCmd} message RSSILevelCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RSSILevelCmd.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RSSILevelCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RSSILevelCmd.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IRSSILevelCmd} message RSSILevelCmd message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RSSILevelCmd.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RSSILevelCmd message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RSSILevelCmd.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RSSILevelCmd();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RSSILevelCmd message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RSSILevelCmd.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RSSILevelCmd message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RSSILevelCmd.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RSSILevelCmd message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd\r\n             */\r\n            RSSILevelCmd.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.RSSILevelCmd)\r\n                    return object;\r\n                return new $root.Buttplug.DeviceMessage.RSSILevelCmd();\r\n            };\r\n            /**\r\n             * Creates a plain object from a RSSILevelCmd message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.RSSILevelCmd} message RSSILevelCmd\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RSSILevelCmd.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this RSSILevelCmd to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.RSSILevelCmd\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RSSILevelCmd.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RSSILevelCmd;\r\n        })();\r\n        DeviceMessage.FFIMessage = (function () {\r\n            /**\r\n             * Properties of a FFIMessage.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @interface IFFIMessage\r\n             * @property {Buttplug.DeviceMessage.IVibrateCmd|null} [vibrateCmd] FFIMessage vibrateCmd\r\n             * @property {Buttplug.DeviceMessage.IRotateCmd|null} [rotateCmd] FFIMessage rotateCmd\r\n             * @property {Buttplug.DeviceMessage.ILinearCmd|null} [linearCmd] FFIMessage linearCmd\r\n             * @property {Buttplug.DeviceMessage.IStopDeviceCmd|null} [stopDeviceCmd] FFIMessage stopDeviceCmd\r\n             * @property {Buttplug.DeviceMessage.IRawReadCmd|null} [rawReadCmd] FFIMessage rawReadCmd\r\n             * @property {Buttplug.DeviceMessage.IRawWriteCmd|null} [rawWriteCmd] FFIMessage rawWriteCmd\r\n             * @property {Buttplug.DeviceMessage.IRawSubscribeCmd|null} [rawSubscribeCmd] FFIMessage rawSubscribeCmd\r\n             * @property {Buttplug.DeviceMessage.IRawUnsubscribeCmd|null} [rawUnsubscribeCmd] FFIMessage rawUnsubscribeCmd\r\n             * @property {Buttplug.DeviceMessage.IBatteryLevelCmd|null} [batteryLevelCmd] FFIMessage batteryLevelCmd\r\n             * @property {Buttplug.DeviceMessage.IRSSILevelCmd|null} [rssiLevelCmd] FFIMessage rssiLevelCmd\r\n             */\r\n            /**\r\n             * Constructs a new FFIMessage.\r\n             * @memberof Buttplug.DeviceMessage\r\n             * @classdesc Represents a FFIMessage.\r\n             * @implements IFFIMessage\r\n             * @constructor\r\n             * @param {Buttplug.DeviceMessage.IFFIMessage=} [properties] Properties to set\r\n             */\r\n            function FFIMessage(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * FFIMessage vibrateCmd.\r\n             * @member {Buttplug.DeviceMessage.IVibrateCmd|null|undefined} vibrateCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.vibrateCmd = null;\r\n            /**\r\n             * FFIMessage rotateCmd.\r\n             * @member {Buttplug.DeviceMessage.IRotateCmd|null|undefined} rotateCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.rotateCmd = null;\r\n            /**\r\n             * FFIMessage linearCmd.\r\n             * @member {Buttplug.DeviceMessage.ILinearCmd|null|undefined} linearCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.linearCmd = null;\r\n            /**\r\n             * FFIMessage stopDeviceCmd.\r\n             * @member {Buttplug.DeviceMessage.IStopDeviceCmd|null|undefined} stopDeviceCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.stopDeviceCmd = null;\r\n            /**\r\n             * FFIMessage rawReadCmd.\r\n             * @member {Buttplug.DeviceMessage.IRawReadCmd|null|undefined} rawReadCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.rawReadCmd = null;\r\n            /**\r\n             * FFIMessage rawWriteCmd.\r\n             * @member {Buttplug.DeviceMessage.IRawWriteCmd|null|undefined} rawWriteCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.rawWriteCmd = null;\r\n            /**\r\n             * FFIMessage rawSubscribeCmd.\r\n             * @member {Buttplug.DeviceMessage.IRawSubscribeCmd|null|undefined} rawSubscribeCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.rawSubscribeCmd = null;\r\n            /**\r\n             * FFIMessage rawUnsubscribeCmd.\r\n             * @member {Buttplug.DeviceMessage.IRawUnsubscribeCmd|null|undefined} rawUnsubscribeCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.rawUnsubscribeCmd = null;\r\n            /**\r\n             * FFIMessage batteryLevelCmd.\r\n             * @member {Buttplug.DeviceMessage.IBatteryLevelCmd|null|undefined} batteryLevelCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.batteryLevelCmd = null;\r\n            /**\r\n             * FFIMessage rssiLevelCmd.\r\n             * @member {Buttplug.DeviceMessage.IRSSILevelCmd|null|undefined} rssiLevelCmd\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.rssiLevelCmd = null;\r\n            // OneOf field names bound to virtual getters and setters\r\n            var $oneOfFields;\r\n            /**\r\n             * FFIMessage msg.\r\n             * @member {\"vibrateCmd\"|\"rotateCmd\"|\"linearCmd\"|\"stopDeviceCmd\"|\"rawReadCmd\"|\"rawWriteCmd\"|\"rawSubscribeCmd\"|\"rawUnsubscribeCmd\"|\"batteryLevelCmd\"|\"rssiLevelCmd\"|undefined} msg\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            Object.defineProperty(FFIMessage.prototype, \"msg\", {\r\n                get: $util.oneOfGetter($oneOfFields = [\"vibrateCmd\", \"rotateCmd\", \"linearCmd\", \"stopDeviceCmd\", \"rawReadCmd\", \"rawWriteCmd\", \"rawSubscribeCmd\", \"rawUnsubscribeCmd\", \"batteryLevelCmd\", \"rssiLevelCmd\"]),\r\n                set: $util.oneOfSetter($oneOfFields)\r\n            });\r\n            /**\r\n             * Creates a new FFIMessage instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IFFIMessage=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage instance\r\n             */\r\n            FFIMessage.create = function create(properties) {\r\n                return new FFIMessage(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified FFIMessage message. Does not implicitly {@link Buttplug.DeviceMessage.FFIMessage.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IFFIMessage} message FFIMessage message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            FFIMessage.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.vibrateCmd != null && Object.hasOwnProperty.call(message, \"vibrateCmd\"))\r\n                    $root.Buttplug.DeviceMessage.VibrateCmd.encode(message.vibrateCmd, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n                if (message.rotateCmd != null && Object.hasOwnProperty.call(message, \"rotateCmd\"))\r\n                    $root.Buttplug.DeviceMessage.RotateCmd.encode(message.rotateCmd, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\r\n                if (message.linearCmd != null && Object.hasOwnProperty.call(message, \"linearCmd\"))\r\n                    $root.Buttplug.DeviceMessage.LinearCmd.encode(message.linearCmd, writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\r\n                if (message.stopDeviceCmd != null && Object.hasOwnProperty.call(message, \"stopDeviceCmd\"))\r\n                    $root.Buttplug.DeviceMessage.StopDeviceCmd.encode(message.stopDeviceCmd, writer.uint32(/* id 4, wireType 2 =*/ 34).fork()).ldelim();\r\n                if (message.rawReadCmd != null && Object.hasOwnProperty.call(message, \"rawReadCmd\"))\r\n                    $root.Buttplug.DeviceMessage.RawReadCmd.encode(message.rawReadCmd, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\r\n                if (message.rawWriteCmd != null && Object.hasOwnProperty.call(message, \"rawWriteCmd\"))\r\n                    $root.Buttplug.DeviceMessage.RawWriteCmd.encode(message.rawWriteCmd, writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\r\n                if (message.rawSubscribeCmd != null && Object.hasOwnProperty.call(message, \"rawSubscribeCmd\"))\r\n                    $root.Buttplug.DeviceMessage.RawSubscribeCmd.encode(message.rawSubscribeCmd, writer.uint32(/* id 7, wireType 2 =*/ 58).fork()).ldelim();\r\n                if (message.rawUnsubscribeCmd != null && Object.hasOwnProperty.call(message, \"rawUnsubscribeCmd\"))\r\n                    $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.encode(message.rawUnsubscribeCmd, writer.uint32(/* id 8, wireType 2 =*/ 66).fork()).ldelim();\r\n                if (message.batteryLevelCmd != null && Object.hasOwnProperty.call(message, \"batteryLevelCmd\"))\r\n                    $root.Buttplug.DeviceMessage.BatteryLevelCmd.encode(message.batteryLevelCmd, writer.uint32(/* id 9, wireType 2 =*/ 74).fork()).ldelim();\r\n                if (message.rssiLevelCmd != null && Object.hasOwnProperty.call(message, \"rssiLevelCmd\"))\r\n                    $root.Buttplug.DeviceMessage.RSSILevelCmd.encode(message.rssiLevelCmd, writer.uint32(/* id 10, wireType 2 =*/ 82).fork()).ldelim();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified FFIMessage message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.FFIMessage.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.IFFIMessage} message FFIMessage message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            FFIMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a FFIMessage message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            FFIMessage.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.FFIMessage();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.vibrateCmd = $root.Buttplug.DeviceMessage.VibrateCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 2:\r\n                            message.rotateCmd = $root.Buttplug.DeviceMessage.RotateCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 3:\r\n                            message.linearCmd = $root.Buttplug.DeviceMessage.LinearCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 4:\r\n                            message.stopDeviceCmd = $root.Buttplug.DeviceMessage.StopDeviceCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 5:\r\n                            message.rawReadCmd = $root.Buttplug.DeviceMessage.RawReadCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 6:\r\n                            message.rawWriteCmd = $root.Buttplug.DeviceMessage.RawWriteCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 7:\r\n                            message.rawSubscribeCmd = $root.Buttplug.DeviceMessage.RawSubscribeCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 8:\r\n                            message.rawUnsubscribeCmd = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 9:\r\n                            message.batteryLevelCmd = $root.Buttplug.DeviceMessage.BatteryLevelCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 10:\r\n                            message.rssiLevelCmd = $root.Buttplug.DeviceMessage.RSSILevelCmd.decode(reader, reader.uint32());\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a FFIMessage message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            FFIMessage.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a FFIMessage message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            FFIMessage.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                var properties = {};\r\n                if (message.vibrateCmd != null && message.hasOwnProperty(\"vibrateCmd\")) {\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.VibrateCmd.verify(message.vibrateCmd);\r\n                        if (error)\r\n                            return \"vibrateCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.rotateCmd != null && message.hasOwnProperty(\"rotateCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.RotateCmd.verify(message.rotateCmd);\r\n                        if (error)\r\n                            return \"rotateCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.linearCmd != null && message.hasOwnProperty(\"linearCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.LinearCmd.verify(message.linearCmd);\r\n                        if (error)\r\n                            return \"linearCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.stopDeviceCmd != null && message.hasOwnProperty(\"stopDeviceCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.StopDeviceCmd.verify(message.stopDeviceCmd);\r\n                        if (error)\r\n                            return \"stopDeviceCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.rawReadCmd != null && message.hasOwnProperty(\"rawReadCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.RawReadCmd.verify(message.rawReadCmd);\r\n                        if (error)\r\n                            return \"rawReadCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.rawWriteCmd != null && message.hasOwnProperty(\"rawWriteCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.RawWriteCmd.verify(message.rawWriteCmd);\r\n                        if (error)\r\n                            return \"rawWriteCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.rawSubscribeCmd != null && message.hasOwnProperty(\"rawSubscribeCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.RawSubscribeCmd.verify(message.rawSubscribeCmd);\r\n                        if (error)\r\n                            return \"rawSubscribeCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.rawUnsubscribeCmd != null && message.hasOwnProperty(\"rawUnsubscribeCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.verify(message.rawUnsubscribeCmd);\r\n                        if (error)\r\n                            return \"rawUnsubscribeCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.batteryLevelCmd != null && message.hasOwnProperty(\"batteryLevelCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.BatteryLevelCmd.verify(message.batteryLevelCmd);\r\n                        if (error)\r\n                            return \"batteryLevelCmd.\" + error;\r\n                    }\r\n                }\r\n                if (message.rssiLevelCmd != null && message.hasOwnProperty(\"rssiLevelCmd\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceMessage.RSSILevelCmd.verify(message.rssiLevelCmd);\r\n                        if (error)\r\n                            return \"rssiLevelCmd.\" + error;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a FFIMessage message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage\r\n             */\r\n            FFIMessage.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceMessage.FFIMessage)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceMessage.FFIMessage();\r\n                if (object.vibrateCmd != null) {\r\n                    if (typeof object.vibrateCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.vibrateCmd: object expected\");\r\n                    message.vibrateCmd = $root.Buttplug.DeviceMessage.VibrateCmd.fromObject(object.vibrateCmd);\r\n                }\r\n                if (object.rotateCmd != null) {\r\n                    if (typeof object.rotateCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.rotateCmd: object expected\");\r\n                    message.rotateCmd = $root.Buttplug.DeviceMessage.RotateCmd.fromObject(object.rotateCmd);\r\n                }\r\n                if (object.linearCmd != null) {\r\n                    if (typeof object.linearCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.linearCmd: object expected\");\r\n                    message.linearCmd = $root.Buttplug.DeviceMessage.LinearCmd.fromObject(object.linearCmd);\r\n                }\r\n                if (object.stopDeviceCmd != null) {\r\n                    if (typeof object.stopDeviceCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.stopDeviceCmd: object expected\");\r\n                    message.stopDeviceCmd = $root.Buttplug.DeviceMessage.StopDeviceCmd.fromObject(object.stopDeviceCmd);\r\n                }\r\n                if (object.rawReadCmd != null) {\r\n                    if (typeof object.rawReadCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.rawReadCmd: object expected\");\r\n                    message.rawReadCmd = $root.Buttplug.DeviceMessage.RawReadCmd.fromObject(object.rawReadCmd);\r\n                }\r\n                if (object.rawWriteCmd != null) {\r\n                    if (typeof object.rawWriteCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.rawWriteCmd: object expected\");\r\n                    message.rawWriteCmd = $root.Buttplug.DeviceMessage.RawWriteCmd.fromObject(object.rawWriteCmd);\r\n                }\r\n                if (object.rawSubscribeCmd != null) {\r\n                    if (typeof object.rawSubscribeCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.rawSubscribeCmd: object expected\");\r\n                    message.rawSubscribeCmd = $root.Buttplug.DeviceMessage.RawSubscribeCmd.fromObject(object.rawSubscribeCmd);\r\n                }\r\n                if (object.rawUnsubscribeCmd != null) {\r\n                    if (typeof object.rawUnsubscribeCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.rawUnsubscribeCmd: object expected\");\r\n                    message.rawUnsubscribeCmd = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.fromObject(object.rawUnsubscribeCmd);\r\n                }\r\n                if (object.batteryLevelCmd != null) {\r\n                    if (typeof object.batteryLevelCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.batteryLevelCmd: object expected\");\r\n                    message.batteryLevelCmd = $root.Buttplug.DeviceMessage.BatteryLevelCmd.fromObject(object.batteryLevelCmd);\r\n                }\r\n                if (object.rssiLevelCmd != null) {\r\n                    if (typeof object.rssiLevelCmd !== \"object\")\r\n                        throw TypeError(\".Buttplug.DeviceMessage.FFIMessage.rssiLevelCmd: object expected\");\r\n                    message.rssiLevelCmd = $root.Buttplug.DeviceMessage.RSSILevelCmd.fromObject(object.rssiLevelCmd);\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a FFIMessage message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.DeviceMessage.FFIMessage} message FFIMessage\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            FFIMessage.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (message.vibrateCmd != null && message.hasOwnProperty(\"vibrateCmd\")) {\r\n                    object.vibrateCmd = $root.Buttplug.DeviceMessage.VibrateCmd.toObject(message.vibrateCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"vibrateCmd\";\r\n                }\r\n                if (message.rotateCmd != null && message.hasOwnProperty(\"rotateCmd\")) {\r\n                    object.rotateCmd = $root.Buttplug.DeviceMessage.RotateCmd.toObject(message.rotateCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"rotateCmd\";\r\n                }\r\n                if (message.linearCmd != null && message.hasOwnProperty(\"linearCmd\")) {\r\n                    object.linearCmd = $root.Buttplug.DeviceMessage.LinearCmd.toObject(message.linearCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"linearCmd\";\r\n                }\r\n                if (message.stopDeviceCmd != null && message.hasOwnProperty(\"stopDeviceCmd\")) {\r\n                    object.stopDeviceCmd = $root.Buttplug.DeviceMessage.StopDeviceCmd.toObject(message.stopDeviceCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"stopDeviceCmd\";\r\n                }\r\n                if (message.rawReadCmd != null && message.hasOwnProperty(\"rawReadCmd\")) {\r\n                    object.rawReadCmd = $root.Buttplug.DeviceMessage.RawReadCmd.toObject(message.rawReadCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"rawReadCmd\";\r\n                }\r\n                if (message.rawWriteCmd != null && message.hasOwnProperty(\"rawWriteCmd\")) {\r\n                    object.rawWriteCmd = $root.Buttplug.DeviceMessage.RawWriteCmd.toObject(message.rawWriteCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"rawWriteCmd\";\r\n                }\r\n                if (message.rawSubscribeCmd != null && message.hasOwnProperty(\"rawSubscribeCmd\")) {\r\n                    object.rawSubscribeCmd = $root.Buttplug.DeviceMessage.RawSubscribeCmd.toObject(message.rawSubscribeCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"rawSubscribeCmd\";\r\n                }\r\n                if (message.rawUnsubscribeCmd != null && message.hasOwnProperty(\"rawUnsubscribeCmd\")) {\r\n                    object.rawUnsubscribeCmd = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.toObject(message.rawUnsubscribeCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"rawUnsubscribeCmd\";\r\n                }\r\n                if (message.batteryLevelCmd != null && message.hasOwnProperty(\"batteryLevelCmd\")) {\r\n                    object.batteryLevelCmd = $root.Buttplug.DeviceMessage.BatteryLevelCmd.toObject(message.batteryLevelCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"batteryLevelCmd\";\r\n                }\r\n                if (message.rssiLevelCmd != null && message.hasOwnProperty(\"rssiLevelCmd\")) {\r\n                    object.rssiLevelCmd = $root.Buttplug.DeviceMessage.RSSILevelCmd.toObject(message.rssiLevelCmd, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"rssiLevelCmd\";\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this FFIMessage to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceMessage.FFIMessage\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            FFIMessage.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return FFIMessage;\r\n        })();\r\n        return DeviceMessage;\r\n    })();\r\n    Buttplug.ServerMessage = (function () {\r\n        /**\r\n         * Properties of a ServerMessage.\r\n         * @memberof Buttplug\r\n         * @interface IServerMessage\r\n         * @property {Buttplug.ServerMessage.IOk|null} [ok] ServerMessage ok\r\n         * @property {Buttplug.ServerMessage.IError|null} [error] ServerMessage error\r\n         * @property {Buttplug.ServerMessage.IScanningFinished|null} [scanningFinished] ServerMessage scanningFinished\r\n         * @property {Buttplug.ServerMessage.IDeviceAdded|null} [deviceAdded] ServerMessage deviceAdded\r\n         * @property {Buttplug.ServerMessage.IDeviceRemoved|null} [deviceRemoved] ServerMessage deviceRemoved\r\n         * @property {Buttplug.ServerMessage.IDisconnect|null} [disconnect] ServerMessage disconnect\r\n         */\r\n        /**\r\n         * Constructs a new ServerMessage.\r\n         * @memberof Buttplug\r\n         * @classdesc Represents a ServerMessage.\r\n         * @implements IServerMessage\r\n         * @constructor\r\n         * @param {Buttplug.IServerMessage=} [properties] Properties to set\r\n         */\r\n        function ServerMessage(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n        /**\r\n         * ServerMessage ok.\r\n         * @member {Buttplug.ServerMessage.IOk|null|undefined} ok\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         */\r\n        ServerMessage.prototype.ok = null;\r\n        /**\r\n         * ServerMessage error.\r\n         * @member {Buttplug.ServerMessage.IError|null|undefined} error\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         */\r\n        ServerMessage.prototype.error = null;\r\n        /**\r\n         * ServerMessage scanningFinished.\r\n         * @member {Buttplug.ServerMessage.IScanningFinished|null|undefined} scanningFinished\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         */\r\n        ServerMessage.prototype.scanningFinished = null;\r\n        /**\r\n         * ServerMessage deviceAdded.\r\n         * @member {Buttplug.ServerMessage.IDeviceAdded|null|undefined} deviceAdded\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         */\r\n        ServerMessage.prototype.deviceAdded = null;\r\n        /**\r\n         * ServerMessage deviceRemoved.\r\n         * @member {Buttplug.ServerMessage.IDeviceRemoved|null|undefined} deviceRemoved\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         */\r\n        ServerMessage.prototype.deviceRemoved = null;\r\n        /**\r\n         * ServerMessage disconnect.\r\n         * @member {Buttplug.ServerMessage.IDisconnect|null|undefined} disconnect\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         */\r\n        ServerMessage.prototype.disconnect = null;\r\n        // OneOf field names bound to virtual getters and setters\r\n        var $oneOfFields;\r\n        /**\r\n         * ServerMessage msg.\r\n         * @member {\"ok\"|\"error\"|\"scanningFinished\"|\"deviceAdded\"|\"deviceRemoved\"|\"disconnect\"|undefined} msg\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         */\r\n        Object.defineProperty(ServerMessage.prototype, \"msg\", {\r\n            get: $util.oneOfGetter($oneOfFields = [\"ok\", \"error\", \"scanningFinished\", \"deviceAdded\", \"deviceRemoved\", \"disconnect\"]),\r\n            set: $util.oneOfSetter($oneOfFields)\r\n        });\r\n        /**\r\n         * Creates a new ServerMessage instance using the specified properties.\r\n         * @function create\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {Buttplug.IServerMessage=} [properties] Properties to set\r\n         * @returns {Buttplug.ServerMessage} ServerMessage instance\r\n         */\r\n        ServerMessage.create = function create(properties) {\r\n            return new ServerMessage(properties);\r\n        };\r\n        /**\r\n         * Encodes the specified ServerMessage message. Does not implicitly {@link Buttplug.ServerMessage.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {Buttplug.IServerMessage} message ServerMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ServerMessage.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.ok != null && Object.hasOwnProperty.call(message, \"ok\"))\r\n                $root.Buttplug.ServerMessage.Ok.encode(message.ok, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n            if (message.error != null && Object.hasOwnProperty.call(message, \"error\"))\r\n                $root.Buttplug.ServerMessage.Error.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\r\n            if (message.scanningFinished != null && Object.hasOwnProperty.call(message, \"scanningFinished\"))\r\n                $root.Buttplug.ServerMessage.ScanningFinished.encode(message.scanningFinished, writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\r\n            if (message.deviceAdded != null && Object.hasOwnProperty.call(message, \"deviceAdded\"))\r\n                $root.Buttplug.ServerMessage.DeviceAdded.encode(message.deviceAdded, writer.uint32(/* id 4, wireType 2 =*/ 34).fork()).ldelim();\r\n            if (message.deviceRemoved != null && Object.hasOwnProperty.call(message, \"deviceRemoved\"))\r\n                $root.Buttplug.ServerMessage.DeviceRemoved.encode(message.deviceRemoved, writer.uint32(/* id 5, wireType 2 =*/ 42).fork()).ldelim();\r\n            if (message.disconnect != null && Object.hasOwnProperty.call(message, \"disconnect\"))\r\n                $root.Buttplug.ServerMessage.Disconnect.encode(message.disconnect, writer.uint32(/* id 6, wireType 2 =*/ 50).fork()).ldelim();\r\n            return writer;\r\n        };\r\n        /**\r\n         * Encodes the specified ServerMessage message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {Buttplug.IServerMessage} message ServerMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ServerMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n        /**\r\n         * Decodes a ServerMessage message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {Buttplug.ServerMessage} ServerMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ServerMessage.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                    case 1:\r\n                        message.ok = $root.Buttplug.ServerMessage.Ok.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 2:\r\n                        message.error = $root.Buttplug.ServerMessage.Error.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 3:\r\n                        message.scanningFinished = $root.Buttplug.ServerMessage.ScanningFinished.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 4:\r\n                        message.deviceAdded = $root.Buttplug.ServerMessage.DeviceAdded.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 5:\r\n                        message.deviceRemoved = $root.Buttplug.ServerMessage.DeviceRemoved.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 6:\r\n                        message.disconnect = $root.Buttplug.ServerMessage.Disconnect.decode(reader, reader.uint32());\r\n                        break;\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Decodes a ServerMessage message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {Buttplug.ServerMessage} ServerMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ServerMessage.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n        /**\r\n         * Verifies a ServerMessage message.\r\n         * @function verify\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ServerMessage.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            var properties = {};\r\n            if (message.ok != null && message.hasOwnProperty(\"ok\")) {\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.ServerMessage.Ok.verify(message.ok);\r\n                    if (error)\r\n                        return \"ok.\" + error;\r\n                }\r\n            }\r\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.ServerMessage.Error.verify(message.error);\r\n                    if (error)\r\n                        return \"error.\" + error;\r\n                }\r\n            }\r\n            if (message.scanningFinished != null && message.hasOwnProperty(\"scanningFinished\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.ServerMessage.ScanningFinished.verify(message.scanningFinished);\r\n                    if (error)\r\n                        return \"scanningFinished.\" + error;\r\n                }\r\n            }\r\n            if (message.deviceAdded != null && message.hasOwnProperty(\"deviceAdded\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.ServerMessage.DeviceAdded.verify(message.deviceAdded);\r\n                    if (error)\r\n                        return \"deviceAdded.\" + error;\r\n                }\r\n            }\r\n            if (message.deviceRemoved != null && message.hasOwnProperty(\"deviceRemoved\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.ServerMessage.DeviceRemoved.verify(message.deviceRemoved);\r\n                    if (error)\r\n                        return \"deviceRemoved.\" + error;\r\n                }\r\n            }\r\n            if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.ServerMessage.Disconnect.verify(message.disconnect);\r\n                    if (error)\r\n                        return \"disconnect.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Creates a ServerMessage message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {Buttplug.ServerMessage} ServerMessage\r\n         */\r\n        ServerMessage.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.Buttplug.ServerMessage)\r\n                return object;\r\n            var message = new $root.Buttplug.ServerMessage();\r\n            if (object.ok != null) {\r\n                if (typeof object.ok !== \"object\")\r\n                    throw TypeError(\".Buttplug.ServerMessage.ok: object expected\");\r\n                message.ok = $root.Buttplug.ServerMessage.Ok.fromObject(object.ok);\r\n            }\r\n            if (object.error != null) {\r\n                if (typeof object.error !== \"object\")\r\n                    throw TypeError(\".Buttplug.ServerMessage.error: object expected\");\r\n                message.error = $root.Buttplug.ServerMessage.Error.fromObject(object.error);\r\n            }\r\n            if (object.scanningFinished != null) {\r\n                if (typeof object.scanningFinished !== \"object\")\r\n                    throw TypeError(\".Buttplug.ServerMessage.scanningFinished: object expected\");\r\n                message.scanningFinished = $root.Buttplug.ServerMessage.ScanningFinished.fromObject(object.scanningFinished);\r\n            }\r\n            if (object.deviceAdded != null) {\r\n                if (typeof object.deviceAdded !== \"object\")\r\n                    throw TypeError(\".Buttplug.ServerMessage.deviceAdded: object expected\");\r\n                message.deviceAdded = $root.Buttplug.ServerMessage.DeviceAdded.fromObject(object.deviceAdded);\r\n            }\r\n            if (object.deviceRemoved != null) {\r\n                if (typeof object.deviceRemoved !== \"object\")\r\n                    throw TypeError(\".Buttplug.ServerMessage.deviceRemoved: object expected\");\r\n                message.deviceRemoved = $root.Buttplug.ServerMessage.DeviceRemoved.fromObject(object.deviceRemoved);\r\n            }\r\n            if (object.disconnect != null) {\r\n                if (typeof object.disconnect !== \"object\")\r\n                    throw TypeError(\".Buttplug.ServerMessage.disconnect: object expected\");\r\n                message.disconnect = $root.Buttplug.ServerMessage.Disconnect.fromObject(object.disconnect);\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Creates a plain object from a ServerMessage message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof Buttplug.ServerMessage\r\n         * @static\r\n         * @param {Buttplug.ServerMessage} message ServerMessage\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ServerMessage.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (message.ok != null && message.hasOwnProperty(\"ok\")) {\r\n                object.ok = $root.Buttplug.ServerMessage.Ok.toObject(message.ok, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"ok\";\r\n            }\r\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\r\n                object.error = $root.Buttplug.ServerMessage.Error.toObject(message.error, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"error\";\r\n            }\r\n            if (message.scanningFinished != null && message.hasOwnProperty(\"scanningFinished\")) {\r\n                object.scanningFinished = $root.Buttplug.ServerMessage.ScanningFinished.toObject(message.scanningFinished, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"scanningFinished\";\r\n            }\r\n            if (message.deviceAdded != null && message.hasOwnProperty(\"deviceAdded\")) {\r\n                object.deviceAdded = $root.Buttplug.ServerMessage.DeviceAdded.toObject(message.deviceAdded, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"deviceAdded\";\r\n            }\r\n            if (message.deviceRemoved != null && message.hasOwnProperty(\"deviceRemoved\")) {\r\n                object.deviceRemoved = $root.Buttplug.ServerMessage.DeviceRemoved.toObject(message.deviceRemoved, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"deviceRemoved\";\r\n            }\r\n            if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\r\n                object.disconnect = $root.Buttplug.ServerMessage.Disconnect.toObject(message.disconnect, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"disconnect\";\r\n            }\r\n            return object;\r\n        };\r\n        /**\r\n         * Converts this ServerMessage to JSON.\r\n         * @function toJSON\r\n         * @memberof Buttplug.ServerMessage\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ServerMessage.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n        /**\r\n         * ButtplugErrorType enum.\r\n         * @name Buttplug.ServerMessage.ButtplugErrorType\r\n         * @enum {number}\r\n         * @property {number} ButtplugConnectorError=0 ButtplugConnectorError value\r\n         * @property {number} ButtplugHandshakeError=1 ButtplugHandshakeError value\r\n         * @property {number} ButtplugDeviceError=2 ButtplugDeviceError value\r\n         * @property {number} ButtplugPingError=3 ButtplugPingError value\r\n         * @property {number} ButtplugMessageError=4 ButtplugMessageError value\r\n         * @property {number} ButtplugUnknownError=5 ButtplugUnknownError value\r\n         */\r\n        ServerMessage.ButtplugErrorType = (function () {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"ButtplugConnectorError\"] = 0;\r\n            values[valuesById[1] = \"ButtplugHandshakeError\"] = 1;\r\n            values[valuesById[2] = \"ButtplugDeviceError\"] = 2;\r\n            values[valuesById[3] = \"ButtplugPingError\"] = 3;\r\n            values[valuesById[4] = \"ButtplugMessageError\"] = 4;\r\n            values[valuesById[5] = \"ButtplugUnknownError\"] = 5;\r\n            return values;\r\n        })();\r\n        /**\r\n         * MessageAttributeType enum.\r\n         * @name Buttplug.ServerMessage.MessageAttributeType\r\n         * @enum {number}\r\n         * @property {number} VibrateCmd=0 VibrateCmd value\r\n         * @property {number} RotateCmd=1 RotateCmd value\r\n         * @property {number} LinearCmd=2 LinearCmd value\r\n         * @property {number} StopDeviceCmd=3 StopDeviceCmd value\r\n         * @property {number} RawReadCmd=4 RawReadCmd value\r\n         * @property {number} RawWriteCmd=5 RawWriteCmd value\r\n         * @property {number} RawSubscribeCmd=6 RawSubscribeCmd value\r\n         * @property {number} RawUnsubscribeCmd=7 RawUnsubscribeCmd value\r\n         * @property {number} BatteryLevelCmd=8 BatteryLevelCmd value\r\n         * @property {number} RSSILevelCmd=9 RSSILevelCmd value\r\n         */\r\n        ServerMessage.MessageAttributeType = (function () {\r\n            var valuesById = {}, values = Object.create(valuesById);\r\n            values[valuesById[0] = \"VibrateCmd\"] = 0;\r\n            values[valuesById[1] = \"RotateCmd\"] = 1;\r\n            values[valuesById[2] = \"LinearCmd\"] = 2;\r\n            values[valuesById[3] = \"StopDeviceCmd\"] = 3;\r\n            values[valuesById[4] = \"RawReadCmd\"] = 4;\r\n            values[valuesById[5] = \"RawWriteCmd\"] = 5;\r\n            values[valuesById[6] = \"RawSubscribeCmd\"] = 6;\r\n            values[valuesById[7] = \"RawUnsubscribeCmd\"] = 7;\r\n            values[valuesById[8] = \"BatteryLevelCmd\"] = 8;\r\n            values[valuesById[9] = \"RSSILevelCmd\"] = 9;\r\n            return values;\r\n        })();\r\n        ServerMessage.MessageAttributes = (function () {\r\n            /**\r\n             * Properties of a MessageAttributes.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @interface IMessageAttributes\r\n             * @property {Buttplug.ServerMessage.MessageAttributeType|null} [messageType] MessageAttributes messageType\r\n             * @property {number|null} [featureCount] MessageAttributes featureCount\r\n             * @property {Array.<number>|null} [stepCount] MessageAttributes stepCount\r\n             * @property {Array.<Buttplug.Endpoint>|null} [endpoints] MessageAttributes endpoints\r\n             * @property {Array.<number>|null} [maxDuration] MessageAttributes maxDuration\r\n             */\r\n            /**\r\n             * Constructs a new MessageAttributes.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @classdesc Represents a MessageAttributes.\r\n             * @implements IMessageAttributes\r\n             * @constructor\r\n             * @param {Buttplug.ServerMessage.IMessageAttributes=} [properties] Properties to set\r\n             */\r\n            function MessageAttributes(properties) {\r\n                this.stepCount = [];\r\n                this.endpoints = [];\r\n                this.maxDuration = [];\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * MessageAttributes messageType.\r\n             * @member {Buttplug.ServerMessage.MessageAttributeType} messageType\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @instance\r\n             */\r\n            MessageAttributes.prototype.messageType = 0;\r\n            /**\r\n             * MessageAttributes featureCount.\r\n             * @member {number} featureCount\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @instance\r\n             */\r\n            MessageAttributes.prototype.featureCount = 0;\r\n            /**\r\n             * MessageAttributes stepCount.\r\n             * @member {Array.<number>} stepCount\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @instance\r\n             */\r\n            MessageAttributes.prototype.stepCount = $util.emptyArray;\r\n            /**\r\n             * MessageAttributes endpoints.\r\n             * @member {Array.<Buttplug.Endpoint>} endpoints\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @instance\r\n             */\r\n            MessageAttributes.prototype.endpoints = $util.emptyArray;\r\n            /**\r\n             * MessageAttributes maxDuration.\r\n             * @member {Array.<number>} maxDuration\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @instance\r\n             */\r\n            MessageAttributes.prototype.maxDuration = $util.emptyArray;\r\n            /**\r\n             * Creates a new MessageAttributes instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IMessageAttributes=} [properties] Properties to set\r\n             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes instance\r\n             */\r\n            MessageAttributes.create = function create(properties) {\r\n                return new MessageAttributes(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified MessageAttributes message. Does not implicitly {@link Buttplug.ServerMessage.MessageAttributes.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IMessageAttributes} message MessageAttributes message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            MessageAttributes.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.messageType != null && Object.hasOwnProperty.call(message, \"messageType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.messageType);\r\n                if (message.featureCount != null && Object.hasOwnProperty.call(message, \"featureCount\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/ 16).uint32(message.featureCount);\r\n                if (message.stepCount != null && message.stepCount.length) {\r\n                    writer.uint32(/* id 3, wireType 2 =*/ 26).fork();\r\n                    for (var i = 0; i < message.stepCount.length; ++i)\r\n                        writer.uint32(message.stepCount[i]);\r\n                    writer.ldelim();\r\n                }\r\n                if (message.endpoints != null && message.endpoints.length) {\r\n                    writer.uint32(/* id 4, wireType 2 =*/ 34).fork();\r\n                    for (var i = 0; i < message.endpoints.length; ++i)\r\n                        writer.int32(message.endpoints[i]);\r\n                    writer.ldelim();\r\n                }\r\n                if (message.maxDuration != null && message.maxDuration.length) {\r\n                    writer.uint32(/* id 5, wireType 2 =*/ 42).fork();\r\n                    for (var i = 0; i < message.maxDuration.length; ++i)\r\n                        writer.uint32(message.maxDuration[i]);\r\n                    writer.ldelim();\r\n                }\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified MessageAttributes message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.MessageAttributes.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IMessageAttributes} message MessageAttributes message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            MessageAttributes.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a MessageAttributes message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            MessageAttributes.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.MessageAttributes();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.messageType = reader.int32();\r\n                            break;\r\n                        case 2:\r\n                            message.featureCount = reader.uint32();\r\n                            break;\r\n                        case 3:\r\n                            if (!(message.stepCount && message.stepCount.length))\r\n                                message.stepCount = [];\r\n                            if ((tag & 7) === 2) {\r\n                                var end2 = reader.uint32() + reader.pos;\r\n                                while (reader.pos < end2)\r\n                                    message.stepCount.push(reader.uint32());\r\n                            }\r\n                            else\r\n                                message.stepCount.push(reader.uint32());\r\n                            break;\r\n                        case 4:\r\n                            if (!(message.endpoints && message.endpoints.length))\r\n                                message.endpoints = [];\r\n                            if ((tag & 7) === 2) {\r\n                                var end2 = reader.uint32() + reader.pos;\r\n                                while (reader.pos < end2)\r\n                                    message.endpoints.push(reader.int32());\r\n                            }\r\n                            else\r\n                                message.endpoints.push(reader.int32());\r\n                            break;\r\n                        case 5:\r\n                            if (!(message.maxDuration && message.maxDuration.length))\r\n                                message.maxDuration = [];\r\n                            if ((tag & 7) === 2) {\r\n                                var end2 = reader.uint32() + reader.pos;\r\n                                while (reader.pos < end2)\r\n                                    message.maxDuration.push(reader.uint32());\r\n                            }\r\n                            else\r\n                                message.maxDuration.push(reader.uint32());\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a MessageAttributes message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            MessageAttributes.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a MessageAttributes message.\r\n             * @function verify\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            MessageAttributes.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.messageType != null && message.hasOwnProperty(\"messageType\"))\r\n                    switch (message.messageType) {\r\n                        default:\r\n                            return \"messageType: enum value expected\";\r\n                        case 0:\r\n                        case 1:\r\n                        case 2:\r\n                        case 3:\r\n                        case 4:\r\n                        case 5:\r\n                        case 6:\r\n                        case 7:\r\n                        case 8:\r\n                        case 9:\r\n                            break;\r\n                    }\r\n                if (message.featureCount != null && message.hasOwnProperty(\"featureCount\"))\r\n                    if (!$util.isInteger(message.featureCount))\r\n                        return \"featureCount: integer expected\";\r\n                if (message.stepCount != null && message.hasOwnProperty(\"stepCount\")) {\r\n                    if (!Array.isArray(message.stepCount))\r\n                        return \"stepCount: array expected\";\r\n                    for (var i = 0; i < message.stepCount.length; ++i)\r\n                        if (!$util.isInteger(message.stepCount[i]))\r\n                            return \"stepCount: integer[] expected\";\r\n                }\r\n                if (message.endpoints != null && message.hasOwnProperty(\"endpoints\")) {\r\n                    if (!Array.isArray(message.endpoints))\r\n                        return \"endpoints: array expected\";\r\n                    for (var i = 0; i < message.endpoints.length; ++i)\r\n                        switch (message.endpoints[i]) {\r\n                            default:\r\n                                return \"endpoints: enum value[] expected\";\r\n                            case 0:\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                            case 4:\r\n                            case 5:\r\n                            case 6:\r\n                            case 7:\r\n                            case 8:\r\n                            case 9:\r\n                            case 10:\r\n                            case 11:\r\n                            case 12:\r\n                            case 13:\r\n                            case 14:\r\n                            case 15:\r\n                            case 16:\r\n                            case 17:\r\n                            case 18:\r\n                            case 19:\r\n                            case 20:\r\n                            case 21:\r\n                            case 22:\r\n                            case 23:\r\n                            case 24:\r\n                            case 25:\r\n                            case 26:\r\n                            case 27:\r\n                            case 28:\r\n                            case 29:\r\n                            case 30:\r\n                            case 31:\r\n                            case 32:\r\n                            case 33:\r\n                            case 34:\r\n                            case 35:\r\n                            case 36:\r\n                            case 37:\r\n                            case 38:\r\n                            case 39:\r\n                            case 40:\r\n                            case 41:\r\n                            case 42:\r\n                            case 43:\r\n                            case 44:\r\n                                break;\r\n                        }\r\n                }\r\n                if (message.maxDuration != null && message.hasOwnProperty(\"maxDuration\")) {\r\n                    if (!Array.isArray(message.maxDuration))\r\n                        return \"maxDuration: array expected\";\r\n                    for (var i = 0; i < message.maxDuration.length; ++i)\r\n                        if (!$util.isInteger(message.maxDuration[i]))\r\n                            return \"maxDuration: integer[] expected\";\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a MessageAttributes message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes\r\n             */\r\n            MessageAttributes.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ServerMessage.MessageAttributes)\r\n                    return object;\r\n                var message = new $root.Buttplug.ServerMessage.MessageAttributes();\r\n                switch (object.messageType) {\r\n                    case \"VibrateCmd\":\r\n                    case 0:\r\n                        message.messageType = 0;\r\n                        break;\r\n                    case \"RotateCmd\":\r\n                    case 1:\r\n                        message.messageType = 1;\r\n                        break;\r\n                    case \"LinearCmd\":\r\n                    case 2:\r\n                        message.messageType = 2;\r\n                        break;\r\n                    case \"StopDeviceCmd\":\r\n                    case 3:\r\n                        message.messageType = 3;\r\n                        break;\r\n                    case \"RawReadCmd\":\r\n                    case 4:\r\n                        message.messageType = 4;\r\n                        break;\r\n                    case \"RawWriteCmd\":\r\n                    case 5:\r\n                        message.messageType = 5;\r\n                        break;\r\n                    case \"RawSubscribeCmd\":\r\n                    case 6:\r\n                        message.messageType = 6;\r\n                        break;\r\n                    case \"RawUnsubscribeCmd\":\r\n                    case 7:\r\n                        message.messageType = 7;\r\n                        break;\r\n                    case \"BatteryLevelCmd\":\r\n                    case 8:\r\n                        message.messageType = 8;\r\n                        break;\r\n                    case \"RSSILevelCmd\":\r\n                    case 9:\r\n                        message.messageType = 9;\r\n                        break;\r\n                }\r\n                if (object.featureCount != null)\r\n                    message.featureCount = object.featureCount >>> 0;\r\n                if (object.stepCount) {\r\n                    if (!Array.isArray(object.stepCount))\r\n                        throw TypeError(\".Buttplug.ServerMessage.MessageAttributes.stepCount: array expected\");\r\n                    message.stepCount = [];\r\n                    for (var i = 0; i < object.stepCount.length; ++i)\r\n                        message.stepCount[i] = object.stepCount[i] >>> 0;\r\n                }\r\n                if (object.endpoints) {\r\n                    if (!Array.isArray(object.endpoints))\r\n                        throw TypeError(\".Buttplug.ServerMessage.MessageAttributes.endpoints: array expected\");\r\n                    message.endpoints = [];\r\n                    for (var i = 0; i < object.endpoints.length; ++i)\r\n                        switch (object.endpoints[i]) {\r\n                            default:\r\n                            case \"Command\":\r\n                            case 0:\r\n                                message.endpoints[i] = 0;\r\n                                break;\r\n                            case \"Firmware\":\r\n                            case 1:\r\n                                message.endpoints[i] = 1;\r\n                                break;\r\n                            case \"Rx\":\r\n                            case 2:\r\n                                message.endpoints[i] = 2;\r\n                                break;\r\n                            case \"RxAccel\":\r\n                            case 3:\r\n                                message.endpoints[i] = 3;\r\n                                break;\r\n                            case \"RxBLEBattery\":\r\n                            case 4:\r\n                                message.endpoints[i] = 4;\r\n                                break;\r\n                            case \"RxPressure\":\r\n                            case 5:\r\n                                message.endpoints[i] = 5;\r\n                                break;\r\n                            case \"RxTouch\":\r\n                            case 6:\r\n                                message.endpoints[i] = 6;\r\n                                break;\r\n                            case \"Tx\":\r\n                            case 7:\r\n                                message.endpoints[i] = 7;\r\n                                break;\r\n                            case \"TxMode\":\r\n                            case 8:\r\n                                message.endpoints[i] = 8;\r\n                                break;\r\n                            case \"TxShock\":\r\n                            case 9:\r\n                                message.endpoints[i] = 9;\r\n                                break;\r\n                            case \"TxVibrate\":\r\n                            case 10:\r\n                                message.endpoints[i] = 10;\r\n                                break;\r\n                            case \"TxVendorControl\":\r\n                            case 11:\r\n                                message.endpoints[i] = 11;\r\n                                break;\r\n                            case \"Whitelist\":\r\n                            case 12:\r\n                                message.endpoints[i] = 12;\r\n                                break;\r\n                            case \"Generic0\":\r\n                            case 13:\r\n                                message.endpoints[i] = 13;\r\n                                break;\r\n                            case \"Generic1\":\r\n                            case 14:\r\n                                message.endpoints[i] = 14;\r\n                                break;\r\n                            case \"Generic2\":\r\n                            case 15:\r\n                                message.endpoints[i] = 15;\r\n                                break;\r\n                            case \"Generic3\":\r\n                            case 16:\r\n                                message.endpoints[i] = 16;\r\n                                break;\r\n                            case \"Generic4\":\r\n                            case 17:\r\n                                message.endpoints[i] = 17;\r\n                                break;\r\n                            case \"Generic5\":\r\n                            case 18:\r\n                                message.endpoints[i] = 18;\r\n                                break;\r\n                            case \"Generic6\":\r\n                            case 19:\r\n                                message.endpoints[i] = 19;\r\n                                break;\r\n                            case \"Generic7\":\r\n                            case 20:\r\n                                message.endpoints[i] = 20;\r\n                                break;\r\n                            case \"Generic8\":\r\n                            case 21:\r\n                                message.endpoints[i] = 21;\r\n                                break;\r\n                            case \"Generic9\":\r\n                            case 22:\r\n                                message.endpoints[i] = 22;\r\n                                break;\r\n                            case \"Generic10\":\r\n                            case 23:\r\n                                message.endpoints[i] = 23;\r\n                                break;\r\n                            case \"Generic11\":\r\n                            case 24:\r\n                                message.endpoints[i] = 24;\r\n                                break;\r\n                            case \"Generic12\":\r\n                            case 25:\r\n                                message.endpoints[i] = 25;\r\n                                break;\r\n                            case \"Generic13\":\r\n                            case 26:\r\n                                message.endpoints[i] = 26;\r\n                                break;\r\n                            case \"Generic14\":\r\n                            case 27:\r\n                                message.endpoints[i] = 27;\r\n                                break;\r\n                            case \"Generic15\":\r\n                            case 28:\r\n                                message.endpoints[i] = 28;\r\n                                break;\r\n                            case \"Generic16\":\r\n                            case 29:\r\n                                message.endpoints[i] = 29;\r\n                                break;\r\n                            case \"Generic17\":\r\n                            case 30:\r\n                                message.endpoints[i] = 30;\r\n                                break;\r\n                            case \"Generic18\":\r\n                            case 31:\r\n                                message.endpoints[i] = 31;\r\n                                break;\r\n                            case \"Generic19\":\r\n                            case 32:\r\n                                message.endpoints[i] = 32;\r\n                                break;\r\n                            case \"Generic20\":\r\n                            case 33:\r\n                                message.endpoints[i] = 33;\r\n                                break;\r\n                            case \"Generic21\":\r\n                            case 34:\r\n                                message.endpoints[i] = 34;\r\n                                break;\r\n                            case \"Generic22\":\r\n                            case 35:\r\n                                message.endpoints[i] = 35;\r\n                                break;\r\n                            case \"Generic23\":\r\n                            case 36:\r\n                                message.endpoints[i] = 36;\r\n                                break;\r\n                            case \"Generic24\":\r\n                            case 37:\r\n                                message.endpoints[i] = 37;\r\n                                break;\r\n                            case \"Generic25\":\r\n                            case 38:\r\n                                message.endpoints[i] = 38;\r\n                                break;\r\n                            case \"Generic26\":\r\n                            case 39:\r\n                                message.endpoints[i] = 39;\r\n                                break;\r\n                            case \"Generic27\":\r\n                            case 40:\r\n                                message.endpoints[i] = 40;\r\n                                break;\r\n                            case \"Generic28\":\r\n                            case 41:\r\n                                message.endpoints[i] = 41;\r\n                                break;\r\n                            case \"Generic29\":\r\n                            case 42:\r\n                                message.endpoints[i] = 42;\r\n                                break;\r\n                            case \"Generic30\":\r\n                            case 43:\r\n                                message.endpoints[i] = 43;\r\n                                break;\r\n                            case \"Generic31\":\r\n                            case 44:\r\n                                message.endpoints[i] = 44;\r\n                                break;\r\n                        }\r\n                }\r\n                if (object.maxDuration) {\r\n                    if (!Array.isArray(object.maxDuration))\r\n                        throw TypeError(\".Buttplug.ServerMessage.MessageAttributes.maxDuration: array expected\");\r\n                    message.maxDuration = [];\r\n                    for (var i = 0; i < object.maxDuration.length; ++i)\r\n                        message.maxDuration[i] = object.maxDuration[i] >>> 0;\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a MessageAttributes message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.MessageAttributes} message MessageAttributes\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            MessageAttributes.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.arrays || options.defaults) {\r\n                    object.stepCount = [];\r\n                    object.endpoints = [];\r\n                    object.maxDuration = [];\r\n                }\r\n                if (options.defaults) {\r\n                    object.messageType = options.enums === String ? \"VibrateCmd\" : 0;\r\n                    object.featureCount = 0;\r\n                }\r\n                if (message.messageType != null && message.hasOwnProperty(\"messageType\"))\r\n                    object.messageType = options.enums === String ? $root.Buttplug.ServerMessage.MessageAttributeType[message.messageType] : message.messageType;\r\n                if (message.featureCount != null && message.hasOwnProperty(\"featureCount\"))\r\n                    object.featureCount = message.featureCount;\r\n                if (message.stepCount && message.stepCount.length) {\r\n                    object.stepCount = [];\r\n                    for (var j = 0; j < message.stepCount.length; ++j)\r\n                        object.stepCount[j] = message.stepCount[j];\r\n                }\r\n                if (message.endpoints && message.endpoints.length) {\r\n                    object.endpoints = [];\r\n                    for (var j = 0; j < message.endpoints.length; ++j)\r\n                        object.endpoints[j] = options.enums === String ? $root.Buttplug.Endpoint[message.endpoints[j]] : message.endpoints[j];\r\n                }\r\n                if (message.maxDuration && message.maxDuration.length) {\r\n                    object.maxDuration = [];\r\n                    for (var j = 0; j < message.maxDuration.length; ++j)\r\n                        object.maxDuration[j] = message.maxDuration[j];\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this MessageAttributes to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ServerMessage.MessageAttributes\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            MessageAttributes.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return MessageAttributes;\r\n        })();\r\n        ServerMessage.Ok = (function () {\r\n            /**\r\n             * Properties of an Ok.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @interface IOk\r\n             */\r\n            /**\r\n             * Constructs a new Ok.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @classdesc Represents an Ok.\r\n             * @implements IOk\r\n             * @constructor\r\n             * @param {Buttplug.ServerMessage.IOk=} [properties] Properties to set\r\n             */\r\n            function Ok(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new Ok instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IOk=} [properties] Properties to set\r\n             * @returns {Buttplug.ServerMessage.Ok} Ok instance\r\n             */\r\n            Ok.create = function create(properties) {\r\n                return new Ok(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified Ok message. Does not implicitly {@link Buttplug.ServerMessage.Ok.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IOk} message Ok message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Ok.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified Ok message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.Ok.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IOk} message Ok message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Ok.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes an Ok message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ServerMessage.Ok} Ok\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Ok.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.Ok();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes an Ok message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ServerMessage.Ok} Ok\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Ok.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies an Ok message.\r\n             * @function verify\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Ok.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates an Ok message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ServerMessage.Ok} Ok\r\n             */\r\n            Ok.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ServerMessage.Ok)\r\n                    return object;\r\n                return new $root.Buttplug.ServerMessage.Ok();\r\n            };\r\n            /**\r\n             * Creates a plain object from an Ok message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.Ok} message Ok\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Ok.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this Ok to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ServerMessage.Ok\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Ok.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return Ok;\r\n        })();\r\n        ServerMessage.Error = (function () {\r\n            /**\r\n             * Properties of an Error.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @interface IError\r\n             * @property {Buttplug.ServerMessage.ButtplugErrorType|null} [errorType] Error errorType\r\n             * @property {string|null} [message] Error message\r\n             * @property {string|null} [backtrace] Error backtrace\r\n             */\r\n            /**\r\n             * Constructs a new Error.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @classdesc Represents an Error.\r\n             * @implements IError\r\n             * @constructor\r\n             * @param {Buttplug.ServerMessage.IError=} [properties] Properties to set\r\n             */\r\n            function Error(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Error errorType.\r\n             * @member {Buttplug.ServerMessage.ButtplugErrorType} errorType\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @instance\r\n             */\r\n            Error.prototype.errorType = 0;\r\n            /**\r\n             * Error message.\r\n             * @member {string} message\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @instance\r\n             */\r\n            Error.prototype.message = \"\";\r\n            /**\r\n             * Error backtrace.\r\n             * @member {string} backtrace\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @instance\r\n             */\r\n            Error.prototype.backtrace = \"\";\r\n            /**\r\n             * Creates a new Error instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IError=} [properties] Properties to set\r\n             * @returns {Buttplug.ServerMessage.Error} Error instance\r\n             */\r\n            Error.create = function create(properties) {\r\n                return new Error(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified Error message. Does not implicitly {@link Buttplug.ServerMessage.Error.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IError} message Error message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Error.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.errorType != null && Object.hasOwnProperty.call(message, \"errorType\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).int32(message.errorType);\r\n                if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\r\n                    writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.message);\r\n                if (message.backtrace != null && Object.hasOwnProperty.call(message, \"backtrace\"))\r\n                    writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.backtrace);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified Error message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.Error.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IError} message Error message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Error.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes an Error message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ServerMessage.Error} Error\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Error.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.Error();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.errorType = reader.int32();\r\n                            break;\r\n                        case 2:\r\n                            message.message = reader.string();\r\n                            break;\r\n                        case 3:\r\n                            message.backtrace = reader.string();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes an Error message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ServerMessage.Error} Error\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Error.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies an Error message.\r\n             * @function verify\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Error.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.errorType != null && message.hasOwnProperty(\"errorType\"))\r\n                    switch (message.errorType) {\r\n                        default:\r\n                            return \"errorType: enum value expected\";\r\n                        case 0:\r\n                        case 1:\r\n                        case 2:\r\n                        case 3:\r\n                        case 4:\r\n                        case 5:\r\n                            break;\r\n                    }\r\n                if (message.message != null && message.hasOwnProperty(\"message\"))\r\n                    if (!$util.isString(message.message))\r\n                        return \"message: string expected\";\r\n                if (message.backtrace != null && message.hasOwnProperty(\"backtrace\"))\r\n                    if (!$util.isString(message.backtrace))\r\n                        return \"backtrace: string expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates an Error message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ServerMessage.Error} Error\r\n             */\r\n            Error.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ServerMessage.Error)\r\n                    return object;\r\n                var message = new $root.Buttplug.ServerMessage.Error();\r\n                switch (object.errorType) {\r\n                    case \"ButtplugConnectorError\":\r\n                    case 0:\r\n                        message.errorType = 0;\r\n                        break;\r\n                    case \"ButtplugHandshakeError\":\r\n                    case 1:\r\n                        message.errorType = 1;\r\n                        break;\r\n                    case \"ButtplugDeviceError\":\r\n                    case 2:\r\n                        message.errorType = 2;\r\n                        break;\r\n                    case \"ButtplugPingError\":\r\n                    case 3:\r\n                        message.errorType = 3;\r\n                        break;\r\n                    case \"ButtplugMessageError\":\r\n                    case 4:\r\n                        message.errorType = 4;\r\n                        break;\r\n                    case \"ButtplugUnknownError\":\r\n                    case 5:\r\n                        message.errorType = 5;\r\n                        break;\r\n                }\r\n                if (object.message != null)\r\n                    message.message = String(object.message);\r\n                if (object.backtrace != null)\r\n                    message.backtrace = String(object.backtrace);\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from an Error message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.Error} message Error\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Error.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.errorType = options.enums === String ? \"ButtplugConnectorError\" : 0;\r\n                    object.message = \"\";\r\n                    object.backtrace = \"\";\r\n                }\r\n                if (message.errorType != null && message.hasOwnProperty(\"errorType\"))\r\n                    object.errorType = options.enums === String ? $root.Buttplug.ServerMessage.ButtplugErrorType[message.errorType] : message.errorType;\r\n                if (message.message != null && message.hasOwnProperty(\"message\"))\r\n                    object.message = message.message;\r\n                if (message.backtrace != null && message.hasOwnProperty(\"backtrace\"))\r\n                    object.backtrace = message.backtrace;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this Error to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ServerMessage.Error\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Error.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return Error;\r\n        })();\r\n        ServerMessage.ScanningFinished = (function () {\r\n            /**\r\n             * Properties of a ScanningFinished.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @interface IScanningFinished\r\n             */\r\n            /**\r\n             * Constructs a new ScanningFinished.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @classdesc Represents a ScanningFinished.\r\n             * @implements IScanningFinished\r\n             * @constructor\r\n             * @param {Buttplug.ServerMessage.IScanningFinished=} [properties] Properties to set\r\n             */\r\n            function ScanningFinished(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new ScanningFinished instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IScanningFinished=} [properties] Properties to set\r\n             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished instance\r\n             */\r\n            ScanningFinished.create = function create(properties) {\r\n                return new ScanningFinished(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified ScanningFinished message. Does not implicitly {@link Buttplug.ServerMessage.ScanningFinished.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IScanningFinished} message ScanningFinished message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            ScanningFinished.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified ScanningFinished message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.ScanningFinished.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IScanningFinished} message ScanningFinished message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            ScanningFinished.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a ScanningFinished message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            ScanningFinished.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.ScanningFinished();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a ScanningFinished message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            ScanningFinished.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a ScanningFinished message.\r\n             * @function verify\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            ScanningFinished.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a ScanningFinished message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished\r\n             */\r\n            ScanningFinished.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ServerMessage.ScanningFinished)\r\n                    return object;\r\n                return new $root.Buttplug.ServerMessage.ScanningFinished();\r\n            };\r\n            /**\r\n             * Creates a plain object from a ScanningFinished message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.ScanningFinished} message ScanningFinished\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            ScanningFinished.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this ScanningFinished to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ServerMessage.ScanningFinished\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            ScanningFinished.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return ScanningFinished;\r\n        })();\r\n        ServerMessage.DeviceAdded = (function () {\r\n            /**\r\n             * Properties of a DeviceAdded.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @interface IDeviceAdded\r\n             * @property {string|null} [name] DeviceAdded name\r\n             * @property {number|null} [index] DeviceAdded index\r\n             * @property {Array.<Buttplug.ServerMessage.IMessageAttributes>|null} [messageAttributes] DeviceAdded messageAttributes\r\n             */\r\n            /**\r\n             * Constructs a new DeviceAdded.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @classdesc Represents a DeviceAdded.\r\n             * @implements IDeviceAdded\r\n             * @constructor\r\n             * @param {Buttplug.ServerMessage.IDeviceAdded=} [properties] Properties to set\r\n             */\r\n            function DeviceAdded(properties) {\r\n                this.messageAttributes = [];\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * DeviceAdded name.\r\n             * @member {string} name\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @instance\r\n             */\r\n            DeviceAdded.prototype.name = \"\";\r\n            /**\r\n             * DeviceAdded index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @instance\r\n             */\r\n            DeviceAdded.prototype.index = 0;\r\n            /**\r\n             * DeviceAdded messageAttributes.\r\n             * @member {Array.<Buttplug.ServerMessage.IMessageAttributes>} messageAttributes\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @instance\r\n             */\r\n            DeviceAdded.prototype.messageAttributes = $util.emptyArray;\r\n            /**\r\n             * Creates a new DeviceAdded instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDeviceAdded=} [properties] Properties to set\r\n             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded instance\r\n             */\r\n            DeviceAdded.create = function create(properties) {\r\n                return new DeviceAdded(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified DeviceAdded message. Does not implicitly {@link Buttplug.ServerMessage.DeviceAdded.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDeviceAdded} message DeviceAdded message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            DeviceAdded.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\r\n                    writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/ 16).uint32(message.index);\r\n                if (message.messageAttributes != null && message.messageAttributes.length)\r\n                    for (var i = 0; i < message.messageAttributes.length; ++i)\r\n                        $root.Buttplug.ServerMessage.MessageAttributes.encode(message.messageAttributes[i], writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified DeviceAdded message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.DeviceAdded.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDeviceAdded} message DeviceAdded message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            DeviceAdded.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a DeviceAdded message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            DeviceAdded.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.DeviceAdded();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.name = reader.string();\r\n                            break;\r\n                        case 2:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        case 3:\r\n                            if (!(message.messageAttributes && message.messageAttributes.length))\r\n                                message.messageAttributes = [];\r\n                            message.messageAttributes.push($root.Buttplug.ServerMessage.MessageAttributes.decode(reader, reader.uint32()));\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a DeviceAdded message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            DeviceAdded.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a DeviceAdded message.\r\n             * @function verify\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            DeviceAdded.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                    if (!$util.isString(message.name))\r\n                        return \"name: string expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                if (message.messageAttributes != null && message.hasOwnProperty(\"messageAttributes\")) {\r\n                    if (!Array.isArray(message.messageAttributes))\r\n                        return \"messageAttributes: array expected\";\r\n                    for (var i = 0; i < message.messageAttributes.length; ++i) {\r\n                        var error = $root.Buttplug.ServerMessage.MessageAttributes.verify(message.messageAttributes[i]);\r\n                        if (error)\r\n                            return \"messageAttributes.\" + error;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a DeviceAdded message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded\r\n             */\r\n            DeviceAdded.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ServerMessage.DeviceAdded)\r\n                    return object;\r\n                var message = new $root.Buttplug.ServerMessage.DeviceAdded();\r\n                if (object.name != null)\r\n                    message.name = String(object.name);\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                if (object.messageAttributes) {\r\n                    if (!Array.isArray(object.messageAttributes))\r\n                        throw TypeError(\".Buttplug.ServerMessage.DeviceAdded.messageAttributes: array expected\");\r\n                    message.messageAttributes = [];\r\n                    for (var i = 0; i < object.messageAttributes.length; ++i) {\r\n                        if (typeof object.messageAttributes[i] !== \"object\")\r\n                            throw TypeError(\".Buttplug.ServerMessage.DeviceAdded.messageAttributes: object expected\");\r\n                        message.messageAttributes[i] = $root.Buttplug.ServerMessage.MessageAttributes.fromObject(object.messageAttributes[i]);\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a DeviceAdded message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.DeviceAdded} message DeviceAdded\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            DeviceAdded.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.arrays || options.defaults)\r\n                    object.messageAttributes = [];\r\n                if (options.defaults) {\r\n                    object.name = \"\";\r\n                    object.index = 0;\r\n                }\r\n                if (message.name != null && message.hasOwnProperty(\"name\"))\r\n                    object.name = message.name;\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                if (message.messageAttributes && message.messageAttributes.length) {\r\n                    object.messageAttributes = [];\r\n                    for (var j = 0; j < message.messageAttributes.length; ++j)\r\n                        object.messageAttributes[j] = $root.Buttplug.ServerMessage.MessageAttributes.toObject(message.messageAttributes[j], options);\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this DeviceAdded to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ServerMessage.DeviceAdded\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            DeviceAdded.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return DeviceAdded;\r\n        })();\r\n        ServerMessage.DeviceRemoved = (function () {\r\n            /**\r\n             * Properties of a DeviceRemoved.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @interface IDeviceRemoved\r\n             * @property {number|null} [index] DeviceRemoved index\r\n             */\r\n            /**\r\n             * Constructs a new DeviceRemoved.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @classdesc Represents a DeviceRemoved.\r\n             * @implements IDeviceRemoved\r\n             * @constructor\r\n             * @param {Buttplug.ServerMessage.IDeviceRemoved=} [properties] Properties to set\r\n             */\r\n            function DeviceRemoved(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * DeviceRemoved index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @instance\r\n             */\r\n            DeviceRemoved.prototype.index = 0;\r\n            /**\r\n             * Creates a new DeviceRemoved instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDeviceRemoved=} [properties] Properties to set\r\n             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved instance\r\n             */\r\n            DeviceRemoved.create = function create(properties) {\r\n                return new DeviceRemoved(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified DeviceRemoved message. Does not implicitly {@link Buttplug.ServerMessage.DeviceRemoved.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDeviceRemoved} message DeviceRemoved message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            DeviceRemoved.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified DeviceRemoved message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.DeviceRemoved.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDeviceRemoved} message DeviceRemoved message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            DeviceRemoved.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a DeviceRemoved message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            DeviceRemoved.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.DeviceRemoved();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a DeviceRemoved message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            DeviceRemoved.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a DeviceRemoved message.\r\n             * @function verify\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            DeviceRemoved.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a DeviceRemoved message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved\r\n             */\r\n            DeviceRemoved.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ServerMessage.DeviceRemoved)\r\n                    return object;\r\n                var message = new $root.Buttplug.ServerMessage.DeviceRemoved();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a DeviceRemoved message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.DeviceRemoved} message DeviceRemoved\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            DeviceRemoved.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.index = 0;\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this DeviceRemoved to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ServerMessage.DeviceRemoved\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            DeviceRemoved.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return DeviceRemoved;\r\n        })();\r\n        ServerMessage.Disconnect = (function () {\r\n            /**\r\n             * Properties of a Disconnect.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @interface IDisconnect\r\n             */\r\n            /**\r\n             * Constructs a new Disconnect.\r\n             * @memberof Buttplug.ServerMessage\r\n             * @classdesc Represents a Disconnect.\r\n             * @implements IDisconnect\r\n             * @constructor\r\n             * @param {Buttplug.ServerMessage.IDisconnect=} [properties] Properties to set\r\n             */\r\n            function Disconnect(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Creates a new Disconnect instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDisconnect=} [properties] Properties to set\r\n             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect instance\r\n             */\r\n            Disconnect.create = function create(properties) {\r\n                return new Disconnect(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified Disconnect message. Does not implicitly {@link Buttplug.ServerMessage.Disconnect.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDisconnect} message Disconnect message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Disconnect.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.Disconnect.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.IDisconnect} message Disconnect message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Disconnect.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a Disconnect message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Disconnect.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.Disconnect();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a Disconnect message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Disconnect.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a Disconnect message.\r\n             * @function verify\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Disconnect.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect\r\n             */\r\n            Disconnect.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ServerMessage.Disconnect)\r\n                    return object;\r\n                return new $root.Buttplug.ServerMessage.Disconnect();\r\n            };\r\n            /**\r\n             * Creates a plain object from a Disconnect message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @static\r\n             * @param {Buttplug.ServerMessage.Disconnect} message Disconnect\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Disconnect.toObject = function toObject() {\r\n                return {};\r\n            };\r\n            /**\r\n             * Converts this Disconnect to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ServerMessage.Disconnect\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Disconnect.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return Disconnect;\r\n        })();\r\n        return ServerMessage;\r\n    })();\r\n    Buttplug.DeviceEvent = (function () {\r\n        /**\r\n         * Properties of a DeviceEvent.\r\n         * @memberof Buttplug\r\n         * @interface IDeviceEvent\r\n         * @property {Buttplug.DeviceEvent.IDisconnect|null} [disconnect] DeviceEvent disconnect\r\n         * @property {Buttplug.DeviceEvent.IBatteryLevelReading|null} [batteryLevelReading] DeviceEvent batteryLevelReading\r\n         * @property {Buttplug.DeviceEvent.IRSSILevelReading|null} [rssiLevelReading] DeviceEvent rssiLevelReading\r\n         * @property {Buttplug.DeviceEvent.IRawReading|null} [rawReading] DeviceEvent rawReading\r\n         */\r\n        /**\r\n         * Constructs a new DeviceEvent.\r\n         * @memberof Buttplug\r\n         * @classdesc Represents a DeviceEvent.\r\n         * @implements IDeviceEvent\r\n         * @constructor\r\n         * @param {Buttplug.IDeviceEvent=} [properties] Properties to set\r\n         */\r\n        function DeviceEvent(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n        /**\r\n         * DeviceEvent disconnect.\r\n         * @member {Buttplug.DeviceEvent.IDisconnect|null|undefined} disconnect\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @instance\r\n         */\r\n        DeviceEvent.prototype.disconnect = null;\r\n        /**\r\n         * DeviceEvent batteryLevelReading.\r\n         * @member {Buttplug.DeviceEvent.IBatteryLevelReading|null|undefined} batteryLevelReading\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @instance\r\n         */\r\n        DeviceEvent.prototype.batteryLevelReading = null;\r\n        /**\r\n         * DeviceEvent rssiLevelReading.\r\n         * @member {Buttplug.DeviceEvent.IRSSILevelReading|null|undefined} rssiLevelReading\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @instance\r\n         */\r\n        DeviceEvent.prototype.rssiLevelReading = null;\r\n        /**\r\n         * DeviceEvent rawReading.\r\n         * @member {Buttplug.DeviceEvent.IRawReading|null|undefined} rawReading\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @instance\r\n         */\r\n        DeviceEvent.prototype.rawReading = null;\r\n        // OneOf field names bound to virtual getters and setters\r\n        var $oneOfFields;\r\n        /**\r\n         * DeviceEvent msg.\r\n         * @member {\"disconnect\"|\"batteryLevelReading\"|\"rssiLevelReading\"|\"rawReading\"|undefined} msg\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @instance\r\n         */\r\n        Object.defineProperty(DeviceEvent.prototype, \"msg\", {\r\n            get: $util.oneOfGetter($oneOfFields = [\"disconnect\", \"batteryLevelReading\", \"rssiLevelReading\", \"rawReading\"]),\r\n            set: $util.oneOfSetter($oneOfFields)\r\n        });\r\n        /**\r\n         * Creates a new DeviceEvent instance using the specified properties.\r\n         * @function create\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {Buttplug.IDeviceEvent=} [properties] Properties to set\r\n         * @returns {Buttplug.DeviceEvent} DeviceEvent instance\r\n         */\r\n        DeviceEvent.create = function create(properties) {\r\n            return new DeviceEvent(properties);\r\n        };\r\n        /**\r\n         * Encodes the specified DeviceEvent message. Does not implicitly {@link Buttplug.DeviceEvent.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {Buttplug.IDeviceEvent} message DeviceEvent message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        DeviceEvent.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.disconnect != null && Object.hasOwnProperty.call(message, \"disconnect\"))\r\n                $root.Buttplug.DeviceEvent.Disconnect.encode(message.disconnect, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n            if (message.batteryLevelReading != null && Object.hasOwnProperty.call(message, \"batteryLevelReading\"))\r\n                $root.Buttplug.DeviceEvent.BatteryLevelReading.encode(message.batteryLevelReading, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\r\n            if (message.rssiLevelReading != null && Object.hasOwnProperty.call(message, \"rssiLevelReading\"))\r\n                $root.Buttplug.DeviceEvent.RSSILevelReading.encode(message.rssiLevelReading, writer.uint32(/* id 3, wireType 2 =*/ 26).fork()).ldelim();\r\n            if (message.rawReading != null && Object.hasOwnProperty.call(message, \"rawReading\"))\r\n                $root.Buttplug.DeviceEvent.RawReading.encode(message.rawReading, writer.uint32(/* id 4, wireType 2 =*/ 34).fork()).ldelim();\r\n            return writer;\r\n        };\r\n        /**\r\n         * Encodes the specified DeviceEvent message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {Buttplug.IDeviceEvent} message DeviceEvent message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        DeviceEvent.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n        /**\r\n         * Decodes a DeviceEvent message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {Buttplug.DeviceEvent} DeviceEvent\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        DeviceEvent.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                    case 1:\r\n                        message.disconnect = $root.Buttplug.DeviceEvent.Disconnect.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 2:\r\n                        message.batteryLevelReading = $root.Buttplug.DeviceEvent.BatteryLevelReading.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 3:\r\n                        message.rssiLevelReading = $root.Buttplug.DeviceEvent.RSSILevelReading.decode(reader, reader.uint32());\r\n                        break;\r\n                    case 4:\r\n                        message.rawReading = $root.Buttplug.DeviceEvent.RawReading.decode(reader, reader.uint32());\r\n                        break;\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Decodes a DeviceEvent message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {Buttplug.DeviceEvent} DeviceEvent\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        DeviceEvent.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n        /**\r\n         * Verifies a DeviceEvent message.\r\n         * @function verify\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        DeviceEvent.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            var properties = {};\r\n            if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.DeviceEvent.Disconnect.verify(message.disconnect);\r\n                    if (error)\r\n                        return \"disconnect.\" + error;\r\n                }\r\n            }\r\n            if (message.batteryLevelReading != null && message.hasOwnProperty(\"batteryLevelReading\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.DeviceEvent.BatteryLevelReading.verify(message.batteryLevelReading);\r\n                    if (error)\r\n                        return \"batteryLevelReading.\" + error;\r\n                }\r\n            }\r\n            if (message.rssiLevelReading != null && message.hasOwnProperty(\"rssiLevelReading\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.DeviceEvent.RSSILevelReading.verify(message.rssiLevelReading);\r\n                    if (error)\r\n                        return \"rssiLevelReading.\" + error;\r\n                }\r\n            }\r\n            if (message.rawReading != null && message.hasOwnProperty(\"rawReading\")) {\r\n                if (properties.msg === 1)\r\n                    return \"msg: multiple values\";\r\n                properties.msg = 1;\r\n                {\r\n                    var error = $root.Buttplug.DeviceEvent.RawReading.verify(message.rawReading);\r\n                    if (error)\r\n                        return \"rawReading.\" + error;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Creates a DeviceEvent message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {Buttplug.DeviceEvent} DeviceEvent\r\n         */\r\n        DeviceEvent.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.Buttplug.DeviceEvent)\r\n                return object;\r\n            var message = new $root.Buttplug.DeviceEvent();\r\n            if (object.disconnect != null) {\r\n                if (typeof object.disconnect !== \"object\")\r\n                    throw TypeError(\".Buttplug.DeviceEvent.disconnect: object expected\");\r\n                message.disconnect = $root.Buttplug.DeviceEvent.Disconnect.fromObject(object.disconnect);\r\n            }\r\n            if (object.batteryLevelReading != null) {\r\n                if (typeof object.batteryLevelReading !== \"object\")\r\n                    throw TypeError(\".Buttplug.DeviceEvent.batteryLevelReading: object expected\");\r\n                message.batteryLevelReading = $root.Buttplug.DeviceEvent.BatteryLevelReading.fromObject(object.batteryLevelReading);\r\n            }\r\n            if (object.rssiLevelReading != null) {\r\n                if (typeof object.rssiLevelReading !== \"object\")\r\n                    throw TypeError(\".Buttplug.DeviceEvent.rssiLevelReading: object expected\");\r\n                message.rssiLevelReading = $root.Buttplug.DeviceEvent.RSSILevelReading.fromObject(object.rssiLevelReading);\r\n            }\r\n            if (object.rawReading != null) {\r\n                if (typeof object.rawReading !== \"object\")\r\n                    throw TypeError(\".Buttplug.DeviceEvent.rawReading: object expected\");\r\n                message.rawReading = $root.Buttplug.DeviceEvent.RawReading.fromObject(object.rawReading);\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Creates a plain object from a DeviceEvent message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @static\r\n         * @param {Buttplug.DeviceEvent} message DeviceEvent\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        DeviceEvent.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\r\n                object.disconnect = $root.Buttplug.DeviceEvent.Disconnect.toObject(message.disconnect, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"disconnect\";\r\n            }\r\n            if (message.batteryLevelReading != null && message.hasOwnProperty(\"batteryLevelReading\")) {\r\n                object.batteryLevelReading = $root.Buttplug.DeviceEvent.BatteryLevelReading.toObject(message.batteryLevelReading, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"batteryLevelReading\";\r\n            }\r\n            if (message.rssiLevelReading != null && message.hasOwnProperty(\"rssiLevelReading\")) {\r\n                object.rssiLevelReading = $root.Buttplug.DeviceEvent.RSSILevelReading.toObject(message.rssiLevelReading, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"rssiLevelReading\";\r\n            }\r\n            if (message.rawReading != null && message.hasOwnProperty(\"rawReading\")) {\r\n                object.rawReading = $root.Buttplug.DeviceEvent.RawReading.toObject(message.rawReading, options);\r\n                if (options.oneofs)\r\n                    object.msg = \"rawReading\";\r\n            }\r\n            return object;\r\n        };\r\n        /**\r\n         * Converts this DeviceEvent to JSON.\r\n         * @function toJSON\r\n         * @memberof Buttplug.DeviceEvent\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        DeviceEvent.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n        DeviceEvent.Disconnect = (function () {\r\n            /**\r\n             * Properties of a Disconnect.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @interface IDisconnect\r\n             * @property {number|null} [index] Disconnect index\r\n             */\r\n            /**\r\n             * Constructs a new Disconnect.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @classdesc Represents a Disconnect.\r\n             * @implements IDisconnect\r\n             * @constructor\r\n             * @param {Buttplug.DeviceEvent.IDisconnect=} [properties] Properties to set\r\n             */\r\n            function Disconnect(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * Disconnect index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @instance\r\n             */\r\n            Disconnect.prototype.index = 0;\r\n            /**\r\n             * Creates a new Disconnect instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IDisconnect=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect instance\r\n             */\r\n            Disconnect.create = function create(properties) {\r\n                return new Disconnect(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified Disconnect message. Does not implicitly {@link Buttplug.DeviceEvent.Disconnect.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IDisconnect} message Disconnect message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Disconnect.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.Disconnect.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IDisconnect} message Disconnect message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            Disconnect.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a Disconnect message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Disconnect.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.Disconnect();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a Disconnect message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            Disconnect.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a Disconnect message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            Disconnect.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect\r\n             */\r\n            Disconnect.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceEvent.Disconnect)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceEvent.Disconnect();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a Disconnect message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.Disconnect} message Disconnect\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            Disconnect.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults)\r\n                    object.index = 0;\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this Disconnect to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceEvent.Disconnect\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            Disconnect.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return Disconnect;\r\n        })();\r\n        DeviceEvent.RawReading = (function () {\r\n            /**\r\n             * Properties of a RawReading.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @interface IRawReading\r\n             * @property {number|null} [index] RawReading index\r\n             * @property {Buttplug.Endpoint|null} [endpoint] RawReading endpoint\r\n             * @property {Uint8Array|null} [data] RawReading data\r\n             */\r\n            /**\r\n             * Constructs a new RawReading.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @classdesc Represents a RawReading.\r\n             * @implements IRawReading\r\n             * @constructor\r\n             * @param {Buttplug.DeviceEvent.IRawReading=} [properties] Properties to set\r\n             */\r\n            function RawReading(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RawReading index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @instance\r\n             */\r\n            RawReading.prototype.index = 0;\r\n            /**\r\n             * RawReading endpoint.\r\n             * @member {Buttplug.Endpoint} endpoint\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @instance\r\n             */\r\n            RawReading.prototype.endpoint = 0;\r\n            /**\r\n             * RawReading data.\r\n             * @member {Uint8Array} data\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @instance\r\n             */\r\n            RawReading.prototype.data = $util.newBuffer([]);\r\n            /**\r\n             * Creates a new RawReading instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IRawReading=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceEvent.RawReading} RawReading instance\r\n             */\r\n            RawReading.create = function create(properties) {\r\n                return new RawReading(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RawReading message. Does not implicitly {@link Buttplug.DeviceEvent.RawReading.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IRawReading} message RawReading message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawReading.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                if (message.endpoint != null && Object.hasOwnProperty.call(message, \"endpoint\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.endpoint);\r\n                if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\r\n                    writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.data);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RawReading message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.RawReading.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IRawReading} message RawReading message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RawReading.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RawReading message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceEvent.RawReading} RawReading\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawReading.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.RawReading();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        case 2:\r\n                            message.endpoint = reader.int32();\r\n                            break;\r\n                        case 3:\r\n                            message.data = reader.bytes();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RawReading message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceEvent.RawReading} RawReading\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RawReading.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RawReading message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RawReading.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    switch (message.endpoint) {\r\n                        default:\r\n                            return \"endpoint: enum value expected\";\r\n                        case 0:\r\n                        case 1:\r\n                        case 2:\r\n                        case 3:\r\n                        case 4:\r\n                        case 5:\r\n                        case 6:\r\n                        case 7:\r\n                        case 8:\r\n                        case 9:\r\n                        case 10:\r\n                        case 11:\r\n                        case 12:\r\n                        case 13:\r\n                        case 14:\r\n                        case 15:\r\n                        case 16:\r\n                        case 17:\r\n                        case 18:\r\n                        case 19:\r\n                        case 20:\r\n                        case 21:\r\n                        case 22:\r\n                        case 23:\r\n                        case 24:\r\n                        case 25:\r\n                        case 26:\r\n                        case 27:\r\n                        case 28:\r\n                        case 29:\r\n                        case 30:\r\n                        case 31:\r\n                        case 32:\r\n                        case 33:\r\n                        case 34:\r\n                        case 35:\r\n                        case 36:\r\n                        case 37:\r\n                        case 38:\r\n                        case 39:\r\n                        case 40:\r\n                        case 41:\r\n                        case 42:\r\n                        case 43:\r\n                        case 44:\r\n                            break;\r\n                    }\r\n                if (message.data != null && message.hasOwnProperty(\"data\"))\r\n                    if (!(message.data && typeof message.data.length === \"number\" || $util.isString(message.data)))\r\n                        return \"data: buffer expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RawReading message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceEvent.RawReading} RawReading\r\n             */\r\n            RawReading.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceEvent.RawReading)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceEvent.RawReading();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                switch (object.endpoint) {\r\n                    case \"Command\":\r\n                    case 0:\r\n                        message.endpoint = 0;\r\n                        break;\r\n                    case \"Firmware\":\r\n                    case 1:\r\n                        message.endpoint = 1;\r\n                        break;\r\n                    case \"Rx\":\r\n                    case 2:\r\n                        message.endpoint = 2;\r\n                        break;\r\n                    case \"RxAccel\":\r\n                    case 3:\r\n                        message.endpoint = 3;\r\n                        break;\r\n                    case \"RxBLEBattery\":\r\n                    case 4:\r\n                        message.endpoint = 4;\r\n                        break;\r\n                    case \"RxPressure\":\r\n                    case 5:\r\n                        message.endpoint = 5;\r\n                        break;\r\n                    case \"RxTouch\":\r\n                    case 6:\r\n                        message.endpoint = 6;\r\n                        break;\r\n                    case \"Tx\":\r\n                    case 7:\r\n                        message.endpoint = 7;\r\n                        break;\r\n                    case \"TxMode\":\r\n                    case 8:\r\n                        message.endpoint = 8;\r\n                        break;\r\n                    case \"TxShock\":\r\n                    case 9:\r\n                        message.endpoint = 9;\r\n                        break;\r\n                    case \"TxVibrate\":\r\n                    case 10:\r\n                        message.endpoint = 10;\r\n                        break;\r\n                    case \"TxVendorControl\":\r\n                    case 11:\r\n                        message.endpoint = 11;\r\n                        break;\r\n                    case \"Whitelist\":\r\n                    case 12:\r\n                        message.endpoint = 12;\r\n                        break;\r\n                    case \"Generic0\":\r\n                    case 13:\r\n                        message.endpoint = 13;\r\n                        break;\r\n                    case \"Generic1\":\r\n                    case 14:\r\n                        message.endpoint = 14;\r\n                        break;\r\n                    case \"Generic2\":\r\n                    case 15:\r\n                        message.endpoint = 15;\r\n                        break;\r\n                    case \"Generic3\":\r\n                    case 16:\r\n                        message.endpoint = 16;\r\n                        break;\r\n                    case \"Generic4\":\r\n                    case 17:\r\n                        message.endpoint = 17;\r\n                        break;\r\n                    case \"Generic5\":\r\n                    case 18:\r\n                        message.endpoint = 18;\r\n                        break;\r\n                    case \"Generic6\":\r\n                    case 19:\r\n                        message.endpoint = 19;\r\n                        break;\r\n                    case \"Generic7\":\r\n                    case 20:\r\n                        message.endpoint = 20;\r\n                        break;\r\n                    case \"Generic8\":\r\n                    case 21:\r\n                        message.endpoint = 21;\r\n                        break;\r\n                    case \"Generic9\":\r\n                    case 22:\r\n                        message.endpoint = 22;\r\n                        break;\r\n                    case \"Generic10\":\r\n                    case 23:\r\n                        message.endpoint = 23;\r\n                        break;\r\n                    case \"Generic11\":\r\n                    case 24:\r\n                        message.endpoint = 24;\r\n                        break;\r\n                    case \"Generic12\":\r\n                    case 25:\r\n                        message.endpoint = 25;\r\n                        break;\r\n                    case \"Generic13\":\r\n                    case 26:\r\n                        message.endpoint = 26;\r\n                        break;\r\n                    case \"Generic14\":\r\n                    case 27:\r\n                        message.endpoint = 27;\r\n                        break;\r\n                    case \"Generic15\":\r\n                    case 28:\r\n                        message.endpoint = 28;\r\n                        break;\r\n                    case \"Generic16\":\r\n                    case 29:\r\n                        message.endpoint = 29;\r\n                        break;\r\n                    case \"Generic17\":\r\n                    case 30:\r\n                        message.endpoint = 30;\r\n                        break;\r\n                    case \"Generic18\":\r\n                    case 31:\r\n                        message.endpoint = 31;\r\n                        break;\r\n                    case \"Generic19\":\r\n                    case 32:\r\n                        message.endpoint = 32;\r\n                        break;\r\n                    case \"Generic20\":\r\n                    case 33:\r\n                        message.endpoint = 33;\r\n                        break;\r\n                    case \"Generic21\":\r\n                    case 34:\r\n                        message.endpoint = 34;\r\n                        break;\r\n                    case \"Generic22\":\r\n                    case 35:\r\n                        message.endpoint = 35;\r\n                        break;\r\n                    case \"Generic23\":\r\n                    case 36:\r\n                        message.endpoint = 36;\r\n                        break;\r\n                    case \"Generic24\":\r\n                    case 37:\r\n                        message.endpoint = 37;\r\n                        break;\r\n                    case \"Generic25\":\r\n                    case 38:\r\n                        message.endpoint = 38;\r\n                        break;\r\n                    case \"Generic26\":\r\n                    case 39:\r\n                        message.endpoint = 39;\r\n                        break;\r\n                    case \"Generic27\":\r\n                    case 40:\r\n                        message.endpoint = 40;\r\n                        break;\r\n                    case \"Generic28\":\r\n                    case 41:\r\n                        message.endpoint = 41;\r\n                        break;\r\n                    case \"Generic29\":\r\n                    case 42:\r\n                        message.endpoint = 42;\r\n                        break;\r\n                    case \"Generic30\":\r\n                    case 43:\r\n                        message.endpoint = 43;\r\n                        break;\r\n                    case \"Generic31\":\r\n                    case 44:\r\n                        message.endpoint = 44;\r\n                        break;\r\n                }\r\n                if (object.data != null)\r\n                    if (typeof object.data === \"string\")\r\n                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);\r\n                    else if (object.data.length)\r\n                        message.data = object.data;\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RawReading message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.RawReading} message RawReading\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RawReading.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.index = 0;\r\n                    object.endpoint = options.enums === String ? \"Command\" : 0;\r\n                    if (options.bytes === String)\r\n                        object.data = \"\";\r\n                    else {\r\n                        object.data = [];\r\n                        if (options.bytes !== Array)\r\n                            object.data = $util.newBuffer(object.data);\r\n                    }\r\n                }\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                if (message.endpoint != null && message.hasOwnProperty(\"endpoint\"))\r\n                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;\r\n                if (message.data != null && message.hasOwnProperty(\"data\"))\r\n                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RawReading to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceEvent.RawReading\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RawReading.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RawReading;\r\n        })();\r\n        DeviceEvent.BatteryLevelReading = (function () {\r\n            /**\r\n             * Properties of a BatteryLevelReading.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @interface IBatteryLevelReading\r\n             * @property {number|null} [index] BatteryLevelReading index\r\n             * @property {number|null} [reading] BatteryLevelReading reading\r\n             */\r\n            /**\r\n             * Constructs a new BatteryLevelReading.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @classdesc Represents a BatteryLevelReading.\r\n             * @implements IBatteryLevelReading\r\n             * @constructor\r\n             * @param {Buttplug.DeviceEvent.IBatteryLevelReading=} [properties] Properties to set\r\n             */\r\n            function BatteryLevelReading(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * BatteryLevelReading index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @instance\r\n             */\r\n            BatteryLevelReading.prototype.index = 0;\r\n            /**\r\n             * BatteryLevelReading reading.\r\n             * @member {number} reading\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @instance\r\n             */\r\n            BatteryLevelReading.prototype.reading = 0;\r\n            /**\r\n             * Creates a new BatteryLevelReading instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IBatteryLevelReading=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading instance\r\n             */\r\n            BatteryLevelReading.create = function create(properties) {\r\n                return new BatteryLevelReading(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified BatteryLevelReading message. Does not implicitly {@link Buttplug.DeviceEvent.BatteryLevelReading.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IBatteryLevelReading} message BatteryLevelReading message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            BatteryLevelReading.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                if (message.reading != null && Object.hasOwnProperty.call(message, \"reading\"))\r\n                    writer.uint32(/* id 2, wireType 1 =*/ 17).double(message.reading);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified BatteryLevelReading message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.BatteryLevelReading.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IBatteryLevelReading} message BatteryLevelReading message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            BatteryLevelReading.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a BatteryLevelReading message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            BatteryLevelReading.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.BatteryLevelReading();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        case 2:\r\n                            message.reading = reader.double();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a BatteryLevelReading message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            BatteryLevelReading.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a BatteryLevelReading message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            BatteryLevelReading.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                if (message.reading != null && message.hasOwnProperty(\"reading\"))\r\n                    if (typeof message.reading !== \"number\")\r\n                        return \"reading: number expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a BatteryLevelReading message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading\r\n             */\r\n            BatteryLevelReading.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceEvent.BatteryLevelReading)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceEvent.BatteryLevelReading();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                if (object.reading != null)\r\n                    message.reading = Number(object.reading);\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a BatteryLevelReading message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.BatteryLevelReading} message BatteryLevelReading\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            BatteryLevelReading.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.index = 0;\r\n                    object.reading = 0;\r\n                }\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                if (message.reading != null && message.hasOwnProperty(\"reading\"))\r\n                    object.reading = options.json && !isFinite(message.reading) ? String(message.reading) : message.reading;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this BatteryLevelReading to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceEvent.BatteryLevelReading\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            BatteryLevelReading.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return BatteryLevelReading;\r\n        })();\r\n        DeviceEvent.RSSILevelReading = (function () {\r\n            /**\r\n             * Properties of a RSSILevelReading.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @interface IRSSILevelReading\r\n             * @property {number|null} [index] RSSILevelReading index\r\n             * @property {number|null} [reading] RSSILevelReading reading\r\n             */\r\n            /**\r\n             * Constructs a new RSSILevelReading.\r\n             * @memberof Buttplug.DeviceEvent\r\n             * @classdesc Represents a RSSILevelReading.\r\n             * @implements IRSSILevelReading\r\n             * @constructor\r\n             * @param {Buttplug.DeviceEvent.IRSSILevelReading=} [properties] Properties to set\r\n             */\r\n            function RSSILevelReading(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * RSSILevelReading index.\r\n             * @member {number} index\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @instance\r\n             */\r\n            RSSILevelReading.prototype.index = 0;\r\n            /**\r\n             * RSSILevelReading reading.\r\n             * @member {number} reading\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @instance\r\n             */\r\n            RSSILevelReading.prototype.reading = 0;\r\n            /**\r\n             * Creates a new RSSILevelReading instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IRSSILevelReading=} [properties] Properties to set\r\n             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading instance\r\n             */\r\n            RSSILevelReading.create = function create(properties) {\r\n                return new RSSILevelReading(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified RSSILevelReading message. Does not implicitly {@link Buttplug.DeviceEvent.RSSILevelReading.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IRSSILevelReading} message RSSILevelReading message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RSSILevelReading.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\r\n                    writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.index);\r\n                if (message.reading != null && Object.hasOwnProperty.call(message, \"reading\"))\r\n                    writer.uint32(/* id 2, wireType 0 =*/ 16).int32(message.reading);\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified RSSILevelReading message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.RSSILevelReading.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.IRSSILevelReading} message RSSILevelReading message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            RSSILevelReading.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a RSSILevelReading message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RSSILevelReading.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.RSSILevelReading();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.index = reader.uint32();\r\n                            break;\r\n                        case 2:\r\n                            message.reading = reader.int32();\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a RSSILevelReading message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            RSSILevelReading.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a RSSILevelReading message.\r\n             * @function verify\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            RSSILevelReading.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    if (!$util.isInteger(message.index))\r\n                        return \"index: integer expected\";\r\n                if (message.reading != null && message.hasOwnProperty(\"reading\"))\r\n                    if (!$util.isInteger(message.reading))\r\n                        return \"reading: integer expected\";\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a RSSILevelReading message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading\r\n             */\r\n            RSSILevelReading.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.DeviceEvent.RSSILevelReading)\r\n                    return object;\r\n                var message = new $root.Buttplug.DeviceEvent.RSSILevelReading();\r\n                if (object.index != null)\r\n                    message.index = object.index >>> 0;\r\n                if (object.reading != null)\r\n                    message.reading = object.reading | 0;\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a RSSILevelReading message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @static\r\n             * @param {Buttplug.DeviceEvent.RSSILevelReading} message RSSILevelReading\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            RSSILevelReading.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (options.defaults) {\r\n                    object.index = 0;\r\n                    object.reading = 0;\r\n                }\r\n                if (message.index != null && message.hasOwnProperty(\"index\"))\r\n                    object.index = message.index;\r\n                if (message.reading != null && message.hasOwnProperty(\"reading\"))\r\n                    object.reading = message.reading;\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this RSSILevelReading to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.DeviceEvent.RSSILevelReading\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            RSSILevelReading.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return RSSILevelReading;\r\n        })();\r\n        return DeviceEvent;\r\n    })();\r\n    Buttplug.ButtplugFFIServerMessage = (function () {\r\n        /**\r\n         * Properties of a ButtplugFFIServerMessage.\r\n         * @memberof Buttplug\r\n         * @interface IButtplugFFIServerMessage\r\n         * @property {number|null} [id] ButtplugFFIServerMessage id\r\n         * @property {Buttplug.ButtplugFFIServerMessage.IFFIMessage|null} [message] ButtplugFFIServerMessage message\r\n         */\r\n        /**\r\n         * Constructs a new ButtplugFFIServerMessage.\r\n         * @memberof Buttplug\r\n         * @classdesc Represents a ButtplugFFIServerMessage.\r\n         * @implements IButtplugFFIServerMessage\r\n         * @constructor\r\n         * @param {Buttplug.IButtplugFFIServerMessage=} [properties] Properties to set\r\n         */\r\n        function ButtplugFFIServerMessage(properties) {\r\n            if (properties)\r\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                    if (properties[keys[i]] != null)\r\n                        this[keys[i]] = properties[keys[i]];\r\n        }\r\n        /**\r\n         * ButtplugFFIServerMessage id.\r\n         * @member {number} id\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @instance\r\n         */\r\n        ButtplugFFIServerMessage.prototype.id = 0;\r\n        /**\r\n         * ButtplugFFIServerMessage message.\r\n         * @member {Buttplug.ButtplugFFIServerMessage.IFFIMessage|null|undefined} message\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @instance\r\n         */\r\n        ButtplugFFIServerMessage.prototype.message = null;\r\n        /**\r\n         * Creates a new ButtplugFFIServerMessage instance using the specified properties.\r\n         * @function create\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {Buttplug.IButtplugFFIServerMessage=} [properties] Properties to set\r\n         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage instance\r\n         */\r\n        ButtplugFFIServerMessage.create = function create(properties) {\r\n            return new ButtplugFFIServerMessage(properties);\r\n        };\r\n        /**\r\n         * Encodes the specified ButtplugFFIServerMessage message. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.verify|verify} messages.\r\n         * @function encode\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {Buttplug.IButtplugFFIServerMessage} message ButtplugFFIServerMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ButtplugFFIServerMessage.encode = function encode(message, writer) {\r\n            if (!writer)\r\n                writer = $Writer.create();\r\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\r\n                writer.uint32(/* id 1, wireType 0 =*/ 8).uint32(message.id);\r\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\r\n                $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\r\n            return writer;\r\n        };\r\n        /**\r\n         * Encodes the specified ButtplugFFIServerMessage message, length delimited. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.verify|verify} messages.\r\n         * @function encodeDelimited\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {Buttplug.IButtplugFFIServerMessage} message ButtplugFFIServerMessage message or plain object to encode\r\n         * @param {$protobuf.Writer} [writer] Writer to encode to\r\n         * @returns {$protobuf.Writer} Writer\r\n         */\r\n        ButtplugFFIServerMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n            return this.encode(message, writer).ldelim();\r\n        };\r\n        /**\r\n         * Decodes a ButtplugFFIServerMessage message from the specified reader or buffer.\r\n         * @function decode\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @param {number} [length] Message length if known beforehand\r\n         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ButtplugFFIServerMessage.decode = function decode(reader, length) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = $Reader.create(reader);\r\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ButtplugFFIServerMessage();\r\n            while (reader.pos < end) {\r\n                var tag = reader.uint32();\r\n                switch (tag >>> 3) {\r\n                    case 1:\r\n                        message.id = reader.uint32();\r\n                        break;\r\n                    case 2:\r\n                        message.message = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.decode(reader, reader.uint32());\r\n                        break;\r\n                    default:\r\n                        reader.skipType(tag & 7);\r\n                        break;\r\n                }\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Decodes a ButtplugFFIServerMessage message from the specified reader or buffer, length delimited.\r\n         * @function decodeDelimited\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage\r\n         * @throws {Error} If the payload is not a reader or valid buffer\r\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n         */\r\n        ButtplugFFIServerMessage.decodeDelimited = function decodeDelimited(reader) {\r\n            if (!(reader instanceof $Reader))\r\n                reader = new $Reader(reader);\r\n            return this.decode(reader, reader.uint32());\r\n        };\r\n        /**\r\n         * Verifies a ButtplugFFIServerMessage message.\r\n         * @function verify\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {Object.<string,*>} message Plain object to verify\r\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n         */\r\n        ButtplugFFIServerMessage.verify = function verify(message) {\r\n            if (typeof message !== \"object\" || message === null)\r\n                return \"object expected\";\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                if (!$util.isInteger(message.id))\r\n                    return \"id: integer expected\";\r\n            if (message.message != null && message.hasOwnProperty(\"message\")) {\r\n                var error = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.verify(message.message);\r\n                if (error)\r\n                    return \"message.\" + error;\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Creates a ButtplugFFIServerMessage message from a plain object. Also converts values to their respective internal types.\r\n         * @function fromObject\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {Object.<string,*>} object Plain object\r\n         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage\r\n         */\r\n        ButtplugFFIServerMessage.fromObject = function fromObject(object) {\r\n            if (object instanceof $root.Buttplug.ButtplugFFIServerMessage)\r\n                return object;\r\n            var message = new $root.Buttplug.ButtplugFFIServerMessage();\r\n            if (object.id != null)\r\n                message.id = object.id >>> 0;\r\n            if (object.message != null) {\r\n                if (typeof object.message !== \"object\")\r\n                    throw TypeError(\".Buttplug.ButtplugFFIServerMessage.message: object expected\");\r\n                message.message = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.fromObject(object.message);\r\n            }\r\n            return message;\r\n        };\r\n        /**\r\n         * Creates a plain object from a ButtplugFFIServerMessage message. Also converts values to other types if specified.\r\n         * @function toObject\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @static\r\n         * @param {Buttplug.ButtplugFFIServerMessage} message ButtplugFFIServerMessage\r\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n         * @returns {Object.<string,*>} Plain object\r\n         */\r\n        ButtplugFFIServerMessage.toObject = function toObject(message, options) {\r\n            if (!options)\r\n                options = {};\r\n            var object = {};\r\n            if (options.defaults) {\r\n                object.id = 0;\r\n                object.message = null;\r\n            }\r\n            if (message.id != null && message.hasOwnProperty(\"id\"))\r\n                object.id = message.id;\r\n            if (message.message != null && message.hasOwnProperty(\"message\"))\r\n                object.message = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.toObject(message.message, options);\r\n            return object;\r\n        };\r\n        /**\r\n         * Converts this ButtplugFFIServerMessage to JSON.\r\n         * @function toJSON\r\n         * @memberof Buttplug.ButtplugFFIServerMessage\r\n         * @instance\r\n         * @returns {Object.<string,*>} JSON object\r\n         */\r\n        ButtplugFFIServerMessage.prototype.toJSON = function toJSON() {\r\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n        };\r\n        ButtplugFFIServerMessage.FFIMessage = (function () {\r\n            /**\r\n             * Properties of a FFIMessage.\r\n             * @memberof Buttplug.ButtplugFFIServerMessage\r\n             * @interface IFFIMessage\r\n             * @property {Buttplug.IServerMessage|null} [serverMessage] FFIMessage serverMessage\r\n             * @property {Buttplug.IDeviceEvent|null} [deviceEvent] FFIMessage deviceEvent\r\n             */\r\n            /**\r\n             * Constructs a new FFIMessage.\r\n             * @memberof Buttplug.ButtplugFFIServerMessage\r\n             * @classdesc Represents a FFIMessage.\r\n             * @implements IFFIMessage\r\n             * @constructor\r\n             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage=} [properties] Properties to set\r\n             */\r\n            function FFIMessage(properties) {\r\n                if (properties)\r\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n                        if (properties[keys[i]] != null)\r\n                            this[keys[i]] = properties[keys[i]];\r\n            }\r\n            /**\r\n             * FFIMessage serverMessage.\r\n             * @member {Buttplug.IServerMessage|null|undefined} serverMessage\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.serverMessage = null;\r\n            /**\r\n             * FFIMessage deviceEvent.\r\n             * @member {Buttplug.IDeviceEvent|null|undefined} deviceEvent\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            FFIMessage.prototype.deviceEvent = null;\r\n            // OneOf field names bound to virtual getters and setters\r\n            var $oneOfFields;\r\n            /**\r\n             * FFIMessage msg.\r\n             * @member {\"serverMessage\"|\"deviceEvent\"|undefined} msg\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @instance\r\n             */\r\n            Object.defineProperty(FFIMessage.prototype, \"msg\", {\r\n                get: $util.oneOfGetter($oneOfFields = [\"serverMessage\", \"deviceEvent\"]),\r\n                set: $util.oneOfSetter($oneOfFields)\r\n            });\r\n            /**\r\n             * Creates a new FFIMessage instance using the specified properties.\r\n             * @function create\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage=} [properties] Properties to set\r\n             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage instance\r\n             */\r\n            FFIMessage.create = function create(properties) {\r\n                return new FFIMessage(properties);\r\n            };\r\n            /**\r\n             * Encodes the specified FFIMessage message. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.FFIMessage.verify|verify} messages.\r\n             * @function encode\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage} message FFIMessage message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            FFIMessage.encode = function encode(message, writer) {\r\n                if (!writer)\r\n                    writer = $Writer.create();\r\n                if (message.serverMessage != null && Object.hasOwnProperty.call(message, \"serverMessage\"))\r\n                    $root.Buttplug.ServerMessage.encode(message.serverMessage, writer.uint32(/* id 1, wireType 2 =*/ 10).fork()).ldelim();\r\n                if (message.deviceEvent != null && Object.hasOwnProperty.call(message, \"deviceEvent\"))\r\n                    $root.Buttplug.DeviceEvent.encode(message.deviceEvent, writer.uint32(/* id 2, wireType 2 =*/ 18).fork()).ldelim();\r\n                return writer;\r\n            };\r\n            /**\r\n             * Encodes the specified FFIMessage message, length delimited. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.FFIMessage.verify|verify} messages.\r\n             * @function encodeDelimited\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage} message FFIMessage message or plain object to encode\r\n             * @param {$protobuf.Writer} [writer] Writer to encode to\r\n             * @returns {$protobuf.Writer} Writer\r\n             */\r\n            FFIMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n                return this.encode(message, writer).ldelim();\r\n            };\r\n            /**\r\n             * Decodes a FFIMessage message from the specified reader or buffer.\r\n             * @function decode\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @param {number} [length] Message length if known beforehand\r\n             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            FFIMessage.decode = function decode(reader, length) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = $Reader.create(reader);\r\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ButtplugFFIServerMessage.FFIMessage();\r\n                while (reader.pos < end) {\r\n                    var tag = reader.uint32();\r\n                    switch (tag >>> 3) {\r\n                        case 1:\r\n                            message.serverMessage = $root.Buttplug.ServerMessage.decode(reader, reader.uint32());\r\n                            break;\r\n                        case 2:\r\n                            message.deviceEvent = $root.Buttplug.DeviceEvent.decode(reader, reader.uint32());\r\n                            break;\r\n                        default:\r\n                            reader.skipType(tag & 7);\r\n                            break;\r\n                    }\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Decodes a FFIMessage message from the specified reader or buffer, length delimited.\r\n             * @function decodeDelimited\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\r\n             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage\r\n             * @throws {Error} If the payload is not a reader or valid buffer\r\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\r\n             */\r\n            FFIMessage.decodeDelimited = function decodeDelimited(reader) {\r\n                if (!(reader instanceof $Reader))\r\n                    reader = new $Reader(reader);\r\n                return this.decode(reader, reader.uint32());\r\n            };\r\n            /**\r\n             * Verifies a FFIMessage message.\r\n             * @function verify\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {Object.<string,*>} message Plain object to verify\r\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n             */\r\n            FFIMessage.verify = function verify(message) {\r\n                if (typeof message !== \"object\" || message === null)\r\n                    return \"object expected\";\r\n                var properties = {};\r\n                if (message.serverMessage != null && message.hasOwnProperty(\"serverMessage\")) {\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.ServerMessage.verify(message.serverMessage);\r\n                        if (error)\r\n                            return \"serverMessage.\" + error;\r\n                    }\r\n                }\r\n                if (message.deviceEvent != null && message.hasOwnProperty(\"deviceEvent\")) {\r\n                    if (properties.msg === 1)\r\n                        return \"msg: multiple values\";\r\n                    properties.msg = 1;\r\n                    {\r\n                        var error = $root.Buttplug.DeviceEvent.verify(message.deviceEvent);\r\n                        if (error)\r\n                            return \"deviceEvent.\" + error;\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             * Creates a FFIMessage message from a plain object. Also converts values to their respective internal types.\r\n             * @function fromObject\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {Object.<string,*>} object Plain object\r\n             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage\r\n             */\r\n            FFIMessage.fromObject = function fromObject(object) {\r\n                if (object instanceof $root.Buttplug.ButtplugFFIServerMessage.FFIMessage)\r\n                    return object;\r\n                var message = new $root.Buttplug.ButtplugFFIServerMessage.FFIMessage();\r\n                if (object.serverMessage != null) {\r\n                    if (typeof object.serverMessage !== \"object\")\r\n                        throw TypeError(\".Buttplug.ButtplugFFIServerMessage.FFIMessage.serverMessage: object expected\");\r\n                    message.serverMessage = $root.Buttplug.ServerMessage.fromObject(object.serverMessage);\r\n                }\r\n                if (object.deviceEvent != null) {\r\n                    if (typeof object.deviceEvent !== \"object\")\r\n                        throw TypeError(\".Buttplug.ButtplugFFIServerMessage.FFIMessage.deviceEvent: object expected\");\r\n                    message.deviceEvent = $root.Buttplug.DeviceEvent.fromObject(object.deviceEvent);\r\n                }\r\n                return message;\r\n            };\r\n            /**\r\n             * Creates a plain object from a FFIMessage message. Also converts values to other types if specified.\r\n             * @function toObject\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @static\r\n             * @param {Buttplug.ButtplugFFIServerMessage.FFIMessage} message FFIMessage\r\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\r\n             * @returns {Object.<string,*>} Plain object\r\n             */\r\n            FFIMessage.toObject = function toObject(message, options) {\r\n                if (!options)\r\n                    options = {};\r\n                var object = {};\r\n                if (message.serverMessage != null && message.hasOwnProperty(\"serverMessage\")) {\r\n                    object.serverMessage = $root.Buttplug.ServerMessage.toObject(message.serverMessage, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"serverMessage\";\r\n                }\r\n                if (message.deviceEvent != null && message.hasOwnProperty(\"deviceEvent\")) {\r\n                    object.deviceEvent = $root.Buttplug.DeviceEvent.toObject(message.deviceEvent, options);\r\n                    if (options.oneofs)\r\n                        object.msg = \"deviceEvent\";\r\n                }\r\n                return object;\r\n            };\r\n            /**\r\n             * Converts this FFIMessage to JSON.\r\n             * @function toJSON\r\n             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage\r\n             * @instance\r\n             * @returns {Object.<string,*>} JSON object\r\n             */\r\n            FFIMessage.prototype.toJSON = function toJSON() {\r\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\r\n            };\r\n            return FFIMessage;\r\n        })();\r\n        return ButtplugFFIServerMessage;\r\n    })();\r\n    return Buttplug;\r\n})();\r\nmodule.exports = $root;\r\n//# sourceMappingURL=buttplug_ffi.js.map","import { Buttplug } from \"./buttplug_ffi\";\r\nfunction must_run_init_1(a) {\r\n    throw new Error(\"Must run buttplugInit() async before calling any Buttplug methods!\");\r\n}\r\nfunction must_run_init_2(a, b) {\r\n    throw new Error(\"Must run buttplugInit() async before calling any Buttplug methods!\");\r\n}\r\n// import { buttplug_create_client, buttplug_free_client, buttplug_parse_client_message, buttplug_activate_env_logger, buttplug_free_device, buttplug_create_device, buttplug_parse_device_message } from \"./buttplug-rs-ffi/buttplug_rs_ffi\";\r\nlet buttplug_create_client = must_run_init_2;\r\nlet buttplug_free_client = must_run_init_1;\r\nlet buttplug_parse_client_message = must_run_init_2;\r\nlet buttplug_activate_env_logger = must_run_init_1;\r\nlet buttplug_free_device = must_run_init_1;\r\nlet buttplug_create_device = must_run_init_2;\r\nlet buttplug_parse_device_message = must_run_init_2;\r\nlet buttplug_has_init_run = false;\r\nexport async function buttplugInit() {\r\n    if (buttplug_has_init_run) {\r\n        console.log(\"buttplugInit function has already run successfully. This only needs to be run once, but doesn't affect anything (other than printing this message) if called again.\");\r\n        return;\r\n    }\r\n    let index = await import(/* webpackPrefetch: 1 */ \"./buttplug-rs-ffi/buttplug_rs_ffi\").catch((e) => {\r\n        console.log(e);\r\n        return Promise.reject(e);\r\n    });\r\n    console.log(index);\r\n    buttplug_create_client = index.buttplug_create_client;\r\n    buttplug_free_client = index.buttplug_free_client;\r\n    buttplug_parse_client_message = index.buttplug_parse_client_message;\r\n    buttplug_activate_env_logger = index.buttplug_activate_env_logger;\r\n    buttplug_free_device = index.buttplug_free_device;\r\n    buttplug_create_device = index.buttplug_create_device;\r\n    buttplug_parse_device_message = index.buttplug_parse_device_message;\r\n    buttplug_has_init_run = true;\r\n}\r\nfunction sendClientMessage(sorter, clientPtr, message) {\r\n    let promise = sorter.PrepareOutgoingMessage(message);\r\n    let buffer = Buffer.from(Buttplug.ClientMessage.encode(message).finish());\r\n    buttplug_parse_client_message(clientPtr, buffer);\r\n    return promise;\r\n}\r\nexport function connectEmbedded(sorter, clientPtr, options) {\r\n    let msg = Buttplug.ClientMessage.create({\r\n        message: Buttplug.ClientMessage.FFIMessage.create({\r\n            connectLocal: Buttplug.ClientMessage.ConnectLocal.create({\r\n                serverName: options.ServerName,\r\n                allowRawMessages: options.AllowRawMessages,\r\n                deviceConfigurationJson: options.DeviceConfigJSON,\r\n                userDeviceConfigurationJson: options.UserDeviceConfigJSON,\r\n                commManagerTypes: options.DeviceCommunicationManagerTypes,\r\n                maxPingTime: options.MaxPingTime\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendClientMessage(sorter, clientPtr, msg);\r\n}\r\nexport function connectWebsocket(sorter, clientPtr, options) {\r\n    let msg = Buttplug.ClientMessage.create({\r\n        message: Buttplug.ClientMessage.FFIMessage.create({\r\n            connectWebsocket: Buttplug.ClientMessage.ConnectWebsocket.create({\r\n                address: options.Address\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendClientMessage(sorter, clientPtr, msg);\r\n}\r\nexport function disconnect(sorter, clientPtr) {\r\n    let msg = Buttplug.ClientMessage.create({\r\n        message: Buttplug.ClientMessage.FFIMessage.create({\r\n            disconnect: Buttplug.ClientMessage.Disconnect.create({})\r\n        })\r\n    });\r\n    return sendClientMessage(sorter, clientPtr, msg);\r\n}\r\nexport function startScanning(sorter, clientPtr) {\r\n    let msg = Buttplug.ClientMessage.create({\r\n        message: Buttplug.ClientMessage.FFIMessage.create({\r\n            startScanning: Buttplug.ClientMessage.StartScanning.create({})\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendClientMessage(sorter, clientPtr, msg);\r\n}\r\nexport function stopScanning(sorter, clientPtr) {\r\n    let msg = Buttplug.ClientMessage.create({\r\n        message: Buttplug.ClientMessage.FFIMessage.create({\r\n            stopScanning: Buttplug.ClientMessage.StopScanning.create({})\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendClientMessage(sorter, clientPtr, msg);\r\n}\r\nexport function stopAllDevices(sorter, clientPtr) {\r\n    let msg = Buttplug.ClientMessage.create({\r\n        message: Buttplug.ClientMessage.FFIMessage.create({\r\n            stopAllDevices: Buttplug.ClientMessage.StopAllDevices.create({})\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendClientMessage(sorter, clientPtr, msg);\r\n}\r\nfunction sendDeviceMessage(sorter, devicePtr, message) {\r\n    let promise = sorter.PrepareOutgoingMessage(message);\r\n    let buffer = Buffer.from(Buttplug.DeviceMessage.encode(message).finish());\r\n    buttplug_parse_device_message(devicePtr, buffer);\r\n    return promise;\r\n}\r\nexport function vibrate(sorter, devicePtr, speeds) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            vibrateCmd: Buttplug.DeviceMessage.VibrateCmd.create({\r\n                speeds: speeds\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function rotate(sorter, devicePtr, rotations) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            rotateCmd: Buttplug.DeviceMessage.RotateCmd.create({\r\n                rotations: rotations\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function linear(sorter, devicePtr, vectors) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            linearCmd: Buttplug.DeviceMessage.LinearCmd.create({\r\n                movements: vectors\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function stopDevice(sorter, devicePtr) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            stopDeviceCmd: Buttplug.DeviceMessage.StopDeviceCmd.create({})\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function batteryLevel(sorter, devicePtr) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            batteryLevelCmd: Buttplug.DeviceMessage.BatteryLevelCmd.create({})\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function rssiLevel(sorter, devicePtr) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            rssiLevelCmd: Buttplug.DeviceMessage.RSSILevelCmd.create({})\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function rawRead(sorter, devicePtr, endpoint, expectedLength, timeout) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            rawReadCmd: Buttplug.DeviceMessage.RawReadCmd.create({\r\n                endpoint: endpoint,\r\n                expectedLength: expectedLength,\r\n                timeout: timeout\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function rawWrite(sorter, devicePtr, endpoint, data, writeWithResponse) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            rawWriteCmd: Buttplug.DeviceMessage.RawWriteCmd.create({\r\n                endpoint: endpoint,\r\n                data: data,\r\n                writeWithResponse: writeWithResponse\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function rawSubscribe(sorter, devicePtr, endpoint) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            rawSubscribeCmd: Buttplug.DeviceMessage.RawSubscribeCmd.create({\r\n                endpoint: endpoint\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function rawUnsubscribe(sorter, devicePtr, endpoint) {\r\n    let msg = Buttplug.DeviceMessage.create({\r\n        message: Buttplug.DeviceMessage.FFIMessage.create({\r\n            rawUnsubscribeCmd: Buttplug.DeviceMessage.RawUnsubscribeCmd.create({\r\n                endpoint: endpoint\r\n            })\r\n        }),\r\n        id: 1\r\n    });\r\n    return sendDeviceMessage(sorter, devicePtr, msg);\r\n}\r\nexport function createClientPtr(eventCallback, clientName) {\r\n    return buttplug_create_client(eventCallback, clientName);\r\n}\r\nexport function createDevicePtr(clientPtr, deviceIndex) {\r\n    return buttplug_create_device(clientPtr, deviceIndex);\r\n}\r\nexport function freeClientPtr(clientPtr) {\r\n    buttplug_free_client(clientPtr);\r\n}\r\nexport function freeDevicePtr(devicePtr) {\r\n    buttplug_free_device(devicePtr);\r\n}\r\nexport function activateConsoleLogger(logLevel) {\r\n    buttplug_activate_env_logger(logLevel);\r\n}\r\n/*\r\nexport function addLogHandler(logCallback: Function, logLevel: \"error\" | \"warn\" | \"info\" | \"debug\" | \"trace\", useJSON: boolean) {\r\n  buttplug_add_log_handler(logCallback, logLevel, useJSON);\r\n}\r\n*/ \r\n//# sourceMappingURL=ffi.js.map","import { Buttplug } from \"./buttplug_ffi\";\r\nexport class ButtplugError extends Error {\r\n    constructor(aMessage, aId = 0, aInner) {\r\n        super(aMessage);\r\n        this.innerError = aInner;\r\n        this.messageId = aId;\r\n    }\r\n}\r\nexport class ButtplugHandshakeError extends ButtplugError {\r\n    constructor(aMessage, aId = 0) {\r\n        super(aMessage, aId);\r\n    }\r\n}\r\nexport class ButtplugDeviceError extends ButtplugError {\r\n    constructor(aMessage, aId = 0) {\r\n        super(aMessage, aId);\r\n    }\r\n}\r\nexport class ButtplugMessageError extends ButtplugError {\r\n    constructor(aMessage, aId = 0) {\r\n        super(aMessage, aId);\r\n    }\r\n}\r\nexport class ButtplugPingError extends ButtplugError {\r\n    constructor(aMessage, aId = 0) {\r\n        super(aMessage, aId);\r\n    }\r\n}\r\nexport class ButtplugUnknownError extends ButtplugError {\r\n    constructor(aMessage, aId = 0) {\r\n        super(aMessage, aId);\r\n    }\r\n}\r\nexport class ButtplugClientConnectorError extends ButtplugError {\r\n    constructor(aMessage, aId = 0) {\r\n        super(aMessage, aId);\r\n    }\r\n}\r\nexport function convertPBufError(err, id) {\r\n    if (err.errorType === Buttplug.ServerMessage.ButtplugErrorType.ButtplugConnectorError) {\r\n        return new ButtplugClientConnectorError(err.message, id);\r\n    }\r\n    if (err.errorType === Buttplug.ServerMessage.ButtplugErrorType.ButtplugDeviceError) {\r\n        return new ButtplugDeviceError(err.message, id);\r\n    }\r\n    if (err.errorType === Buttplug.ServerMessage.ButtplugErrorType.ButtplugHandshakeError) {\r\n        return new ButtplugHandshakeError(err.message, id);\r\n    }\r\n    if (err.errorType === Buttplug.ServerMessage.ButtplugErrorType.ButtplugMessageError) {\r\n        return new ButtplugMessageError(err.message, id);\r\n    }\r\n    if (err.errorType === Buttplug.ServerMessage.ButtplugErrorType.ButtplugPingError) {\r\n        return new ButtplugPingError(err.message, id);\r\n    }\r\n    if (err.errorType === Buttplug.ServerMessage.ButtplugErrorType.ButtplugUnknownError) {\r\n        return new ButtplugUnknownError(err.message, id);\r\n    }\r\n    throw new ButtplugUnknownError(\"Cannot convert error: \" + err);\r\n}\r\n//# sourceMappingURL=errors.js.map","/*!\r\n * Buttplug JS Source Code File - Visit https://buttplug.io for more info about\r\n * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the\r\n * project root for full license information.\r\n *\r\n * @copyright Copyright (c) Nonpolynomial Labs LLC. All rights reserved.\r\n */\r\n\"use strict\";\r\nimport { Buttplug } from \"./buttplug_ffi\";\r\nimport { ButtplugDeviceError } from \"./errors\";\r\nimport { EventEmitter } from \"events\";\r\nimport { vibrate, rotate, stopDevice, linear, batteryLevel, rssiLevel, rawRead, rawWrite, rawSubscribe, rawUnsubscribe } from \"./ffi\";\r\n// Re-export the protobuf enum, so we don't require users to have to know the\r\n// full resolution path.\r\nexport var ButtplugDeviceMessageType = Buttplug.ServerMessage.MessageAttributeType;\r\nexport class MessageAttributes {\r\n    constructor(attributes) {\r\n        this.featureCount = attributes.featureCount;\r\n        this.stepCount = attributes.stepCount;\r\n        this.maxDuration = attributes.maxDuration;\r\n        this.endpoints = attributes.endpoints;\r\n    }\r\n}\r\nexport class VibrationCmd {\r\n    constructor(index, speed) {\r\n        this.Index = index;\r\n        this.Speed = speed;\r\n    }\r\n}\r\nexport class RotationCmd {\r\n    constructor(index, speed, clockwise) {\r\n        this.Index = index;\r\n        this.Speed = speed;\r\n        this.Clockwise = clockwise;\r\n    }\r\n}\r\nexport class VectorCmd {\r\n    constructor(index, duration, position) {\r\n        this.Index = index;\r\n        this.Duration = duration;\r\n        this.Position = position;\r\n    }\r\n}\r\n/**\r\n * Represents an abstract device, capable of taking certain kinds of messages.\r\n */\r\nexport class ButtplugClientDevice extends EventEmitter {\r\n    /**\r\n     * @param _index Index of the device, as created by the device manager.\r\n     * @param _name Name of the device.\r\n     * @param allowedMsgs Buttplug messages the device can receive.\r\n     */\r\n    constructor(devicePtr, sorter, index, name, allowedMsgsObj) {\r\n        super();\r\n        this._messageAttributes = new Map();\r\n        this._devicePtr = devicePtr;\r\n        this._sorter = sorter;\r\n        this._index = index;\r\n        this._name = name;\r\n        for (let attributes of allowedMsgsObj) {\r\n            this._messageAttributes.set(attributes.messageType, new MessageAttributes(attributes));\r\n        }\r\n    }\r\n    /**\r\n     * Return the name of the device.\r\n     */\r\n    get Name() {\r\n        return this._name;\r\n    }\r\n    /**\r\n     * Return the index of the device.\r\n     */\r\n    get Index() {\r\n        return this._index;\r\n    }\r\n    /**\r\n     * Return a list of message types the device accepts.\r\n     */\r\n    get AllowedMessages() {\r\n        return Array.from(this._messageAttributes.keys());\r\n    }\r\n    /**\r\n     * Return the message attributes related to the given message\r\n     */\r\n    messageAttributes(messageName) {\r\n        return this._messageAttributes.get(messageName);\r\n    }\r\n    checkAllowedMessageType(messageType) {\r\n        if (!this._messageAttributes.has(messageType)) {\r\n            throw new ButtplugDeviceError(`Message ${ButtplugDeviceMessageType[messageType]} does not exist on device ${this._name}`);\r\n        }\r\n    }\r\n    async vibrate(speeds) {\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.VibrateCmd);\r\n        let msgSpeeds;\r\n        if (typeof (speeds) === \"number\") {\r\n            // We can skip the check here since we're building the command array ourselves.\r\n            const features = this._messageAttributes.get(ButtplugDeviceMessageType.VibrateCmd).featureCount;\r\n            msgSpeeds = Array.from({ length: features }, (_, i) => Buttplug.DeviceMessage.VibrateComponent.create({\r\n                index: i,\r\n                speed: speeds,\r\n            }));\r\n        }\r\n        else if (Array.isArray(speeds) && speeds.every(x => x instanceof VibrationCmd)) {\r\n            msgSpeeds = speeds.map(x => Buttplug.DeviceMessage.VibrateComponent.create({\r\n                index: x.Index,\r\n                speed: x.Speed\r\n            }));\r\n        }\r\n        else {\r\n            throw new ButtplugDeviceError(\"vibrate can only take numbers or arrays of numbers.\");\r\n        }\r\n        await vibrate(this._sorter, this._devicePtr, msgSpeeds);\r\n    }\r\n    async rotate(speeds, clockwise) {\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.RotateCmd);\r\n        let msgRotations;\r\n        if (typeof (speeds) === \"number\" && clockwise !== undefined) {\r\n            // We can skip the check here since we're building the command array ourselves.\r\n            const features = this._messageAttributes.get(ButtplugDeviceMessageType.RotateCmd).featureCount;\r\n            msgRotations = Array.from({ length: features }, (_, i) => Buttplug.DeviceMessage.RotateComponent.create({\r\n                index: i,\r\n                speed: speeds,\r\n                clockwise: clockwise\r\n            }));\r\n        }\r\n        else if (Array.isArray(speeds) && speeds.every(x => x instanceof RotationCmd)) {\r\n            msgRotations = speeds.map(x => Buttplug.DeviceMessage.RotateComponent.create({\r\n                index: x.Index,\r\n                speed: x.Speed,\r\n                clockwise: x.Clockwise\r\n            }));\r\n        }\r\n        else {\r\n            throw new ButtplugDeviceError(\"rotate can only take number/boolean or arrays of RotateCmds.\");\r\n        }\r\n        await rotate(this._sorter, this._devicePtr, msgRotations);\r\n    }\r\n    async linear(position, duration) {\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.LinearCmd);\r\n        let msgVectors;\r\n        if (typeof (position) === \"number\" && duration !== undefined) {\r\n            // We can skip the check here since we're building the command array ourselves.\r\n            const features = this._messageAttributes.get(ButtplugDeviceMessageType.LinearCmd).featureCount;\r\n            msgVectors = Array.from({ length: features }, (_, i) => Buttplug.DeviceMessage.LinearComponent.create({\r\n                index: i,\r\n                position: position,\r\n                duration: duration\r\n            }));\r\n        }\r\n        else if (Array.isArray(position) && position.every(x => x instanceof VectorCmd)) {\r\n            msgVectors = position.map(x => Buttplug.DeviceMessage.LinearComponent.create({\r\n                index: x.Index,\r\n                position: x.Position,\r\n                duration: x.Duration\r\n            }));\r\n        }\r\n        else {\r\n            throw new ButtplugDeviceError(\"linear can only take number/number or arrays of VectorCmds.\");\r\n        }\r\n        await linear(this._sorter, this._devicePtr, msgVectors);\r\n    }\r\n    async batteryLevel() {\r\n        var _a, _b, _c, _d;\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.BatteryLevelCmd);\r\n        let batteryMsg = await batteryLevel(this._sorter, this._devicePtr);\r\n        if ((_b = (_a = batteryMsg.message) === null || _a === void 0 ? void 0 : _a.deviceEvent) === null || _b === void 0 ? void 0 : _b.batteryLevelReading) {\r\n            let reading = (_d = (_c = batteryMsg.message) === null || _c === void 0 ? void 0 : _c.deviceEvent) === null || _d === void 0 ? void 0 : _d.batteryLevelReading;\r\n            return reading.reading;\r\n        }\r\n        throw new ButtplugDeviceError(\"Wrong reply message received for batteryLevel: \" + batteryMsg);\r\n    }\r\n    async rssiLevel() {\r\n        var _a, _b, _c, _d;\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.RSSILevelCmd);\r\n        let rssiMsg = await rssiLevel(this._sorter, this._devicePtr);\r\n        if ((_b = (_a = rssiMsg.message) === null || _a === void 0 ? void 0 : _a.deviceEvent) === null || _b === void 0 ? void 0 : _b.rssiLevelReading) {\r\n            return (_d = (_c = rssiMsg.message) === null || _c === void 0 ? void 0 : _c.deviceEvent) === null || _d === void 0 ? void 0 : _d.rssiLevelReading.reading;\r\n        }\r\n        throw new ButtplugDeviceError(\"Wrong reply message received for rssiLevel: \" + rssiMsg);\r\n    }\r\n    async rawRead(endpoint, expectedLength, timeout) {\r\n        var _a, _b;\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawReadCmd);\r\n        let readingMsg = await rawRead(this._sorter, this._devicePtr, endpoint, expectedLength, timeout);\r\n        if ((_b = (_a = readingMsg.message) === null || _a === void 0 ? void 0 : _a.deviceEvent) === null || _b === void 0 ? void 0 : _b.rawReading) {\r\n            return readingMsg.message.deviceEvent.rawReading.data;\r\n        }\r\n        throw new ButtplugDeviceError(\"Wrong reply message received for rawRead: \" + readingMsg);\r\n    }\r\n    async rawWrite(endpoint, data, writeWithResponse) {\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawWriteCmd);\r\n        await rawWrite(this._sorter, this._devicePtr, endpoint, data, writeWithResponse);\r\n    }\r\n    async rawSubscribe(endpoint) {\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawSubscribeCmd);\r\n        await rawSubscribe(this._sorter, this._devicePtr, endpoint);\r\n    }\r\n    async rawUnsubscribe(endpoint) {\r\n        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawUnsubscribeCmd);\r\n        await rawUnsubscribe(this._sorter, this._devicePtr, endpoint);\r\n    }\r\n    async stop() {\r\n        await stopDevice(this._sorter, this._devicePtr);\r\n    }\r\n    emitDisconnected() {\r\n        this.emit(\"deviceremoved\");\r\n    }\r\n}\r\n//# sourceMappingURL=device.js.map","export class ButtplugEmbeddedConnectorOptions {\r\n    constructor() {\r\n        this.ServerName = \"Buttplug WASM Embedded Server\";\r\n        // Empty string means ignore.\r\n        this.DeviceConfigJSON = \"\";\r\n        // Empty string means ignore.\r\n        this.UserDeviceConfigJSON = \"\";\r\n        // 0 here means all device.\r\n        this.DeviceCommunicationManagerTypes = 0;\r\n        // Require opt-in on raw messages.\r\n        this.AllowRawMessages = false;\r\n        this.MaxPingTime = 0;\r\n    }\r\n}\r\nexport class ButtplugWebsocketConnectorOptions {\r\n    constructor() {\r\n        // Default to the insecure port.\r\n        this.Address = \"ws://127.0.0.1:12345\";\r\n    }\r\n}\r\n//# sourceMappingURL=connectors.js.map","/*!\r\n * Buttplug JS Source Code File - Visit https://buttplug.io for more info about\r\n * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the\r\n * project root for full license information.\r\n *\r\n * @copyright Copyright (c) Nonpolynomial Labs LLC. All rights reserved.\r\n */\r\nimport { convertPBufError } from \"./errors\";\r\nexport class ButtplugMessageSorter {\r\n    constructor() {\r\n        this._counter = 1;\r\n        this._waitingMsgs = new Map();\r\n    }\r\n    // One of the places we should actually return a promise, as we need to store\r\n    // them while waiting for them to return across the line.\r\n    // tslint:disable:promise-function-async\r\n    PrepareOutgoingMessage(aMsg) {\r\n        aMsg.id = this._counter;\r\n        // Always increment last, otherwise we might lose sync\r\n        this._counter += 1;\r\n        let res;\r\n        let rej;\r\n        const msgPromise = new Promise((resolve, reject) => { res = resolve; rej = reject; });\r\n        this._waitingMsgs.set(aMsg.id, [res, rej]);\r\n        return msgPromise;\r\n    }\r\n    ParseIncomingMessages(msg) {\r\n        var _a, _b, _c, _d;\r\n        if (msg.id !== 0 && this._waitingMsgs.has(msg.id)) {\r\n            const [res, rej] = this._waitingMsgs.get(msg.id);\r\n            // If we've gotten back an error, reject the related promise using a\r\n            // ButtplugException derived type.\r\n            if ((_b = (_a = msg.message) === null || _a === void 0 ? void 0 : _a.serverMessage) === null || _b === void 0 ? void 0 : _b.error) {\r\n                rej(convertPBufError((_d = (_c = msg.message) === null || _c === void 0 ? void 0 : _c.serverMessage) === null || _d === void 0 ? void 0 : _d.error, msg.id));\r\n                return null;\r\n            }\r\n            res(msg);\r\n            return null;\r\n        }\r\n        return msg;\r\n    }\r\n}\r\n//# sourceMappingURL=sorter.js.map","/*!\r\n * Buttplug JS Source Code File - Visit https://buttplug.io for more info about\r\n * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the\r\n * project root for full license information.\r\n *\r\n * @copyright Copyright (c) Nonpolynomial Labs LLC. All rights reserved.\r\n */\r\n\"use strict\";\r\nimport { EventEmitter } from \"events\";\r\nimport { Buttplug } from \"./buttplug_ffi\";\r\nimport { ButtplugClientConnectorError } from \"./errors\";\r\nimport { createClientPtr, createDevicePtr, connectEmbedded, connectWebsocket, startScanning, stopScanning, stopAllDevices, disconnect } from \"./ffi\";\r\nimport { ButtplugEmbeddedConnectorOptions, ButtplugWebsocketConnectorOptions } from \"./connectors\";\r\nimport { ButtplugMessageSorter } from \"./sorter\";\r\nimport { ButtplugClientDevice } from \"./device\";\r\nexport class ButtplugClient extends EventEmitter {\r\n    constructor(clientName = \"Generic Buttplug Client\") {\r\n        super();\r\n        this._devices = new Map();\r\n        // This will either be null, or our WASM heap pointer for our connected client object.\r\n        this._clientPtr = undefined;\r\n        this._isScanning = false;\r\n        this._connected = false;\r\n        this._sorter = new ButtplugMessageSorter();\r\n        this.connect = async (options) => {\r\n            if (this._connected) {\r\n                throw new ButtplugClientConnectorError(\"Client already connected.\");\r\n            }\r\n            if (options instanceof ButtplugEmbeddedConnectorOptions) {\r\n                await connectEmbedded(this._sorter, this._clientPtr, options);\r\n            }\r\n            else if (options instanceof ButtplugWebsocketConnectorOptions) {\r\n                await connectWebsocket(this._sorter, this._clientPtr, options);\r\n            }\r\n            else {\r\n                throw new ButtplugClientConnectorError(\"Invalid connector type.\");\r\n            }\r\n            this._connected = true;\r\n        };\r\n        this.disconnect = async () => {\r\n            if (!this._clientPtr) {\r\n                throw new ButtplugClientConnectorError(\"Not connected.\");\r\n            }\r\n            await disconnect(this._sorter, this._clientPtr);\r\n        };\r\n        this.startScanning = async () => {\r\n            if (!this._connected) {\r\n                throw new ButtplugClientConnectorError(\"Not connected.\");\r\n            }\r\n            await startScanning(this._sorter, this._clientPtr);\r\n            this._isScanning = true;\r\n        };\r\n        this.stopScanning = async () => {\r\n            if (!this._connected) {\r\n                throw new ButtplugClientConnectorError(\"Not connected.\");\r\n            }\r\n            await stopScanning(this._sorter, this._clientPtr);\r\n            this._isScanning = false;\r\n        };\r\n        this.stopAllDevices = async () => {\r\n            if (!this._connected) {\r\n                throw new ButtplugClientConnectorError(\"Not connected.\");\r\n            }\r\n            await stopAllDevices(this._sorter, this._clientPtr);\r\n        };\r\n        this.sorterCallback = (buf) => {\r\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\r\n            const msg = Buttplug.ButtplugFFIServerMessage.decode(buf);\r\n            if (msg.id > 0) {\r\n                this._sorter.ParseIncomingMessages(msg);\r\n                return;\r\n            }\r\n            if ((_b = (_a = msg.message) === null || _a === void 0 ? void 0 : _a.serverMessage) === null || _b === void 0 ? void 0 : _b.deviceAdded) {\r\n                const addedMsg = (_d = (_c = msg.message) === null || _c === void 0 ? void 0 : _c.serverMessage) === null || _d === void 0 ? void 0 : _d.deviceAdded;\r\n                const devicePtr = createDevicePtr(this._clientPtr, addedMsg.index);\r\n                const device = new ButtplugClientDevice(devicePtr, this._sorter, addedMsg.index, addedMsg.name, addedMsg.messageAttributes);\r\n                this._devices.set(addedMsg.index, device);\r\n                this.emit(\"deviceadded\", device);\r\n                return;\r\n            }\r\n            if ((_f = (_e = msg.message) === null || _e === void 0 ? void 0 : _e.serverMessage) === null || _f === void 0 ? void 0 : _f.deviceRemoved) {\r\n                const removedMsg = (_h = (_g = msg.message) === null || _g === void 0 ? void 0 : _g.serverMessage) === null || _h === void 0 ? void 0 : _h.deviceRemoved;\r\n                if (this._devices.has(removedMsg.index)) {\r\n                    const removedDevice = this._devices.get(removedMsg.index);\r\n                    removedDevice === null || removedDevice === void 0 ? void 0 : removedDevice.emitDisconnected();\r\n                    this._devices.delete(removedMsg.index);\r\n                    this.emit(\"deviceremoved\", removedDevice);\r\n                }\r\n                return;\r\n            }\r\n            if ((_k = (_j = msg.message) === null || _j === void 0 ? void 0 : _j.serverMessage) === null || _k === void 0 ? void 0 : _k.scanningFinished) {\r\n                this._isScanning = false;\r\n                this.emit(\"scanningfinished\");\r\n                return;\r\n            }\r\n            if ((_m = (_l = msg.message) === null || _l === void 0 ? void 0 : _l.serverMessage) === null || _m === void 0 ? void 0 : _m.disconnect) {\r\n                this._connected = false;\r\n                this.emit(\"serverdisconnect\");\r\n            }\r\n        };\r\n        this._clientName = clientName;\r\n        this._clientPtr = createClientPtr(this.sorterCallback, clientName);\r\n    }\r\n    get Connected() {\r\n        return this._connected;\r\n    }\r\n    get Devices() {\r\n        // While this function doesn't actually send a message, if we don't have a\r\n        // connector, we shouldn't have devices.\r\n        this.CheckConnector();\r\n        const devices = [];\r\n        this._devices.forEach((d, i) => {\r\n            devices.push(d);\r\n        });\r\n        return devices;\r\n    }\r\n    get isScanning() {\r\n        return this._isScanning;\r\n    }\r\n    CheckConnector() {\r\n        if (!this.Connected) {\r\n            throw new ButtplugClientConnectorError(\"ButtplugClient not connected\");\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=client.js.map","import { createContext } from 'react'\n\nconst noinit = () => {\n  console.error('Context function called before buttplugReady state is true.')\n}\n\n/**\n * Default Context (this will be exposed when you consume).\n */\nconst defaultContext = {\n  /**\n   * An array of `ButtplugDevice` instances.\n   */\n  devices: [],\n\n  /**\n   * Flag indicating whether Buttplug is ready. You should wait until this is\n   * true before using any buttplug-y functions.\n   */\n  buttplugReady: false,\n\n  /**\n   * This is the direct handle to your Buttplug client. If you like it raw,\n   * uh, here you go.\n   */\n  client: null,\n\n  /**\n   * Call this to start scanning. You can also call `client.startScanning`\n   * I GUESS, but this has a handy default error screem when you call it before\n   * the Buttplug warms up.\n   */\n  startScanning: noinit\n}\n\n/**\n * This is a context provider! It's very modern-React-things-y and requires\n * React 16, I think. It's the backbone of this whole library, honestly.\n * You probably could've written this all yourself but that's doin' stuff.\n * Don't worry. I got you. Vibe on.\n */\nconst ButtplugDeviceContext = createContext(defaultContext)\n\nexport { defaultContext }\nexport default ButtplugDeviceContext\n","import { useEffect } from 'react'\nimport { ButtplugClientDevice } from 'buttplug'\nimport PropTypes from 'prop-types'\n\n/**\n *\n * @param children\n * @param device\n * @param vibrate\n * @returns {*}\n * @constructor\n */\nconst ButtplugDeviceController = ({ children, device, vibrate }) => {\n  useEffect(() => {\n    device && device.vibrate(vibrate)\n  }, [device, vibrate])\n\n  return children\n}\n\nButtplugDeviceController.propTypes = {\n  device: PropTypes.instanceOf(ButtplugClientDevice),\n  vibrate: PropTypes.number,\n  children: PropTypes.node\n}\n\nexport default ButtplugDeviceController\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ButtplugDeviceContext, { defaultContext } from './ButtplugDeviceContext'\nimport ButtplugDeviceController from './ButtplugDeviceController'\n\nimport {\n  buttplugInit,\n  activateConsoleLogger,\n  ButtplugEmbeddedConnectorOptions,\n  ButtplugClient\n} from 'buttplug'\n\n/**\n * Wrap your app in this and you'll be able to consume `ButtplugContext` wherever\n * you need control of buttplugs. Any methods of interest are available on the\n * context.\n *\n * @example First, provide your App.\n * ```\n * import { ButtplugProvider } from '@maustec/react-buttplug'\n * import {\n *   VibratorSearchButton,\n *   VibratorControls\n * } from 'the-next-examples'\n *\n * const App = () => {\n *   return (\n *     <ButtplugProvider serverName={\"buttplugs.\"}>\n *       <VibratorSearchButton />\n *       <VibratorControls />\n *     </ButtplugProvider>\n *   )\n * }\n * ```\n *\n * @example Then consume the context to create, for example, a connect button:\n * ```\n * import { useContext } from 'react'\n * import { ButtplugDeviceContext } from '@maustec/react-buttplug'\n *\n * const VibratorSearchButton = () => {\n *   const { buttplugReady, startSearching } = useContext(ButtplugDeviceContext);\n *\n *   const handleClick = (e) => {\n *     e.preventDefault();\n *     startSearching()\n *       .then(console.log)\n *       .catch(console.error)\n *    }\n *\n *   if (buttplugReady) {\n *     return (\n *       <a onClick={handleClick} href='#'>Start Searching</a>\n *     )\n *   } else {\n *     return (\n *       <p>Waiting for Buttplugs...</p>\n *     )\n *   }\n * }\n * ```\n *\n * @example Finally, you can do things with the devices here:\n * ```\n * import { useContext, useState } from 'react'\n * import {\n *   ButtplugDeviceContext,\n *   ButtplugDeviceController\n * } from '@maustec/react-buttplug'\n *\n * const VibratorControls = () => {\n *   const { devices } = useContext(ButtplugDeviceContext)\n *   const [ vibrateSpeed, setVibrateSpeed ] = useState(0.0);\n *\n *   const handleVibrateChange = (e) => {\n *     setVibrateSpeed(parseFloat(e.target.value))\n *   }\n *\n *   return (\n *     <div>\n *       <input type='number'\n *              min='0'\n *              max='1'\n *              value={ vibrateSpeed }\n *              onChange={ handleVibrateChange }\n *       />\n *     </div>\n *\n *     <ul>\n *       { devices.map((device) => (\n *         <ButtplugDeviceController device={device} vibrate={vibrateSpeed}>\n *           <li>{ device.Name }</li>\n *         </ButtplugDeviceController>\n *       )) }\n *     </ul>\n *   )\n * }\n * ```\n */\nclass ButtplugProvider extends Component {\n  static propTypes = {\n    /**\n     * Passing a `logLevel` here will enable Buttplug's console logger.\n     */\n    logLevel: PropTypes.oneOf(['error', 'warn', 'info', 'debug', 'trace']),\n\n    /**\n     * This name will be passed to the ButtplugClient instance. It's arbitrary.\n     */\n    clientName: PropTypes.string,\n\n    /**\n     * This name will be passed to the embedded Buttplug Server. Also arbitrary.\n     */\n    serverName: PropTypes.string,\n\n    /**\n     * The rest of your app goes here, now with 110% more ButtplugDeviceContext.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Callback if you wish to handle Buttplug errors and rejections. Usually\n     * receives a String-like thing.\n     */\n    onError: PropTypes.func,\n\n    /**\n     * Callback will be execute when the client connects to its own server.\n     * At this point, Buttplug will be truly ready, but you can also just\n     * wait for `context.buttplugReady` to become true.\n     */\n    onConnect: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ...defaultContext\n    }\n\n    this.client = null\n\n    this.addDevice = this.addDevice.bind(this)\n    this.removeDevice = this.removeDevice.bind(this)\n  }\n\n  addDevice(device) {\n    this.setState({\n      devices: [...this.state.devices, device]\n    })\n  }\n\n  removeDevice(device) {\n    const devices = [...this.state.devices]\n    this.setState({\n      devices: devices.filter((d) => d.Index !== device.index)\n    })\n  }\n\n  componentWillUnmount() {\n    this.state.devices.forEach((device) => device.disconnect())\n  }\n\n  componentDidMount() {\n    buttplugInit().then(() => {\n      this.client = new ButtplugClient(this.props.clientName)\n      this.client.addListener('deviceadded', this.addDevice)\n      this.client.addListener('deviceremoved', this.addDevice)\n\n      const options = new ButtplugEmbeddedConnectorOptions()\n      options.ServerName = this.props.serverName\n\n      this.client\n        .connect(options)\n        .then(this.props.onConnect)\n        .catch(this.props.onError)\n\n      this.setState({\n        buttplugReady: true,\n        client: this.client,\n        startScanning: this.client.startScanning\n      })\n\n      if (this.props.logLevel) {\n        activateConsoleLogger(this.props.logLevel)\n      }\n    })\n  }\n\n  render() {\n    return (\n      <ButtplugDeviceContext.Provider value={this.state}>\n        {this.props.children}\n      </ButtplugDeviceContext.Provider>\n    )\n  }\n}\n\nexport { ButtplugProvider, ButtplugDeviceContext, ButtplugDeviceController }\n","import React, { useContext, useState } from 'react'\nimport { ButtplugDeviceContext } from '@maustec/react-buttplug'\n\nconst VibratorSearchButton = () => {\n  const { buttplugReady, startScanning } = useContext(ButtplugDeviceContext)\n  const [pairing, setPairing] = useState(false)\n\n  const handleClick = (e) => {\n    e.preventDefault()\n    setPairing(true)\n    startScanning()\n      .then((msg) => {\n        setPairing(false)\n        console.log(msg)\n      })\n      .catch(console.error)\n  }\n\n  if (pairing) {\n    return <p>Pairing with devices...</p>\n  } else if (buttplugReady) {\n    return (\n      <a onClick={handleClick} href={'#/'}>\n        Start Searching\n      </a>\n    )\n  } else {\n    return <p>Waiting for Buttplugs...</p>\n  }\n}\n\nexport default VibratorSearchButton\n","import React, { useContext, useState } from 'react'\nimport {\n  ButtplugDeviceContext,\n  ButtplugDeviceController\n} from '@maustec/react-buttplug'\n\nconst VibratorControls = () => {\n  const { devices } = useContext(ButtplugDeviceContext)\n  const [vibrateSpeed, setVibrateSpeed] = useState(0.0)\n\n  const handleVibrateChange = (e) => {\n    setVibrateSpeed(parseFloat(e.target.value))\n  }\n\n  if (devices.length === 0) {\n    return null\n  }\n\n  return (\n    <div>\n      <input\n        type='number'\n        min='0'\n        max='1'\n        value={vibrateSpeed}\n        onChange={handleVibrateChange}\n      />\n\n      <ul>\n        {devices.map((device) => (\n          <ButtplugDeviceController key={device.Index} device={device} vibrate={vibrateSpeed}>\n            <li>{device.Name}</li>\n          </ButtplugDeviceController>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default VibratorControls\n","import React from 'react'\nimport './index.css'\n\nimport { ButtplugProvider } from '@maustec/react-buttplug'\nimport VibratorSearchButton from './VibratorSearchButton'\nimport VibratorControls from './VibratorControls'\n\nconst App = () => {\n  return (\n    <ButtplugProvider serverName={'buttplugs.'}>\n      <VibratorSearchButton />\n      <VibratorControls />\n    </ButtplugProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}